/* The following code was generated by JFlex 1.4.3 on 2/19/11 4:05 PM */

package com.innovatian.idea.powershell.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/19/11 4:05 PM from the specification file
 * <tt>PowerShell.flex</tt>
 */
class _PowerShellLexer implements FlexLexer, PsTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_INNER_BLOCK = 14;
  public static final int NLS_AFTER_LBRACE = 12;
  public static final int YYINITIAL = 0;
  public static final int IN_SINGLE_DOT = 8;
  public static final int IN_SINGLE_QUOTESTRING = 10;
  public static final int IN_SINGLE_IDENT = 6;
  public static final int IN_SINGLE_EXPSTRING_DOLLAR = 2;
  public static final int IN_SINGLE_EXPSTRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\17\22\0\1\3\1\0\1\21"+
    "\1\24\1\14\1\60\1\0\1\7\1\1\1\61\1\23\1\57\1\64"+
    "\1\4\1\25\1\22\1\12\11\10\1\6\1\65\1\56\1\54\1\55"+
    "\2\0\1\102\1\11\1\76\1\11\1\67\1\11\1\72\1\103\1\75"+
    "\1\5\1\77\1\74\1\101\1\71\1\100\1\106\1\70\1\105\1\104"+
    "\1\73\3\5\1\13\2\5\1\62\1\20\1\63\1\66\1\5\1\0"+
    "\1\34\1\26\1\36\1\43\1\27\1\46\1\30\1\40\1\31\1\110"+
    "\1\35\1\44\1\52\1\32\1\41\1\51\1\111\1\33\1\45\1\37"+
    "\1\42\1\107\1\53\1\47\1\50\1\5\1\15\1\0\1\16\54\0"+
    "\1\5\12\0\1\5\4\0\1\5\5\0\27\5\1\0\37\5\1\0"+
    "\u013f\5\31\0\162\5\4\0\14\5\16\0\5\5\11\0\1\5\213\0"+
    "\1\5\13\0\1\5\1\0\3\5\1\0\1\5\1\0\24\5\1\0"+
    "\54\5\1\0\46\5\1\0\5\5\4\0\202\5\10\0\105\5\1\0"+
    "\46\5\2\0\2\5\6\0\20\5\41\0\46\5\2\0\1\5\7\0"+
    "\47\5\110\0\33\5\5\0\3\5\56\0\32\5\5\0\13\5\43\0"+
    "\2\5\1\0\143\5\1\0\1\5\17\0\2\5\7\0\2\5\12\0"+
    "\3\5\2\0\1\5\20\0\1\5\1\0\36\5\35\0\3\5\60\0"+
    "\46\5\13\0\1\5\u0152\0\66\5\3\0\1\5\22\0\1\5\7\0"+
    "\12\5\43\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0"+
    "\1\5\3\0\4\5\3\0\1\5\36\0\2\5\1\0\3\5\16\0"+
    "\2\5\23\0\6\5\4\0\2\5\2\0\26\5\1\0\7\5\1\0"+
    "\2\5\1\0\2\5\1\0\2\5\37\0\4\5\1\0\1\5\23\0"+
    "\3\5\20\0\11\5\1\0\3\5\1\0\26\5\1\0\7\5\1\0"+
    "\2\5\1\0\5\5\3\0\1\5\22\0\1\5\17\0\2\5\43\0"+
    "\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0"+
    "\5\5\3\0\1\5\36\0\2\5\1\0\3\5\17\0\1\5\21\0"+
    "\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0"+
    "\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\10\5\1\0"+
    "\3\5\113\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0"+
    "\5\5\46\0\2\5\43\0\10\5\1\0\3\5\1\0\27\5\1\0"+
    "\12\5\1\0\5\5\3\0\1\5\40\0\1\5\1\0\2\5\43\0"+
    "\10\5\1\0\3\5\1\0\27\5\1\0\20\5\46\0\2\5\43\0"+
    "\22\5\3\0\30\5\1\0\11\5\1\0\1\5\2\0\7\5\72\0"+
    "\60\5\1\0\2\5\14\0\7\5\72\0\2\5\1\0\1\5\2\0"+
    "\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5\1\0"+
    "\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5\1\0"+
    "\2\5\11\0\1\5\2\0\5\5\1\0\1\5\25\0\2\5\42\0"+
    "\1\5\77\0\10\5\1\0\42\5\35\0\4\5\164\0\42\5\1\0"+
    "\5\5\1\0\2\5\45\0\6\5\112\0\46\5\12\0\51\5\7\0"+
    "\132\5\5\0\104\5\5\0\122\5\6\0\7\5\1\0\77\5\1\0"+
    "\1\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0"+
    "\47\5\1\0\1\5\1\0\4\5\2\0\37\5\1\0\1\5\1\0"+
    "\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\7\5\1\0"+
    "\7\5\1\0\27\5\1\0\37\5\1\0\1\5\1\0\4\5\2\0"+
    "\7\5\1\0\47\5\1\0\23\5\105\0\125\5\14\0\u026c\5\2\0"+
    "\10\5\12\0\32\5\5\0\113\5\25\0\15\5\1\0\4\5\16\0"+
    "\22\5\16\0\22\5\16\0\15\5\1\0\3\5\17\0\64\5\43\0"+
    "\1\5\4\0\1\5\103\0\130\5\10\0\51\5\127\0\35\5\63\0"+
    "\36\5\2\0\5\5\u038b\0\154\5\224\0\234\5\4\0\132\5\6\0"+
    "\26\5\2\0\6\5\2\0\46\5\2\0\6\5\2\0\10\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\37\5\2\0\65\5\1\0"+
    "\7\5\1\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5\2\0"+
    "\6\5\4\0\15\5\5\0\3\5\1\0\7\5\164\0\1\5\15\0"+
    "\1\5\202\0\1\5\4\0\1\5\2\0\12\5\1\0\1\5\3\0"+
    "\5\5\6\0\1\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0"+
    "\3\5\1\0\7\5\3\0\3\5\5\0\5\5\u0ebb\0\2\5\52\0"+
    "\5\5\5\0\2\5\4\0\126\5\6\0\3\5\1\0\132\5\1\0"+
    "\4\5\5\0\50\5\4\0\136\5\21\0\30\5\70\0\20\5\u0200\0"+
    "\u19b6\5\112\0\u51a6\5\132\0\u048d\5\u0773\0\u2ba4\5\u215c\0\u012e\5\2\0"+
    "\73\5\225\0\7\5\14\0\5\5\5\0\1\5\1\0\12\5\1\0"+
    "\15\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0"+
    "\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5\50\0\14\5\164\0"+
    "\5\5\1\0\207\5\44\0\32\5\6\0\32\5\13\0\131\5\3\0"+
    "\6\5\2\0\6\5\2\0\6\5\2\0\3\5\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\2\7\1\10\1\11\1\12\1\1\1\13\1\14\1\15"+
    "\1\16\1\17\5\1\1\20\4\1\1\20\11\1\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\1\1\34\1\10\1\35\1\36\1\1"+
    "\1\37\1\36\1\40\1\41\1\34\1\42\1\43\1\1"+
    "\20\42\13\0\1\44\2\0\1\45\1\46\1\4\2\0"+
    "\1\47\1\50\1\51\11\0\1\20\2\0\1\20\3\0"+
    "\1\20\2\0\1\52\1\53\4\0\1\20\1\0\2\20"+
    "\6\0\1\20\13\0\1\54\5\0\2\20\15\0\1\55"+
    "\1\56\1\57\2\0\1\60\33\42\1\61\1\62\6\0"+
    "\1\63\1\0\1\64\12\0\1\65\1\0\1\66\1\67"+
    "\1\0\1\7\1\50\1\70\2\0\1\71\15\0\1\20"+
    "\7\0\1\20\4\0\1\20\2\0\1\72\10\0\1\20"+
    "\14\0\1\73\14\0\43\42\1\74\1\75\1\76\1\77"+
    "\3\0\1\100\1\0\1\101\4\0\1\102\1\103\1\104"+
    "\1\105\4\0\1\106\1\0\1\107\3\0\1\50\2\0"+
    "\1\110\1\111\21\0\1\20\5\0\1\112\5\0\1\113"+
    "\23\0\32\42\20\0\1\114\1\0\1\50\1\0\1\115"+
    "\1\116\40\0\1\117\4\0\1\20\2\0\1\120\7\0"+
    "\1\121\16\0\1\122\1\0\1\20\1\123\22\42\5\0"+
    "\1\124\1\125\13\0\1\126\1\0\1\127\1\130\40\0"+
    "\1\131\23\0\1\20\4\0\1\132\1\0\1\133\6\0"+
    "\16\42\5\0\1\134\12\0\1\135\4\0\1\136\52\0"+
    "\1\137\2\0\1\140\6\0\2\42\6\0\1\141\1\0"+
    "\1\142\11\0\1\136\31\0\1\143\17\0\1\144\6\0"+
    "\2\42\1\0\1\145\1\0\1\146\2\0\1\147\1\0"+
    "\1\150\1\0\1\151\1\0\1\152\53\0\2\42\1\0"+
    "\1\153\1\154\2\0\1\155\1\156\32\0\1\42\26\0"+
    "\1\42\1\0\1\157\15\0\1\160\1\161\31\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[959];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\u0172\0\u01bc\0\u0172"+
    "\0\u0172\0\u0206\0\u0172\0\u0250\0\u0172\0\u029a\0\u02e4\0\u032e"+
    "\0\u0378\0\u0172\0\u0172\0\u03c2\0\u040c\0\u0456\0\u0172\0\u04a0"+
    "\0\u04ea\0\u0534\0\u057e\0\u05c8\0\u0612\0\u065c\0\u06a6\0\u06f0"+
    "\0\u073a\0\u0784\0\u07ce\0\u0818\0\u0862\0\u08ac\0\u08f6\0\u0940"+
    "\0\u098a\0\u09d4\0\u0a1e\0\u0a68\0\u0ab2\0\u0afc\0\u0b46\0\u0b90"+
    "\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172\0\u0172"+
    "\0\u0bda\0\u0172\0\u0c24\0\u0172\0\u0c6e\0\u0cb8\0\u0172\0\u0d02"+
    "\0\u0172\0\u0d4c\0\u0d96\0\u0de0\0\u0172\0\u04ea\0\u0e2a\0\u0e74"+
    "\0\u0ebe\0\u0f08\0\u0f52\0\u0f9c\0\u0fe6\0\u1030\0\u107a\0\u10c4"+
    "\0\u110e\0\u1158\0\u11a2\0\u11ec\0\u1236\0\u1280\0\u12ca\0\u1314"+
    "\0\u135e\0\u13a8\0\u13f2\0\u143c\0\u1486\0\u14d0\0\u151a\0\u1564"+
    "\0\u029a\0\u0172\0\u15ae\0\u15f8\0\u0172\0\u0172\0\u1642\0\u040c"+
    "\0\u168c\0\u0172\0\u16d6\0\u1720\0\u176a\0\u17b4\0\u17fe\0\u1848"+
    "\0\u1892\0\u18dc\0\u1926\0\u1970\0\u19ba\0\u0172\0\u1a04\0\u1a4e"+
    "\0\u1a98\0\u1ae2\0\u1b2c\0\u1b76\0\u1bc0\0\u1c0a\0\u1c54\0\u1c9e"+
    "\0\u0172\0\u1ce8\0\u1d32\0\u1d7c\0\u1dc6\0\u1b2c\0\u1e10\0\u1e5a"+
    "\0\u1ea4\0\u1eee\0\u1f38\0\u1f82\0\u1e5a\0\u1fcc\0\u2016\0\u1dc6"+
    "\0\u1ea4\0\u2060\0\u20aa\0\u20f4\0\u213e\0\u2188\0\u21d2\0\u221c"+
    "\0\u2266\0\u22b0\0\u22fa\0\u0172\0\u2344\0\u238e\0\u23d8\0\u2422"+
    "\0\u246c\0\u24b6\0\u2500\0\u254a\0\u2594\0\u25de\0\u2628\0\u2672"+
    "\0\u26bc\0\u2706\0\u2750\0\u279a\0\u27e4\0\u282e\0\u2878\0\u28c2"+
    "\0\u0172\0\u0172\0\u0172\0\u290c\0\u2956\0\u29a0\0\u29ea\0\u2a34"+
    "\0\u2a7e\0\u2ac8\0\u2b12\0\u2b5c\0\u2ba6\0\u2bf0\0\u2c3a\0\u2c84"+
    "\0\u2cce\0\u2d18\0\u2d62\0\u2dac\0\u2df6\0\u2e40\0\u2e8a\0\u2ed4"+
    "\0\u2f1e\0\u2f68\0\u2fb2\0\u2ffc\0\u3046\0\u3090\0\u30da\0\u3124"+
    "\0\u316e\0\u0172\0\u0172\0\u31b8\0\u3202\0\u324c\0\u3296\0\u32e0"+
    "\0\u332a\0\u3374\0\u33be\0\u0172\0\u3408\0\u3452\0\u349c\0\u34e6"+
    "\0\u3530\0\u357a\0\u35c4\0\u360e\0\u3658\0\u36a2\0\u0172\0\u36ec"+
    "\0\u0172\0\u0172\0\u3736\0\u15f8\0\u3780\0\u0172\0\u37ca\0\u3814"+
    "\0\u0172\0\u385e\0\u38a8\0\u38f2\0\u393c\0\u3986\0\u39d0\0\u3a1a"+
    "\0\u3a64\0\u3aae\0\u3af8\0\u3b42\0\u3b8c\0\u3bd6\0\u3c20\0\u3c6a"+
    "\0\u3cb4\0\u3cfe\0\u3d48\0\u3d92\0\u3ddc\0\u3e26\0\u3e70\0\u3eba"+
    "\0\u3f04\0\u3f4e\0\u3f98\0\u3fe2\0\u402c\0\u4076\0\u0172\0\u40c0"+
    "\0\u410a\0\u4154\0\u419e\0\u41e8\0\u4232\0\u427c\0\u42c6\0\u4310"+
    "\0\u435a\0\u43a4\0\u43ee\0\u4438\0\u4482\0\u44cc\0\u4516\0\u4560"+
    "\0\u1bc0\0\u45aa\0\u45f4\0\u463e\0\u4688\0\u46d2\0\u471c\0\u4766"+
    "\0\u47b0\0\u47fa\0\u4844\0\u488e\0\u48d8\0\u4922\0\u496c\0\u49b6"+
    "\0\u4a00\0\u4a4a\0\u4a94\0\u4ade\0\u4b28\0\u4b72\0\u4bbc\0\u4c06"+
    "\0\u4c50\0\u4c9a\0\u4ce4\0\u4d2e\0\u4d78\0\u4dc2\0\u4e0c\0\u4e56"+
    "\0\u4ea0\0\u4eea\0\u4f34\0\u4f7e\0\u4fc8\0\u5012\0\u505c\0\u50a6"+
    "\0\u50f0\0\u513a\0\u5184\0\u51ce\0\u5218\0\u5262\0\u52ac\0\u52f6"+
    "\0\u5340\0\u538a\0\u53d4\0\u541e\0\u0172\0\u0172\0\u0172\0\u0172"+
    "\0\u5468\0\u54b2\0\u54fc\0\u0172\0\u5546\0\u0172\0\u5590\0\u55da"+
    "\0\u5624\0\u566e\0\u0172\0\u0172\0\u0172\0\u0172\0\u56b8\0\u5702"+
    "\0\u574c\0\u5796\0\u0172\0\u57e0\0\u0172\0\u582a\0\u5874\0\u58be"+
    "\0\u5908\0\u5952\0\u599c\0\u59e6\0\u0172\0\u5a30\0\u5a7a\0\u5ac4"+
    "\0\u5b0e\0\u5b58\0\u5ba2\0\u5bec\0\u5c36\0\u5c80\0\u5cca\0\u5d14"+
    "\0\u5d5e\0\u5da8\0\u5df2\0\u5e3c\0\u5e86\0\u5ed0\0\u5f1a\0\u5f64"+
    "\0\u5fae\0\u5ff8\0\u6042\0\u608c\0\u0172\0\u60d6\0\u6120\0\u616a"+
    "\0\u61b4\0\u61fe\0\u0172\0\u6248\0\u6292\0\u62dc\0\u6326\0\u6370"+
    "\0\u63ba\0\u6404\0\u644e\0\u6498\0\u64e2\0\u652c\0\u6576\0\u65c0"+
    "\0\u660a\0\u6654\0\u669e\0\u66e8\0\u6732\0\u677c\0\u67c6\0\u6810"+
    "\0\u685a\0\u68a4\0\u68ee\0\u6938\0\u6982\0\u69cc\0\u6a16\0\u6a60"+
    "\0\u6aaa\0\u6af4\0\u6b3e\0\u6b88\0\u6bd2\0\u6c1c\0\u6c66\0\u6cb0"+
    "\0\u6cfa\0\u6d44\0\u6d8e\0\u6dd8\0\u6e22\0\u6e6c\0\u6eb6\0\u6f00"+
    "\0\u6f4a\0\u6f94\0\u6fde\0\u7028\0\u7072\0\u70bc\0\u7106\0\u7150"+
    "\0\u719a\0\u71e4\0\u722e\0\u7278\0\u72c2\0\u730c\0\u7356\0\u73a0"+
    "\0\u0172\0\u73ea\0\u0172\0\u5908\0\u0172\0\u0172\0\u7434\0\u747e"+
    "\0\u74c8\0\u7512\0\u755c\0\u75a6\0\u75f0\0\u763a\0\u7684\0\u76ce"+
    "\0\u7718\0\u7762\0\u77ac\0\u77f6\0\u7840\0\u788a\0\u78d4\0\u791e"+
    "\0\u7968\0\u79b2\0\u79fc\0\u7a46\0\u7a90\0\u7ada\0\u7b24\0\u7b6e"+
    "\0\u7bb8\0\u7c02\0\u7c4c\0\u7c96\0\u7ce0\0\u7d2a\0\u0172\0\u7d74"+
    "\0\u7dbe\0\u7e08\0\u7e52\0\u7e9c\0\u7ee6\0\u7f30\0\u0172\0\u7f7a"+
    "\0\u7fc4\0\u800e\0\u8058\0\u80a2\0\u80ec\0\u8136\0\u0172\0\u8180"+
    "\0\u81ca\0\u8214\0\u825e\0\u82a8\0\u82f2\0\u833c\0\u8386\0\u83d0"+
    "\0\u841a\0\u8464\0\u84ae\0\u84f8\0\u8542\0\u0172\0\u858c\0\u85d6"+
    "\0\u0172\0\u8620\0\u866a\0\u86b4\0\u86fe\0\u8748\0\u8792\0\u87dc"+
    "\0\u8826\0\u8870\0\u88ba\0\u8904\0\u894e\0\u8998\0\u89e2\0\u8a2c"+
    "\0\u8a76\0\u8ac0\0\u8b0a\0\u8b54\0\u8b9e\0\u8be8\0\u8c32\0\u8c7c"+
    "\0\u0172\0\u0172\0\u8cc6\0\u8d10\0\u8d5a\0\u8da4\0\u8dee\0\u8e38"+
    "\0\u8e82\0\u8ecc\0\u8f16\0\u8f60\0\u8faa\0\u0172\0\u8ff4\0\u0172"+
    "\0\u0172\0\u903e\0\u9088\0\u90d2\0\u911c\0\u9166\0\u91b0\0\u91fa"+
    "\0\u9244\0\u928e\0\u92d8\0\u9322\0\u936c\0\u93b6\0\u9400\0\u944a"+
    "\0\u9494\0\u94de\0\u9528\0\u9572\0\u95bc\0\u9606\0\u9650\0\u969a"+
    "\0\u96e4\0\u972e\0\u9778\0\u97c2\0\u980c\0\u9856\0\u98a0\0\u98ea"+
    "\0\u5f1a\0\u0172\0\u9934\0\u997e\0\u99c8\0\u9a12\0\u9a5c\0\u9aa6"+
    "\0\u9af0\0\u9b3a\0\u9b84\0\u9bce\0\u9c18\0\u9c62\0\u9cac\0\u9cf6"+
    "\0\u9d40\0\u9d8a\0\u9dd4\0\u9e1e\0\u9e68\0\u9eb2\0\u9efc\0\u9f46"+
    "\0\u9f90\0\u9fda\0\u0172\0\ua024\0\u0172\0\ua06e\0\ua0b8\0\ua102"+
    "\0\ua14c\0\ua196\0\ua1e0\0\ua22a\0\ua274\0\ua2be\0\ua308\0\ua352"+
    "\0\ua39c\0\ua3e6\0\ua430\0\ua47a\0\ua4c4\0\ua50e\0\ua558\0\ua5a2"+
    "\0\ua5ec\0\ua636\0\ua680\0\ua6ca\0\ua714\0\ua75e\0\u0172\0\ua7a8"+
    "\0\ua7f2\0\ua83c\0\ua886\0\ua8d0\0\ua91a\0\ua964\0\ua9ae\0\ua9f8"+
    "\0\uaa42\0\u0172\0\uaa8c\0\uaad6\0\uab20\0\uab6a\0\u0172\0\uabb4"+
    "\0\uabfe\0\uac48\0\uac92\0\uacdc\0\uad26\0\uad70\0\uadba\0\uae04"+
    "\0\uae4e\0\uae98\0\uaee2\0\uaf2c\0\uaf76\0\uafc0\0\ub00a\0\ub054"+
    "\0\ub09e\0\ub0e8\0\ub132\0\ub17c\0\ub1c6\0\ub210\0\ub25a\0\ub2a4"+
    "\0\ub2ee\0\ub338\0\ub382\0\ub3cc\0\ub416\0\ub460\0\u3fe2\0\ub4aa"+
    "\0\ub4f4\0\ub53e\0\ub588\0\ub5d2\0\ub61c\0\ub666\0\ub6b0\0\ub6fa"+
    "\0\ub744\0\u0172\0\ub78e\0\ub7d8\0\u0172\0\ub822\0\ub86c\0\ub8b6"+
    "\0\ub900\0\ub94a\0\ub994\0\ub9de\0\uba28\0\uba72\0\ubabc\0\ubb06"+
    "\0\ubb50\0\ubb9a\0\ubbe4\0\u0172\0\ubc2e\0\u0172\0\ubc78\0\ubcc2"+
    "\0\ubd0c\0\ubd56\0\ubda0\0\ubdea\0\ube34\0\ube7e\0\ubec8\0\ubf12"+
    "\0\ubf5c\0\ubfa6\0\ubff0\0\uc03a\0\uc084\0\uc0ce\0\uc118\0\uc162"+
    "\0\uc1ac\0\uc1f6\0\uc240\0\uc28a\0\uc2d4\0\uc31e\0\uc368\0\uc3b2"+
    "\0\uc3fc\0\uc446\0\uc490\0\uc4da\0\uc524\0\uc56e\0\uc5b8\0\uc602"+
    "\0\uc64c\0\u0172\0\uc696\0\uc6e0\0\uc72a\0\uc774\0\uc7be\0\uc808"+
    "\0\uc852\0\uc89c\0\uc8e6\0\uc930\0\uc97a\0\uc9c4\0\uca0e\0\uca58"+
    "\0\ucaa2\0\u0172\0\ucaec\0\ucb36\0\ucb80\0\ucbca\0\ucc14\0\ucc5e"+
    "\0\ucca8\0\uccf2\0\ucd3c\0\u0172\0\ucd86\0\u0172\0\ucdd0\0\uce1a"+
    "\0\u0172\0\uce64\0\u0172\0\uceae\0\u0172\0\ucef8\0\u0172\0\ucf42"+
    "\0\ucf8c\0\ucfd6\0\ud020\0\ud06a\0\ud0b4\0\ud0fe\0\ud148\0\ud192"+
    "\0\ud1dc\0\ud226\0\ud270\0\ud2ba\0\ud304\0\ud34e\0\ud398\0\ud3e2"+
    "\0\ud42c\0\ud476\0\ud4c0\0\ud50a\0\ud554\0\ud59e\0\ud5e8\0\ud632"+
    "\0\ud67c\0\ud6c6\0\ud710\0\ud75a\0\ud7a4\0\ud7ee\0\ud838\0\ud882"+
    "\0\ud8cc\0\ud916\0\ud960\0\ud9aa\0\ud9f4\0\uda3e\0\uda88\0\udad2"+
    "\0\udb1c\0\udb66\0\udbb0\0\udbfa\0\udc44\0\u0172\0\u0172\0\udc8e"+
    "\0\udcd8\0\u0172\0\u0172\0\udd22\0\udd6c\0\uddb6\0\ude00\0\ude4a"+
    "\0\ude94\0\udede\0\udf28\0\udf72\0\udfbc\0\ue006\0\ue050\0\ue09a"+
    "\0\ue0e4\0\ue12e\0\ue178\0\ue1c2\0\ue20c\0\ue256\0\ue2a0\0\ue2ea"+
    "\0\ue334\0\ue37e\0\ue3c8\0\ue412\0\ue45c\0\ue4a6\0\ue4f0\0\ue53a"+
    "\0\ue584\0\ue5ce\0\ue618\0\ue662\0\ue6ac\0\ue6f6\0\ue740\0\ue78a"+
    "\0\ue7d4\0\ue81e\0\ue868\0\ue8b2\0\ue8fc\0\ue946\0\ue990\0\ue9da"+
    "\0\uea24\0\uea6e\0\ueab8\0\ueb02\0\ueb4c\0\ueb96\0\u0172\0\uebe0"+
    "\0\uec2a\0\uec74\0\uecbe\0\ued08\0\ued52\0\ued9c\0\uede6\0\uee30"+
    "\0\uee7a\0\ueec4\0\uef0e\0\uef58\0\u0172\0\u0172\0\uefa2\0\uefec"+
    "\0\uf036\0\uf080\0\uf0ca\0\uf114\0\uf15e\0\uf1a8\0\uf1f2\0\uf23c"+
    "\0\uf286\0\uf2d0\0\uf31a\0\uf364\0\uf3ae\0\uf3f8\0\uf442\0\uf48c"+
    "\0\uf4d6\0\uf520\0\uf56a\0\uf5b4\0\uf5fe\0\uf648\0\uf692";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[959];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\14\1\10\1\15\1\16"+
    "\1\17\1\10\1\20\1\10\1\21\1\22\1\23\1\12"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\2\10"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\21\10\1\71"+
    "\1\10\5\72\1\73\3\72\1\73\1\72\1\73\1\72"+
    "\1\74\10\72\26\73\13\72\23\73\2\75\1\76\11\75"+
    "\1\77\2\75\1\76\1\100\1\101\70\75\5\72\1\102"+
    "\3\72\1\102\1\72\1\102\12\72\26\102\13\72\23\102"+
    "\25\72\1\103\64\72\112\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\104\1\15\1\16\1\17\1\104\1\20\1\104"+
    "\1\21\1\22\1\105\1\12\1\24\1\25\1\26\1\27"+
    "\1\30\1\106\1\104\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\1\104\1\115\1\116\1\104\1\117\1\120\2\104"+
    "\1\121\1\122\2\104\1\123\1\124\1\125\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\21\104\1\126\1\104\2\0\2\12\13\0\1\12"+
    "\1\127\120\0\1\130\1\131\1\132\1\133\1\134\2\0"+
    "\1\135\5\0\1\136\1\137\4\0\1\140\14\0\1\130"+
    "\1\0\1\133\1\131\1\0\1\136\1\132\1\135\2\0"+
    "\1\140\1\137\2\0\1\134\4\0\2\141\1\0\4\141"+
    "\1\142\7\141\1\0\1\143\71\141\10\0\1\17\1\0"+
    "\1\17\107\0\1\17\1\0\1\17\1\144\33\0\1\144"+
    "\42\0\5\145\1\73\2\145\4\73\1\146\11\145\26\73"+
    "\13\145\23\73\2\0\1\13\14\0\1\147\72\0\2\150"+
    "\1\0\11\150\1\0\2\150\1\0\1\151\1\152\70\150"+
    "\23\0\1\153\66\0\2\30\1\0\14\30\1\0\72\30"+
    "\25\0\1\154\113\0\1\155\3\0\1\156\110\0\1\157"+
    "\1\160\2\0\1\161\5\0\1\162\2\0\1\163\1\0"+
    "\1\164\67\0\1\165\1\0\1\166\1\0\1\167\1\170"+
    "\1\0\1\171\1\0\1\172\1\0\1\166\1\173\1\166"+
    "\1\174\3\0\1\175\1\166\1\176\33\0\1\166\31\0"+
    "\1\177\1\0\1\166\1\200\5\0\1\172\5\0\1\201"+
    "\2\0\1\164\1\202\66\0\1\203\1\0\1\166\2\0"+
    "\1\170\6\0\1\173\43\0\1\166\31\0\1\204\1\0"+
    "\1\166\1\205\10\0\1\206\1\0\1\207\3\0\1\166"+
    "\1\210\34\0\1\211\40\0\1\166\4\0\1\212\1\0"+
    "\1\207\75\0\1\213\114\0\1\214\3\0\1\215\1\216"+
    "\1\0\1\166\1\217\4\0\1\220\35\0\1\221\31\0"+
    "\1\222\3\0\1\223\4\0\1\224\7\0\1\225\72\0"+
    "\1\226\120\0\1\166\1\0\1\227\101\0\1\230\16\0"+
    "\1\231\67\0\1\170\1\0\1\232\2\0\1\233\4\0"+
    "\1\234\115\0\1\166\3\0\1\166\67\0\1\235\1\0"+
    "\1\166\2\0\1\236\1\0\1\166\1\237\1\0\1\240"+
    "\1\241\1\0\1\242\4\0\1\243\1\0\1\244\33\0"+
    "\1\166\33\0\1\245\4\0\2\166\1\0\1\246\1\247"+
    "\1\0\1\166\6\0\1\166\71\0\1\250\1\251\4\0"+
    "\1\252\1\253\2\0\1\166\5\0\1\254\65\0\1\255"+
    "\1\0\1\166\7\0\1\256\7\0\1\166\35\0\1\166"+
    "\35\0\1\257\4\0\1\260\125\0\1\261\111\0\1\262"+
    "\111\0\1\263\76\0\1\264\55\0\1\73\2\0\4\73"+
    "\12\0\26\73\13\0\23\73\2\75\1\0\11\75\1\0"+
    "\2\75\1\0\1\100\1\0\70\75\2\0\2\76\13\0"+
    "\1\76\1\265\71\0\112\75\5\0\1\102\2\0\4\102"+
    "\12\0\26\102\13\0\23\102\5\0\1\266\3\0\1\266"+
    "\1\0\1\266\12\0\26\266\13\0\23\266\5\0\1\104"+
    "\2\0\4\104\12\0\26\104\13\0\23\104\5\0\1\104"+
    "\2\0\4\104\12\0\21\104\1\267\4\104\13\0\23\104"+
    "\5\0\1\104\2\0\4\104\12\0\1\104\1\270\3\104"+
    "\1\271\20\104\13\0\23\104\5\0\1\104\2\0\4\104"+
    "\12\0\4\104\1\272\17\104\1\273\1\104\13\0\23\104"+
    "\5\0\1\104\2\0\4\104\12\0\1\104\1\274\24\104"+
    "\13\0\23\104\5\0\1\104\2\0\4\104\12\0\1\104"+
    "\1\275\24\104\13\0\23\104\5\0\1\104\2\0\4\104"+
    "\12\0\15\104\1\276\10\104\13\0\23\104\5\0\1\104"+
    "\2\0\4\104\12\0\13\104\1\277\2\104\1\300\7\104"+
    "\13\0\23\104\5\0\1\104\2\0\4\104\12\0\1\104"+
    "\1\301\3\104\1\302\20\104\13\0\23\104\5\0\1\104"+
    "\2\0\4\104\12\0\14\104\1\303\11\104\13\0\23\104"+
    "\5\0\1\104\2\0\4\104\12\0\23\104\1\304\2\104"+
    "\13\0\23\104\5\0\1\104\2\0\4\104\12\0\1\104"+
    "\1\305\7\104\1\306\1\104\1\307\1\310\6\104\1\311"+
    "\2\104\13\0\23\104\5\0\1\104\2\0\4\104\12\0"+
    "\13\104\1\312\12\104\13\0\23\104\5\0\1\104\2\0"+
    "\4\104\12\0\13\104\1\313\1\314\11\104\13\0\23\104"+
    "\5\0\1\104\2\0\4\104\12\0\1\104\1\315\11\104"+
    "\1\316\12\104\13\0\23\104\5\0\1\104\2\0\4\104"+
    "\12\0\5\104\1\317\4\104\1\320\13\104\13\0\23\104"+
    "\5\0\1\104\2\0\4\104\12\0\13\104\1\321\12\104"+
    "\13\0\23\104\2\0\1\12\14\0\1\12\162\0\1\322"+
    "\20\0\1\322\27\0\1\323\7\0\1\323\27\0\1\323"+
    "\3\0\1\323\45\0\1\324\1\325\1\0\1\326\1\327"+
    "\2\0\1\330\5\0\1\331\1\332\4\0\1\333\14\0"+
    "\1\324\1\0\1\326\1\325\1\0\1\331\1\0\1\330"+
    "\2\0\1\333\2\0\1\332\1\327\33\0\1\334\11\0"+
    "\1\335\25\0\1\334\10\0\1\335\40\0\1\336\37\0"+
    "\1\336\51\0\1\337\1\340\1\0\1\341\1\342\2\0"+
    "\1\343\2\0\1\344\2\0\1\345\5\0\1\346\14\0"+
    "\1\337\1\0\1\341\1\340\1\0\1\345\1\0\1\343"+
    "\1\0\1\344\1\346\3\0\1\342\33\0\1\347\1\0"+
    "\1\350\5\0\1\351\27\0\1\347\3\0\1\351\1\0"+
    "\1\350\61\0\1\352\36\0\1\352\41\0\1\353\45\0"+
    "\1\353\7\0\112\141\10\0\3\354\13\0\2\354\4\0"+
    "\1\354\1\0\1\354\4\0\1\354\2\0\1\354\20\0"+
    "\1\354\6\0\1\354\3\0\1\354\11\0\1\13\107\0"+
    "\112\150\23\355\1\0\66\355\25\0\1\356\114\0\1\357"+
    "\110\0\1\360\125\0\1\361\102\0\1\362\115\0\1\363"+
    "\116\0\1\364\75\0\1\365\17\0\1\366\74\0\1\170"+
    "\1\0\1\367\112\0\1\370\113\0\1\371\114\0\1\166"+
    "\76\0\1\166\20\0\1\166\107\0\1\166\74\0\1\166"+
    "\110\0\1\372\54\0\1\166\47\0\1\166\116\0\1\373"+
    "\106\0\1\166\151\0\1\374\53\0\1\375\113\0\1\376"+
    "\70\0\1\377\1\0\1\u0100\2\0\1\u0101\5\0\1\u0102"+
    "\4\0\1\u0103\70\0\1\166\17\0\1\166\72\0\1\372"+
    "\122\0\1\u0104\117\0\1\u0105\103\0\1\u0106\112\0\1\170"+
    "\104\0\1\u0107\104\0\1\u0108\16\0\1\u0109\1\u010a\66\0"+
    "\1\u010b\1\0\1\166\4\0\1\166\6\0\1\166\3\0"+
    "\1\166\35\0\1\166\31\0\1\u010c\15\0\1\u010d\100\0"+
    "\1\u010e\13\0\1\u010f\74\0\1\u0110\127\0\1\u0111\105\0"+
    "\1\u0112\103\0\1\u0113\111\0\1\u0114\115\0\1\u0115\101\0"+
    "\1\166\12\0\1\u0116\102\0\1\u0117\111\0\1\u0118\4\0"+
    "\1\u0119\111\0\1\166\1\u011a\100\0\1\u011b\4\0\1\u011c"+
    "\103\0\1\u011d\123\0\1\u011e\73\0\1\u011f\126\0\1\u0120"+
    "\1\u011a\3\0\1\u0121\71\0\1\u0122\112\0\1\u0123\11\0"+
    "\1\u0124\100\0\1\u0125\110\0\1\u0126\120\0\1\u0127\103\0"+
    "\1\u0128\127\0\1\u0129\105\0\1\u012a\107\0\1\166\102\0"+
    "\1\u012b\117\0\1\u012c\44\0\1\u012d\33\0\1\u012e\107\0"+
    "\1\u012f\1\0\1\u0130\111\0\1\u0131\62\0\1\76\14\0"+
    "\1\76\77\0\1\266\2\0\4\266\12\0\26\266\13\0"+
    "\23\266\5\0\1\104\2\0\4\104\12\0\23\104\1\u0132"+
    "\2\104\13\0\23\104\5\0\1\104\2\0\4\104\12\0"+
    "\11\104\1\u0133\14\104\13\0\23\104\5\0\1\104\2\0"+
    "\4\104\12\0\13\104\1\u0134\12\104\13\0\23\104\5\0"+
    "\1\104\2\0\4\104\12\0\26\104\13\0\20\104\1\u0135"+
    "\2\104\5\0\1\104\2\0\4\104\12\0\23\104\1\u0136"+
    "\2\104\13\0\23\104\5\0\1\104\2\0\4\104\12\0"+
    "\25\104\1\u0137\13\0\23\104\5\0\1\104\2\0\4\104"+
    "\12\0\4\104\1\u0138\1\104\1\u0139\10\104\1\u013a\4\104"+
    "\1\u013b\1\104\13\0\23\104\5\0\1\104\2\0\4\104"+
    "\12\0\15\104\1\u013c\10\104\13\0\23\104\5\0\1\104"+
    "\2\0\4\104\12\0\4\104\1\u013d\16\104\1\u013e\1\u013f"+
    "\1\104\13\0\23\104\5\0\1\104\2\0\4\104\12\0"+
    "\1\104\1\u0140\24\104\13\0\23\104\5\0\1\104\2\0"+
    "\4\104\12\0\1\104\1\u0141\15\104\1\u0142\6\104\13\0"+
    "\23\104\5\0\1\104\2\0\4\104\12\0\6\104\1\u0143"+
    "\17\104\13\0\23\104\5\0\1\104\2\0\4\104\12\0"+
    "\11\104\1\u0144\14\104\13\0\23\104\5\0\1\104\2\0"+
    "\4\104\12\0\15\104\1\u0145\10\104\13\0\23\104\5\0"+
    "\1\104\2\0\4\104\12\0\11\104\1\u0146\4\104\1\u0147"+
    "\7\104\13\0\23\104\5\0\1\104\2\0\4\104\12\0"+
    "\6\104\1\u0148\4\104\1\u0149\12\104\13\0\23\104\5\0"+
    "\1\104\2\0\4\104\12\0\5\104\1\u014a\20\104\13\0"+
    "\23\104\5\0\1\104\2\0\4\104\12\0\17\104\1\u014b"+
    "\6\104\13\0\23\104\5\0\1\104\2\0\4\104\12\0"+
    "\16\104\1\u014c\7\104\13\0\23\104\5\0\1\104\2\0"+
    "\4\104\12\0\5\104\1\u014d\20\104\13\0\23\104\5\0"+
    "\1\104\2\0\4\104\12\0\23\104\1\u014e\2\104\13\0"+
    "\23\104\5\0\1\104\2\0\4\104\12\0\17\104\1\u014f"+
    "\6\104\13\0\23\104\5\0\1\104\2\0\4\104\12\0"+
    "\6\104\1\u0150\17\104\13\0\23\104\5\0\1\104\2\0"+
    "\4\104\12\0\26\104\13\0\20\104\1\u0151\2\104\5\0"+
    "\1\104\2\0\4\104\12\0\3\104\1\u0152\22\104\13\0"+
    "\23\104\5\0\1\104\2\0\4\104\12\0\1\104\1\u0153"+
    "\24\104\13\0\23\104\5\0\1\104\2\0\4\104\12\0"+
    "\3\104\1\u0154\22\104\13\0\23\104\70\0\1\u0155\20\0"+
    "\1\u0155\30\0\1\u0156\6\0\1\u0157\32\0\1\u0156\1\u0157"+
    "\45\0\1\u0158\11\0\1\u0159\25\0\1\u0158\10\0\1\u0159"+
    "\40\0\1\u015a\37\0\1\u015a\63\0\1\u015b\36\0\1\u015b"+
    "\40\0\1\u015c\1\0\1\u015d\5\0\1\u015e\27\0\1\u015c"+
    "\3\0\1\u015e\1\0\1\u015d\46\0\1\u015f\36\0\1\u015f"+
    "\54\0\1\u0160\45\0\1\u0160\46\0\1\u0161\33\0\1\u0161"+
    "\67\0\1\u0162\34\0\1\u0162\73\0\1\u0163\20\0\1\u0163"+
    "\27\0\1\u0164\7\0\1\u0165\27\0\1\u0164\3\0\1\u0165"+
    "\45\0\1\u0166\11\0\1\u0167\25\0\1\u0166\10\0\1\u0167"+
    "\40\0\1\u0168\37\0\1\u0168\63\0\1\u0169\36\0\1\u0169"+
    "\43\0\1\u016a\36\0\1\u016a\47\0\1\u016b\1\0\1\u016c"+
    "\5\0\1\u016d\27\0\1\u016b\3\0\1\u016d\1\0\1\u016c"+
    "\50\0\1\u016e\45\0\1\u016e\44\0\1\u016f\41\0\1\u016f"+
    "\51\0\1\u0170\33\0\1\u0170\16\0\23\355\1\u0171\66\355"+
    "\31\0\1\u0172\114\0\1\u0173\122\0\1\u0111\105\0\1\166"+
    "\77\0\1\u0174\121\0\1\u0175\113\0\1\u0176\115\0\1\u011a"+
    "\50\0\1\u0177\147\0\1\u0178\120\0\1\166\71\0\1\166"+
    "\121\0\1\u0179\111\0\1\u017a\54\0\1\u017b\141\0\1\u017c"+
    "\120\0\1\u017d\110\0\1\u017e\106\0\1\u017f\1\0\1\u0180"+
    "\1\u0181\110\0\1\u0182\101\0\1\173\114\0\1\166\61\0"+
    "\1\u0183\143\0\1\u0184\112\0\1\u0185\47\0\1\u0186\52\0"+
    "\1\u0187\112\0\1\u0188\74\0\1\u0189\61\0\1\u018a\144\0"+
    "\1\u018b\110\0\1\u018c\12\0\1\u018d\101\0\1\u018e\77\0"+
    "\1\166\121\0\1\u018f\56\0\1\u0190\136\0\1\u0191\114\0"+
    "\1\u0192\123\0\1\166\77\0\1\u0193\61\0\1\u0194\134\0"+
    "\1\u0195\171\0\1\166\35\0\1\u0196\127\0\1\u0197\77\0"+
    "\1\u010c\123\0\1\u0198\67\0\1\372\113\0\1\u010d\117\0"+
    "\1\u0199\106\0\1\u019a\114\0\1\u019b\101\0\1\u019c\22\0"+
    "\1\u019d\75\0\1\u019e\111\0\1\u019f\107\0\1\u01a0\61\0"+
    "\1\u01a1\36\0\1\166\106\0\1\u0129\116\0\1\u01a2\76\0"+
    "\1\u01a3\106\0\1\u0187\121\0\1\u01a4\105\0\1\u01a5\122\0"+
    "\1\u01a6\77\0\1\u018b\64\0\1\104\2\0\4\104\12\0"+
    "\13\104\1\u01a7\12\104\13\0\23\104\4\0\1\u0177\1\104"+
    "\2\0\4\104\12\0\26\104\13\0\23\104\5\0\1\104"+
    "\2\0\4\104\12\0\14\104\1\u01a8\11\104\13\0\23\104"+
    "\5\0\1\104\2\0\4\104\12\0\13\104\1\u01a9\12\104"+
    "\13\0\23\104\5\0\1\104\2\0\4\104\12\0\13\104"+
    "\1\u01aa\12\104\13\0\23\104\4\0\1\u017b\1\104\2\0"+
    "\4\104\12\0\26\104\13\0\23\104\5\0\1\104\2\0"+
    "\4\104\12\0\6\104\1\u01ab\17\104\13\0\23\104\5\0"+
    "\1\104\2\0\4\104\12\0\15\104\1\u01ac\10\104\13\0"+
    "\23\104\5\0\1\104\2\0\4\104\12\0\11\104\1\u01ad"+
    "\1\104\1\u01ae\1\u01af\11\104\13\0\23\104\5\0\1\104"+
    "\2\0\4\104\12\0\13\104\1\u01b0\12\104\13\0\23\104"+
    "\4\0\1\u0183\1\104\2\0\4\104\12\0\26\104\13\0"+
    "\23\104\5\0\1\104\2\0\4\104\12\0\26\104\13\0"+
    "\20\104\1\u01b1\2\104\5\0\1\104\2\0\4\104\12\0"+
    "\22\104\1\u01b2\3\104\13\0\23\104\5\0\1\104\2\0"+
    "\4\104\12\0\23\104\1\u01b3\2\104\13\0\23\104\5\0"+
    "\1\104\2\0\4\104\12\0\6\104\1\u01b4\17\104\13\0"+
    "\23\104\4\0\1\u018a\1\104\2\0\4\104\12\0\26\104"+
    "\13\0\23\104\5\0\1\104\2\0\4\104\12\0\11\104"+
    "\1\u01b5\14\104\13\0\23\104\5\0\1\104\2\0\4\104"+
    "\12\0\10\104\1\u01b6\15\104\13\0\23\104\4\0\1\u0190"+
    "\1\104\2\0\4\104\12\0\26\104\13\0\23\104\5\0"+
    "\1\104\2\0\4\104\12\0\6\104\1\u01b7\17\104\13\0"+
    "\23\104\4\0\1\u0194\1\104\2\0\4\104\12\0\26\104"+
    "\13\0\23\104\5\0\1\104\2\0\4\104\12\0\1\104"+
    "\1\u01b8\24\104\13\0\23\104\5\0\1\104\2\0\4\104"+
    "\12\0\5\104\1\u01b9\20\104\13\0\23\104\5\0\1\104"+
    "\2\0\4\104\12\0\23\104\1\u01ba\2\104\13\0\23\104"+
    "\5\0\1\104\2\0\4\104\12\0\11\104\1\u0141\14\104"+
    "\13\0\23\104\5\0\1\104\2\0\4\104\12\0\23\104"+
    "\1\u01bb\2\104\13\0\23\104\5\0\1\104\2\0\4\104"+
    "\12\0\3\104\1\u0142\22\104\13\0\23\104\5\0\1\104"+
    "\2\0\4\104\12\0\1\104\1\u01bc\22\104\1\u01bd\1\104"+
    "\13\0\23\104\4\0\1\u01a1\1\104\2\0\4\104\12\0"+
    "\26\104\13\0\23\104\5\0\1\104\2\0\4\104\12\0"+
    "\12\104\1\u014e\13\104\13\0\23\104\5\0\1\104\2\0"+
    "\4\104\12\0\17\104\1\u01be\6\104\13\0\23\104\5\0"+
    "\1\104\2\0\4\104\12\0\1\104\1\u01b2\24\104\13\0"+
    "\23\104\5\0\1\104\2\0\4\104\12\0\11\104\1\u01bf"+
    "\14\104\13\0\23\104\5\0\1\104\2\0\4\104\12\0"+
    "\5\104\1\u01c0\20\104\13\0\23\104\5\0\1\104\2\0"+
    "\4\104\12\0\4\104\1\u01b5\21\104\13\0\23\104\37\0"+
    "\1\u01c1\33\0\1\u01c1\67\0\1\u01c2\34\0\1\u01c2\35\0"+
    "\1\u01c3\36\0\1\u01c3\55\0\1\u01c4\41\0\1\u01c4\53\0"+
    "\1\u01c5\36\0\1\u01c5\50\0\1\u01c6\33\0\1\u01c6\54\0"+
    "\1\u01c7\5\0\1\u01c8\5\0\1\u01c9\21\0\1\u01c8\1\0"+
    "\1\u01c7\2\0\1\u01c9\54\0\1\u01ca\27\0\1\u01ca\54\0"+
    "\1\u01cb\33\0\1\u01cb\67\0\1\u01cc\34\0\1\u01cc\35\0"+
    "\1\u01cd\36\0\1\u01cd\57\0\1\u01ce\33\0\1\u01ce\53\0"+
    "\1\u01cf\41\0\1\u01cf\51\0\1\u01d0\33\0\1\u01d0\45\0"+
    "\1\u01d1\37\0\1\u01d1\60\0\1\u01d2\37\0\1\u01d2\13\0"+
    "\22\355\1\u01d3\1\u01d4\66\355\32\0\1\u01d5\114\0\1\u01d6"+
    "\105\0\1\u01d7\113\0\1\u01d8\105\0\1\u01d9\1\0\1\u01da"+
    "\2\0\1\u01db\1\0\1\u01dc\1\u01dd\1\u01de\1\0\1\u01df"+
    "\1\u01e0\1\u01e1\1\u01e2\3\0\1\u01e3\1\u01e4\1\u01e5\33\0"+
    "\1\u01e6\53\0\1\u010c\75\0\1\u01e7\107\0\1\u01e8\107\0"+
    "\1\u01da\2\0\1\u01e9\2\0\1\u01ea\1\0\1\u01eb\3\0"+
    "\1\u01e2\3\0\1\u01ec\35\0\1\u01e6\54\0\1\u01ed\43\0"+
    "\1\u01ee\140\0\1\u01ef\112\0\1\u01f0\121\0\1\u01f1\117\0"+
    "\1\u01f2\146\0\1\u01f3\40\0\1\u01f4\1\0\1\u01f5\10\0"+
    "\1\u01f6\1\u01e4\77\0\1\u01f7\102\0\1\u01f8\107\0\1\u01f9"+
    "\66\0\1\u01fa\141\0\1\u01fb\110\0\1\u01fc\117\0\1\u01eb"+
    "\54\0\1\u01fd\134\0\1\u01fe\135\0\1\u01ff\77\0\1\u0200"+
    "\102\0\1\u0201\5\0\1\u0202\2\0\1\u0203\1\0\1\u0204"+
    "\1\u0205\2\0\1\u0206\104\0\1\u0207\104\0\1\u0208\101\0"+
    "\1\u0209\1\0\1\u01da\2\0\1\u01db\1\0\1\u01f4\1\u01dd"+
    "\3\0\1\u01e0\1\u01e1\1\u01e2\3\0\1\u020a\35\0\1\u01e6"+
    "\40\0\1\u020b\112\0\1\u020c\56\0\1\u020d\134\0\1\u020e"+
    "\120\0\1\u020f\117\0\1\u0210\74\0\1\u0211\116\0\1\u0212"+
    "\111\0\1\u0213\114\0\1\u0214\101\0\1\u0215\134\0\1\u0216"+
    "\103\0\1\u01e1\107\0\1\u0217\106\0\1\166\101\0\1\u0218"+
    "\111\0\1\u010c\111\0\1\u0219\67\0\1\104\2\0\4\104"+
    "\12\0\5\104\1\u021a\20\104\13\0\23\104\5\0\1\104"+
    "\2\0\4\104\12\0\23\104\1\u0141\2\104\13\0\23\104"+
    "\5\0\1\104\2\0\4\104\12\0\7\104\1\u021b\16\104"+
    "\13\0\23\104\5\0\1\104\2\0\4\104\12\0\5\104"+
    "\1\u021c\20\104\13\0\23\104\5\0\1\104\2\0\4\104"+
    "\12\0\24\104\1\u0151\1\104\13\0\23\104\4\0\1\u01ee"+
    "\1\104\2\0\4\104\12\0\26\104\13\0\23\104\5\0"+
    "\1\104\2\0\4\104\12\0\6\104\1\u021d\17\104\13\0"+
    "\23\104\5\0\1\104\2\0\4\104\12\0\16\104\1\u021e"+
    "\7\104\13\0\23\104\5\0\1\104\2\0\4\104\12\0"+
    "\24\104\1\u021f\1\104\13\0\23\104\5\0\1\104\2\0"+
    "\4\104\12\0\26\104\13\0\20\104\1\u0220\2\104\5\0"+
    "\1\104\2\0\4\104\12\0\1\104\1\u0221\24\104\13\0"+
    "\23\104\4\0\1\u01fa\1\104\2\0\4\104\12\0\26\104"+
    "\13\0\23\104\5\0\1\104\2\0\4\104\12\0\6\104"+
    "\1\u0153\17\104\13\0\23\104\5\0\1\104\2\0\4\104"+
    "\12\0\5\104\1\u0222\20\104\13\0\23\104\4\0\1\u01fd"+
    "\1\104\2\0\4\104\12\0\26\104\13\0\23\104\5\0"+
    "\1\104\2\0\4\104\12\0\1\104\1\u0223\24\104\13\0"+
    "\23\104\5\0\1\104\2\0\4\104\12\0\11\104\1\u0224"+
    "\14\104\13\0\23\104\5\0\1\104\2\0\4\104\12\0"+
    "\10\104\1\u0225\15\104\13\0\23\104\5\0\1\104\2\0"+
    "\4\104\12\0\11\104\1\u0226\14\104\13\0\23\104\4\0"+
    "\1\u020d\1\104\2\0\4\104\12\0\26\104\13\0\23\104"+
    "\5\0\1\104\2\0\4\104\12\0\1\104\1\u0227\24\104"+
    "\13\0\23\104\5\0\1\104\2\0\4\104\12\0\6\104"+
    "\1\u0228\17\104\13\0\23\104\5\0\1\104\2\0\4\104"+
    "\12\0\6\104\1\u0229\17\104\13\0\23\104\5\0\1\104"+
    "\2\0\4\104\12\0\14\104\1\u022a\11\104\13\0\23\104"+
    "\5\0\1\104\2\0\4\104\12\0\1\104\1\u022b\24\104"+
    "\13\0\23\104\5\0\1\104\2\0\4\104\12\0\1\104"+
    "\1\u0141\24\104\13\0\23\104\36\0\1\u022c\5\0\1\u022d"+
    "\5\0\1\u022e\21\0\1\u022d\1\0\1\u022c\2\0\1\u022e"+
    "\54\0\1\u022f\27\0\1\u022f\54\0\1\u0230\33\0\1\u0230"+
    "\45\0\1\u0231\37\0\1\u0231\61\0\1\u0232\33\0\1\u0232"+
    "\54\0\1\u0233\37\0\1\u0233\54\0\1\u0234\36\0\1\u0234"+
    "\42\0\1\u0235\43\0\1\u0235\50\0\1\u0236\45\0\1\u0236"+
    "\43\0\1\u0237\45\0\1\u0237\45\0\1\u0238\5\0\1\u0239"+
    "\5\0\1\u023a\21\0\1\u0239\1\0\1\u0238\2\0\1\u023a"+
    "\54\0\1\u023b\27\0\1\u023b\54\0\1\u023c\33\0\1\u023c"+
    "\52\0\1\u023d\45\0\1\u023d\36\0\1\u023e\37\0\1\u023e"+
    "\60\0\1\u023f\37\0\1\u023f\53\0\1\u0240\42\0\1\u0240"+
    "\54\0\1\u0241\102\0\1\u0242\121\0\1\u0243\37\0\1\u0244"+
    "\41\0\1\u0245\110\0\1\u0246\3\0\1\u0247\1\0\1\u0248"+
    "\100\0\1\u0249\4\0\1\u024a\1\u024b\1\u024c\102\0\1\u024d"+
    "\105\0\1\u024e\1\0\1\u024f\7\0\1\u0250\101\0\1\u0251"+
    "\1\u0252\113\0\1\u0253\116\0\1\u0254\77\0\1\u0255\115\0"+
    "\1\u0256\11\0\1\u0257\1\u0258\72\0\1\u0259\134\0\1\u025a"+
    "\73\0\1\u025b\104\0\1\u025c\121\0\1\u025d\116\0\1\u0248"+
    "\76\0\1\u025e\106\0\1\u025f\130\0\1\u0260\73\0\1\u0261"+
    "\122\0\1\u0202\103\0\1\u0262\112\0\1\u0263\165\0\1\u0264"+
    "\31\0\1\u0265\111\0\1\u0266\123\0\1\u0267\101\0\1\u024f"+
    "\125\0\1\u0268\76\0\1\u0269\112\0\1\u026a\107\0\1\u01da"+
    "\113\0\1\u026b\62\0\1\u026c\156\0\1\u026d\44\0\1\u026e"+
    "\140\0\1\172\120\0\1\u026f\110\0\1\u0250\77\0\1\u0270"+
    "\121\0\1\u0271\103\0\1\u0272\113\0\1\u0273\105\0\1\u0274"+
    "\131\0\1\u0243\107\0\1\u0275\103\0\1\u0276\56\0\1\u0277"+
    "\144\0\1\u0278\5\0\1\u01e2\3\0\1\u0279\72\0\1\u027a"+
    "\117\0\1\u027b\115\0\1\u027c\100\0\1\u027d\114\0\1\u027e"+
    "\112\0\1\u027f\103\0\1\u0280\125\0\1\u0281\77\0\1\u0282"+
    "\62\0\1\u0283\112\0\1\104\2\0\4\104\12\0\11\104"+
    "\1\u0284\14\104\13\0\23\104\5\0\1\104\2\0\4\104"+
    "\12\0\1\104\1\u0285\24\104\13\0\23\104\5\0\1\104"+
    "\2\0\4\104\12\0\11\104\1\u0286\14\104\13\0\23\104"+
    "\5\0\1\104\2\0\4\104\12\0\5\104\1\u0287\20\104"+
    "\13\0\23\104\5\0\1\104\2\0\4\104\12\0\26\104"+
    "\13\0\20\104\1\u0288\2\104\5\0\1\104\2\0\4\104"+
    "\12\0\1\104\1\u0289\24\104\13\0\23\104\5\0\1\104"+
    "\2\0\4\104\12\0\1\104\1\u028a\24\104\13\0\23\104"+
    "\5\0\1\104\2\0\4\104\12\0\5\104\1\u028b\20\104"+
    "\13\0\23\104\4\0\1\u026c\1\104\2\0\4\104\12\0"+
    "\26\104\13\0\23\104\4\0\1\u026e\1\104\2\0\4\104"+
    "\12\0\26\104\13\0\23\104\5\0\1\104\2\0\4\104"+
    "\12\0\1\104\1\u028c\24\104\13\0\23\104\5\0\1\104"+
    "\2\0\4\104\12\0\11\104\1\u028d\14\104\13\0\23\104"+
    "\4\0\1\u0277\1\104\2\0\4\104\12\0\26\104\13\0"+
    "\23\104\5\0\1\104\2\0\4\104\12\0\4\104\1\u028e"+
    "\21\104\13\0\23\104\5\0\1\104\2\0\4\104\12\0"+
    "\10\104\1\u028f\15\104\13\0\23\104\5\0\1\104\2\0"+
    "\4\104\12\0\11\104\1\u0290\14\104\13\0\23\104\5\0"+
    "\1\104\2\0\4\104\12\0\5\104\1\u0291\20\104\13\0"+
    "\23\104\4\0\1\u0283\1\104\2\0\4\104\12\0\26\104"+
    "\13\0\23\104\41\0\1\u0292\36\0\1\u0292\42\0\1\u0293"+
    "\43\0\1\u0293\50\0\1\u0294\45\0\1\u0294\43\0\1\u0295"+
    "\45\0\1\u0295\43\0\1\u0296\45\0\1\u0296\47\0\1\u0297"+
    "\42\0\1\u0297\40\0\1\u0298\36\0\1\u0298\55\0\1\u0299"+
    "\41\0\1\u0299\51\0\1\u029a\33\0\1\u029a\54\0\1\u029b"+
    "\37\0\1\u029b\54\0\1\u029c\36\0\1\u029c\42\0\1\u029d"+
    "\43\0\1\u029d\50\0\1\u029e\45\0\1\u029e\43\0\1\u029f"+
    "\45\0\1\u029f\43\0\1\u02a0\45\0\1\u02a0\40\0\1\u02a1"+
    "\43\0\1\u02a1\54\0\1\u02a2\42\0\1\u02a2\12\0\1\u02a3"+
    "\134\0\1\u02a4\111\0\1\u02a5\111\0\1\u02a6\126\0\1\u02a7"+
    "\104\0\1\u02a8\103\0\1\u02a9\107\0\1\u02aa\113\0\1\u02ab"+
    "\112\0\1\u02ac\17\0\1\u02ad\103\0\1\u02ae\101\0\1\u02af"+
    "\121\0\1\u02b0\112\0\1\u02b1\111\0\1\u02b2\102\0\1\u02b3"+
    "\104\0\1\u02b4\117\0\1\u02b5\110\0\1\u02b6\106\0\1\u02b7"+
    "\117\0\1\u02b8\113\0\1\u02b9\1\0\1\u02ba\3\0\1\u02bb"+
    "\107\0\1\u02bc\114\0\1\u02bd\70\0\1\u018a\113\0\1\u02be"+
    "\62\0\1\u02bf\111\0\1\u02c0\157\0\1\u02c1\147\0\1\u02c2"+
    "\44\0\1\u02b9\105\0\1\u0265\101\0\1\u018b\66\0\1\u02c3"+
    "\111\0\1\u02c4\137\0\1\u02ac\124\0\1\u02ba\106\0\1\u02c5"+
    "\106\0\1\u02c6\101\0\1\u02c7\113\0\1\u01da\4\0\1\u01f4"+
    "\50\0\1\u01e6\36\0\1\u02c8\113\0\1\u02c9\117\0\1\u0246"+
    "\113\0\1\u02ca\76\0\1\u02cb\122\0\1\u02b5\76\0\1\u02cc"+
    "\64\0\1\u02cd\150\0\1\u02ce\52\0\1\u02cf\144\0\1\u0278"+
    "\5\0\1\u02d0\77\0\1\u02d1\111\0\1\u0256\121\0\1\u0265"+
    "\116\0\1\u02d2\101\0\1\u010c\55\0\1\u02d3\146\0\1\u02d4"+
    "\115\0\1\u02d5\73\0\1\u02d6\111\0\1\u02d7\10\0\1\u0202"+
    "\1\u02d8\1\0\1\u02ce\5\0\1\u02d9\1\0\1\u02da\33\0"+
    "\1\u02db\6\0\1\u02a3\1\104\2\0\4\104\12\0\26\104"+
    "\13\0\23\104\4\0\1\u02bf\1\104\2\0\4\104\12\0"+
    "\26\104\13\0\23\104\4\0\1\u02c0\1\104\2\0\4\104"+
    "\12\0\26\104\13\0\23\104\5\0\1\104\2\0\4\104"+
    "\12\0\11\104\1\u0289\14\104\13\0\23\104\5\0\1\104"+
    "\2\0\4\104\12\0\1\104\1\u01b5\24\104\13\0\23\104"+
    "\4\0\1\u02c3\1\104\2\0\4\104\12\0\26\104\13\0"+
    "\23\104\4\0\1\u02c4\1\104\2\0\4\104\12\0\26\104"+
    "\13\0\23\104\5\0\1\104\2\0\4\104\12\0\11\104"+
    "\1\u02dc\14\104\13\0\23\104\4\0\1\u02cd\1\104\2\0"+
    "\4\104\12\0\26\104\13\0\23\104\4\0\1\u02cf\1\104"+
    "\2\0\4\104\12\0\26\104\13\0\23\104\5\0\1\104"+
    "\2\0\4\104\12\0\15\104\1\u0289\10\104\13\0\23\104"+
    "\5\0\1\104\2\0\4\104\12\0\12\104\1\u0141\13\104"+
    "\13\0\23\104\4\0\1\u02d3\1\104\2\0\4\104\12\0"+
    "\26\104\13\0\23\104\5\0\1\104\2\0\4\104\12\0"+
    "\1\104\1\u02dd\24\104\13\0\23\104\32\0\1\u02de\36\0"+
    "\1\u02de\55\0\1\u02df\41\0\1\u02df\51\0\1\u02e0\33\0"+
    "\1\u02e0\54\0\1\u02e1\37\0\1\u02e1\44\0\1\u02e2\43\0"+
    "\1\u02e2\53\0\1\u02e3\33\0\1\u02e3\45\0\1\u02e4\37\0"+
    "\1\u02e4\60\0\1\u02e5\37\0\1\u02e5\42\0\1\u02e6\37\0"+
    "\1\u02e6\54\0\1\u02e7\36\0\1\u02e7\55\0\1\u02e8\41\0"+
    "\1\u02e8\51\0\1\u02e9\33\0\1\u02e9\54\0\1\u02ea\37\0"+
    "\1\u02ea\44\0\1\u02eb\43\0\1\u02eb\46\0\1\u02ec\36\0"+
    "\1\u02ec\54\0\1\u01e9\1\0\1\u02ed\111\0\1\u02ee\105\0"+
    "\1\u02ef\131\0\1\u02f0\77\0\1\u02f1\105\0\1\u02f2\120\0"+
    "\1\u02f3\112\0\1\u02f4\104\0\1\u02f5\124\0\1\u02f6\76\0"+
    "\1\u02f7\110\0\1\u02f8\124\0\1\u02a7\77\0\1\u02f9\111\0"+
    "\1\u02a7\114\0\1\u024c\160\0\1\u02fa\27\0\1\u02a7\116\0"+
    "\1\u02fb\164\0\1\u02fc\40\0\1\u02fd\106\0\1\u02fe\110\0"+
    "\1\u02ff\112\0\1\u0300\114\0\1\u0301\101\0\1\u0302\114\0"+
    "\1\u0303\107\0\1\u0304\1\0\1\u0305\6\0\1\u01f5\105\0"+
    "\1\u01e9\1\0\1\u0306\102\0\1\u0307\111\0\1\u0308\127\0"+
    "\1\u01e2\75\0\1\u01da\17\0\1\u0309\35\0\1\u01e6\31\0"+
    "\1\u030a\66\0\1\u01fd\32\0\1\u030b\6\0\1\u030c\102\0"+
    "\1\u030d\113\0\1\u030e\104\0\1\u030f\106\0\1\u0310\112\0"+
    "\1\u0311\116\0\1\u0312\6\0\1\u0313\72\0\1\u0314\123\0"+
    "\1\u01eb\3\0\1\u0204\73\0\1\u0255\14\0\1\u0315\101\0"+
    "\1\u0316\113\0\1\u0317\1\u0303\4\0\1\u0318\6\0\1\u0319"+
    "\70\0\1\u031a\63\0\1\u031b\140\0\1\u031c\120\0\1\u031d"+
    "\102\0\1\u031e\112\0\1\u031f\104\0\1\u0320\66\0\1\u01fd"+
    "\1\104\2\0\4\104\12\0\11\104\1\u0321\6\104\1\u0322"+
    "\5\104\13\0\23\104\4\0\1\u031b\1\104\2\0\4\104"+
    "\12\0\26\104\13\0\23\104\37\0\1\u0323\33\0\1\u0323"+
    "\45\0\1\u0324\37\0\1\u0324\60\0\1\u0325\37\0\1\u0325"+
    "\42\0\1\u0326\37\0\1\u0326\54\0\1\u0327\36\0\1\u0327"+
    "\54\0\1\u0328\45\0\1\u0328\47\0\1\u0329\42\0\1\u0329"+
    "\45\0\1\u032a\33\0\1\u032a\45\0\1\u032b\37\0\1\u032b"+
    "\60\0\1\u032c\37\0\1\u032c\42\0\1\u032d\37\0\1\u032d"+
    "\54\0\1\u032e\36\0\1\u032e\65\0\1\u032f\36\0\1\u032f"+
    "\46\0\1\u0330\2\0\1\u0331\1\u0332\106\0\1\u0333\106\0"+
    "\1\u0334\123\0\1\u0335\67\0\1\u0336\127\0\1\u02a7\73\0"+
    "\1\u0337\125\0\1\u0338\75\0\1\u0339\116\0\1\u033a\117\0"+
    "\1\u033b\76\0\1\u033c\123\0\1\u033d\112\0\1\u02b5\106\0"+
    "\1\u033e\103\0\1\u033f\107\0\1\u0340\113\0\1\u0341\114\0"+
    "\1\u0342\116\0\1\u0343\77\0\1\u0344\111\0\1\u0345\116\0"+
    "\1\u0346\124\0\1\u0347\101\0\1\u0348\116\0\1\u0331\1\u0332"+
    "\111\0\1\u0349\102\0\1\u02b2\120\0\1\u034a\105\0\1\u034b"+
    "\103\0\1\u034c\116\0\1\u02a7\123\0\1\u02ad\101\0\1\u034d"+
    "\101\0\1\u034e\116\0\1\u0302\122\0\1\u034f\102\0\1\u0350"+
    "\76\0\1\u0351\112\0\1\u0352\114\0\1\u0353\121\0\1\u0354"+
    "\100\0\1\u0250\111\0\1\u0355\116\0\1\u02c9\2\0\1\u01eb"+
    "\103\0\1\u0356\115\0\1\u0357\113\0\1\u0358\103\0\1\u0359"+
    "\111\0\1\u035a\63\0\1\104\2\0\4\104\12\0\13\104"+
    "\1\u035b\12\104\13\0\23\104\5\0\1\104\2\0\4\104"+
    "\12\0\5\104\1\u035c\20\104\13\0\23\104\34\0\1\u035d"+
    "\45\0\1\u035d\47\0\1\u035e\42\0\1\u035e\53\0\1\u035f"+
    "\36\0\1\u035f\36\0\1\u0360\43\0\1\u0360\50\0\1\u0361"+
    "\45\0\1\u0361\47\0\1\u0362\42\0\1\u0362\53\0\1\u0363"+
    "\36\0\1\u0363\37\0\1\u0364\110\0\1\u0365\167\0\1\u02a7"+
    "\41\0\1\u0366\116\0\1\u0367\100\0\1\u0368\110\0\1\u0369"+
    "\111\0\1\u036a\110\0\1\u0305\112\0\1\u02b2\111\0\1\u036b"+
    "\112\0\1\u02b5\123\0\1\u036c\77\0\1\u036d\107\0\1\u036e"+
    "\116\0\1\u02b5\120\0\1\u02f2\153\0\1\u02b5\53\0\1\u036f"+
    "\147\0\1\u0370\35\0\1\u0371\111\0\1\u02a7\104\0\1\u0272"+
    "\134\0\1\u0372\67\0\1\u0373\133\0\1\u0374\103\0\1\u02b9"+
    "\1\0\1\u02ba\50\0\1\u0375\146\0\1\u0376\114\0\1\u02b2"+
    "\75\0\1\u02a7\132\0\1\u0377\73\0\1\u0378\120\0\1\u034e"+
    "\76\0\1\u02b0\127\0\1\u0379\111\0\1\u037a\107\0\1\u02b5"+
    "\107\0\1\u0345\121\0\1\u037b\70\0\1\u037c\113\0\1\u02cb"+
    "\105\0\1\u037d\67\0\1\u0375\1\104\2\0\4\104\12\0"+
    "\26\104\13\0\23\104\5\0\1\104\2\0\4\104\12\0"+
    "\13\104\1\u037e\12\104\13\0\23\104\31\0\1\u037f\43\0"+
    "\1\u037f\46\0\1\u0380\36\0\1\u0380\51\0\1\u0381\43\0"+
    "\1\u0381\61\0\1\u0382\113\0\1\u0383\73\0\1\u0384\121\0"+
    "\1\u034e\111\0\1\u0385\107\0\1\u0386\111\0\1\u0387\115\0"+
    "\1\u02a7\107\0\1\u0388\120\0\1\u02a7\102\0\1\u0389\101\0"+
    "\1\u0389\111\0\1\u038a\117\0\1\u038b\105\0\1\u038c\130\0"+
    "\1\u02a7\73\0\1\u0389\115\0\1\u038d\4\0\1\u038e\116\0"+
    "\1\u038f\66\0\1\u0390\134\0\1\u0391\75\0\1\u0392\112\0"+
    "\1\u0393\114\0\1\u02b2\102\0\1\u02fd\117\0\1\u0394\55\0"+
    "\1\104\2\0\4\104\12\0\24\104\1\u0395\1\104\13\0"+
    "\23\104\32\0\1\u0396\36\0\1\u0396\65\0\1\u0397\36\0"+
    "\1\u0397\37\0\1\u0398\36\0\1\u0398\61\0\1\u0272\122\0"+
    "\1\u0246\100\0\1\u0399\121\0\1\u039a\71\0\1\u039b\111\0"+
    "\1\u039c\122\0\1\u039d\101\0\1\u02a7\122\0\1\u0302\77\0"+
    "\1\u039e\107\0\1\u039f\121\0\1\u0383\101\0\1\u03a0\66\0"+
    "\1\u03a1\150\0\1\u03a2\102\0\1\u03a3\110\0\1\u03a4\117\0"+
    "\1\u0373\115\0\1\u02b5\50\0\1\u03a1\1\104\2\0\4\104"+
    "\12\0\26\104\13\0\23\104\45\0\1\u03a5\36\0\1\u03a5"+
    "\52\0\1\u03a6\36\0\1\u03a6\37\0\1\u03a7\106\0\1\u03a8"+
    "\120\0\1\u03a9\107\0\1\u0246\110\0\1\u033f\124\0\1\u03aa"+
    "\110\0\1\u03ab\102\0\1\u03ac\120\0\1\u038e\100\0\1\u03ad"+
    "\114\0\1\u0390\103\0\1\u03ae\131\0\1\u03af\73\0\1\u03b0"+
    "\117\0\1\u03b1\101\0\1\u03b2\125\0\1\u033e\106\0\1\u03b3"+
    "\106\0\1\u03b4\123\0\1\u02b2\101\0\1\u03b5\107\0\1\u036d"+
    "\115\0\1\u03b6\104\0\1\u01e0\106\0\1\u03b7\112\0\1\u02a7"+
    "\121\0\1\u03b8\74\0\1\u03b9\111\0\1\u03ba\113\0\1\u03bb"+
    "\125\0\1\u03bc\111\0\1\u0204\102\0\1\u036d\104\0\1\u03bd"+
    "\110\0\1\u03be\113\0\1\u03bf\113\0\1\u02ae\55\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[63196];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\10\1\0\2\11\1\1\1\11\1\1\1\11"+
    "\4\1\2\11\3\1\1\11\31\1\10\11\1\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\1\1\11\3\1\1\11"+
    "\21\1\13\0\1\11\2\0\2\11\1\1\2\0\1\11"+
    "\2\1\11\0\1\11\2\0\1\1\3\0\1\1\2\0"+
    "\1\1\1\11\4\0\1\1\1\0\2\1\6\0\1\1"+
    "\13\0\1\11\5\0\2\1\15\0\3\11\2\0\34\1"+
    "\2\11\6\0\1\1\1\0\1\11\12\0\1\11\1\0"+
    "\2\11\1\0\2\1\1\11\2\0\1\11\15\0\1\1"+
    "\7\0\1\1\4\0\1\1\2\0\1\11\10\0\1\1"+
    "\14\0\1\1\14\0\43\1\4\11\3\0\1\11\1\0"+
    "\1\11\4\0\4\11\4\0\1\11\1\0\1\11\3\0"+
    "\1\1\2\0\1\1\1\11\21\0\1\1\5\0\1\11"+
    "\5\0\1\11\23\0\32\1\20\0\1\11\1\0\1\11"+
    "\1\0\2\11\40\0\1\11\4\0\1\1\2\0\1\11"+
    "\7\0\1\11\16\0\1\11\1\0\1\1\1\11\22\1"+
    "\5\0\2\11\13\0\1\11\1\0\2\11\40\0\1\11"+
    "\23\0\1\1\4\0\1\11\1\0\1\11\6\0\16\1"+
    "\5\0\1\11\12\0\1\11\4\0\1\11\52\0\1\11"+
    "\2\0\1\11\6\0\2\1\6\0\1\11\1\0\1\11"+
    "\11\0\1\1\31\0\1\11\17\0\1\11\6\0\2\1"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\53\0\2\1\1\0\2\11"+
    "\2\0\2\11\32\0\1\1\26\0\1\1\1\0\1\11"+
    "\15\0\2\11\31\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[959];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Stack <IElementType> blockStack = new Stack<IElementType>();

  private int afterComment = YYINITIAL;

  private void clearStacks(){
    blockStack.clear();
  }

  private Stack<IElementType> braceCount = new Stack <IElementType>();



  _PowerShellLexer(java.io.Reader in) {
      this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _PowerShellLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1276) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 73: 
          { return EXIT;
          }
        case 114: break;
        case 71: 
          { return COCLT;
          }
        case 115: break;
        case 8: 
          { return IDENT;
          }
        case 116: break;
        case 58: 
          { return TRY;
          }
        case 117: break;
        case 2: 
          { return LPAREN;
          }
        case 118: break;
        case 46: 
          { return GE;
          }
        case 119: break;
        case 54: 
          { return COLT;
          }
        case 120: break;
        case 83: 
          { return WHILE;
          }
        case 121: break;
        case 10: 
          { return RCURLY;
          }
        case 122: break;
        case 88: 
          { return ELSEIF;
          }
        case 123: break;
        case 108: 
          { return COICONTAINS;
          }
        case 124: break;
        case 7: 
          { return NUMBER;
          }
        case 125: break;
        case 6: 
          { return COLON;
          }
        case 126: break;
        case 78: 
          { return BREAK;
          }
        case 127: break;
        case 45: 
          { return EQ;
          }
        case 128: break;
        case 106: 
          { return COCONTAINS;
          }
        case 129: break;
        case 57: 
          { return END;
          }
        case 130: break;
        case 68: 
          { return COCGT;
          }
        case 131: break;
        case 65: 
          { return COILT;
          }
        case 132: break;
        case 92: 
          { return COIMATCH;
          }
        case 133: break;
        case 32: 
          { yybegin(YYINITIAL); return EXPSTRING_END;
          }
        case 134: break;
        case 9: 
          { return LCURLY;
          }
        case 135: break;
        case 40: 
          { return ML_COMMENT;
          }
        case 136: break;
        case 89: 
          { return RETURN;
          }
        case 137: break;
        case 4: 
          { return WS;
          }
        case 138: break;
        case 91: 
          { return FILTER;
          }
        case 139: break;
        case 51: 
          { return COIS;
          }
        case 140: break;
        case 112: 
          { return COINOTCONTAINS;
          }
        case 141: break;
        case 109: 
          { return COCNOTMATCH;
          }
        case 142: break;
        case 93: 
          { return COCMATCH;
          }
        case 143: break;
        case 79: 
          { return CATCH;
          }
        case 144: break;
        case 25: 
          { return COMMA;
          }
        case 145: break;
        case 62: 
          { return COIGT;
          }
        case 146: break;
        case 13: 
          { return MULT;
          }
        case 147: break;
        case 75: 
          { return DATA;
          }
        case 148: break;
        case 21: 
          { return MOD;
          }
        case 149: break;
        case 96: 
          { return PROCESS;
          }
        case 150: break;
        case 76: 
          { return COLIKE;
          }
        case 151: break;
        case 12: 
          { return DIV;
          }
        case 152: break;
        case 69: 
          { return COCNE;
          }
        case 153: break;
        case 94: 
          { return CMDLET;
          }
        case 154: break;
        case 20: 
          { return PLUS;
          }
        case 155: break;
        case 11: 
          { yybegin(IN_SINGLE_EXPSTRING); return EXPSTRING_BEGIN;
          }
        case 156: break;
        case 52: 
          { return CONE;
          }
        case 157: break;
        case 36: 
          { return STRING_LITERAL;
          }
        case 158: break;
        case 70: 
          { return COCLE;
          }
        case 159: break;
        case 19: 
          { return LT;
          }
        case 160: break;
        case 90: 
          { return SWITCH;
          }
        case 161: break;
        case 38: 
          { return LASTTOKEN;
          }
        case 162: break;
        case 87: 
          { return COMATCH;
          }
        case 163: break;
        case 53: 
          { return COLE;
          }
        case 164: break;
        case 28: 
          { yypushback(1);
                                             yybegin(IN_SINGLE_EXPSTRING);
          }
        case 165: break;
        case 15: 
          { return DOT;
          }
        case 166: break;
        case 44: 
          { return DO;
          }
        case 167: break;
        case 42: 
          { return IN;
          }
        case 168: break;
        case 37: 
          { return DOLLAR;
          }
        case 169: break;
        case 26: 
          { return SEMI;
          }
        case 170: break;
        case 34: 
          { /*yybegin(IN_SINGLE_DOT);*/ return IDENT;
          }
        case 171: break;
        case 63: 
          { return COINE;
          }
        case 172: break;
        case 107: 
          { return COINOTMATCH;
          }
        case 173: break;
        case 55: 
          { return COAS;
          }
        case 174: break;
        case 82: 
          { return PARAM;
          }
        case 175: break;
        case 103: 
          { return CONOTMATCH;
          }
        case 176: break;
        case 97: 
          { return CONOTLIKE;
          }
        case 177: break;
        case 67: 
          { return COCGE;
          }
        case 178: break;
        case 64: 
          { return COILE;
          }
        case 179: break;
        case 31: 
          { yybegin(IN_SINGLE_EXPSTRING_DOLLAR);
                                             return DOLLAR;
          }
        case 180: break;
        case 14: 
          { return SL_COMMENT;
          }
        case 181: break;
        case 18: 
          { return GT;
          }
        case 182: break;
        case 24: 
          { return RBRACK;
          }
        case 183: break;
        case 33: 
          { yybegin(IN_SINGLE_DOT);
                                             return IDENT;
          }
        case 184: break;
        case 30: 
          { return EXPSTRING_CONTENT;
          }
        case 185: break;
        case 50: 
          { return COGE;
          }
        case 186: break;
        case 111: 
          { return CONOTCONTAINS;
          }
        case 187: break;
        case 99: 
          { return CONTINUE;
          }
        case 188: break;
        case 98: 
          { return COREPLACE;
          }
        case 189: break;
        case 39: 
          { return EXPSTRING_LITERAL;
          }
        case 190: break;
        case 101: 
          { return COINOTLIKE;
          }
        case 191: break;
        case 29: 
          { blockStack.push(LPAREN);
                                             yybegin(IN_INNER_BLOCK);
                                             return LCURLY;
          }
        case 192: break;
        case 66: 
          { return COCEQ;
          }
        case 193: break;
        case 17: 
          { return ASSIGN;
          }
        case 194: break;
        case 84: 
          { return COILIKE;
          }
        case 195: break;
        case 3: 
          { return NEWLINE;
          }
        case 196: break;
        case 23: 
          { return LBRACK;
          }
        case 197: break;
        case 56: 
          { return ELLIPSIS;
          }
        case 198: break;
        case 49: 
          { return COEQ;
          }
        case 199: break;
        case 61: 
          { return COIGE;
          }
        case 200: break;
        case 102: 
          { return COIREPLACE;
          }
        case 201: break;
        case 100: 
          { return FUNCTION;
          }
        case 202: break;
        case 48: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(IN_SINGLE_IDENT);
                                             return DOT;
          }
        case 203: break;
        case 80: 
          { return THROW;
          }
        case 204: break;
        case 72: 
          { return ELSE;
          }
        case 205: break;
        case 113: 
          { return COCNOTCONTAINS;
          }
        case 206: break;
        case 43: 
          { return IF;
          }
        case 207: break;
        case 95: 
          { return FINALLY;
          }
        case 208: break;
        case 81: 
          { return UNTIL;
          }
        case 209: break;
        case 35: 
          { if (!blockStack.isEmpty()) { IElementType br = blockStack.pop(); }
                                          yybegin(IN_SINGLE_EXPSTRING);
                                          return RCURLY;
          }
        case 210: break;
        case 60: 
          { return COIEQ;
          }
        case 211: break;
        case 104: 
          { return COCNOTLIKE;
          }
        case 212: break;
        case 5: 
          { return MINUS;
          }
        case 213: break;
        case 47: 
          { return LE;
          }
        case 214: break;
        case 59: 
          { return FOR;
          }
        case 215: break;
        case 41: 
          { return RANGE;
          }
        case 216: break;
        case 110: 
          { return COCCONTAINS;
          }
        case 217: break;
        case 27: 
          { return EXP;
          }
        case 218: break;
        case 86: 
          { return COCLIKE;
          }
        case 219: break;
        case 22: 
          { return RPAREN;
          }
        case 220: break;
        case 77: 
          { return BEGIN;
          }
        case 221: break;
        case 74: 
          { return TRAP;
          }
        case 222: break;
        case 16: 
          { return ALIAS;
          }
        case 223: break;
        case 1: 
          { return WRONG;
          }
        case 224: break;
        case 105: 
          { return COCREPLACE;
          }
        case 225: break;
        case 85: 
          { return COISNOT;
          }
        case 226: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
