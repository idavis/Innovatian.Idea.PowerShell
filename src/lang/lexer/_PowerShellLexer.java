/* The following code was generated by JFlex 1.4.3 on 2/19/11 9:01 PM */

package com.innovatian.idea.powershell.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/19/11 9:01 PM from the specification file
 * <tt>PowerShell.flex</tt>
 */
class _PowerShellLexer implements FlexLexer, PsTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_IDENT_DOLLAR = 2;
  public static final int IN_SINGLE_EXPSTRING = 8;
  public static final int IN_INNER_BLOCK = 18;
  public static final int IN_SINGLE_IDENT = 10;
  public static final int NLS_AFTER_LBRACE = 16;
  public static final int YYINITIAL = 0;
  public static final int IN_SINGLE_DOT = 12;
  public static final int IN_INNER_IDENT_BLOCK = 4;
  public static final int IN_SINGLE_EXPSTRING_DOLLAR = 6;
  public static final int IN_SINGLE_QUOTESTRING = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     7,  7,  8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\20\22\0\1\3\1\0\1\22"+
    "\1\25\1\15\1\57\1\0\1\7\1\1\1\60\1\24\1\56\1\63"+
    "\1\4\1\26\1\23\1\12\11\10\1\6\1\64\1\55\1\53\1\54"+
    "\2\0\1\67\1\27\1\37\1\44\1\30\1\11\1\31\1\41\1\32"+
    "\1\72\1\36\1\45\1\51\1\33\1\42\1\50\1\66\1\34\1\46"+
    "\1\40\1\43\1\71\1\52\1\13\1\47\1\5\1\61\1\21\1\62"+
    "\1\65\1\14\1\0\1\35\1\27\1\37\1\44\1\30\1\11\1\31"+
    "\1\41\1\32\1\72\1\36\1\45\1\51\1\33\1\42\1\50\1\66"+
    "\1\34\1\70\1\40\1\43\1\71\1\52\1\13\1\47\1\5\1\16"+
    "\1\0\1\17\54\0\1\5\12\0\1\5\4\0\1\5\5\0\27\5"+
    "\1\0\37\5\1\0\u013f\5\31\0\162\5\4\0\14\5\16\0\5\5"+
    "\11\0\1\5\213\0\1\5\13\0\1\5\1\0\3\5\1\0\1\5"+
    "\1\0\24\5\1\0\54\5\1\0\46\5\1\0\5\5\4\0\202\5"+
    "\10\0\105\5\1\0\46\5\2\0\2\5\6\0\20\5\41\0\46\5"+
    "\2\0\1\5\7\0\47\5\110\0\33\5\5\0\3\5\56\0\32\5"+
    "\5\0\13\5\43\0\2\5\1\0\143\5\1\0\1\5\17\0\2\5"+
    "\7\0\2\5\12\0\3\5\2\0\1\5\20\0\1\5\1\0\36\5"+
    "\35\0\3\5\60\0\46\5\13\0\1\5\u0152\0\66\5\3\0\1\5"+
    "\22\0\1\5\7\0\12\5\43\0\10\5\2\0\2\5\2\0\26\5"+
    "\1\0\7\5\1\0\1\5\3\0\4\5\3\0\1\5\36\0\2\5"+
    "\1\0\3\5\16\0\2\5\23\0\6\5\4\0\2\5\2\0\26\5"+
    "\1\0\7\5\1\0\2\5\1\0\2\5\1\0\2\5\37\0\4\5"+
    "\1\0\1\5\23\0\3\5\20\0\11\5\1\0\3\5\1\0\26\5"+
    "\1\0\7\5\1\0\2\5\1\0\5\5\3\0\1\5\22\0\1\5"+
    "\17\0\2\5\43\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\2\5\1\0\5\5\3\0\1\5\36\0\2\5\1\0\3\5"+
    "\17\0\1\5\21\0\1\5\1\0\6\5\3\0\3\5\1\0\4\5"+
    "\3\0\2\5\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5"+
    "\3\0\10\5\1\0\3\5\113\0\10\5\1\0\3\5\1\0\27\5"+
    "\1\0\12\5\1\0\5\5\46\0\2\5\43\0\10\5\1\0\3\5"+
    "\1\0\27\5\1\0\12\5\1\0\5\5\3\0\1\5\40\0\1\5"+
    "\1\0\2\5\43\0\10\5\1\0\3\5\1\0\27\5\1\0\20\5"+
    "\46\0\2\5\43\0\22\5\3\0\30\5\1\0\11\5\1\0\1\5"+
    "\2\0\7\5\72\0\60\5\1\0\2\5\14\0\7\5\72\0\2\5"+
    "\1\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5"+
    "\1\0\7\5\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5"+
    "\1\0\4\5\1\0\2\5\11\0\1\5\2\0\5\5\1\0\1\5"+
    "\25\0\2\5\42\0\1\5\77\0\10\5\1\0\42\5\35\0\4\5"+
    "\164\0\42\5\1\0\5\5\1\0\2\5\45\0\6\5\112\0\46\5"+
    "\12\0\51\5\7\0\132\5\5\0\104\5\5\0\122\5\6\0\7\5"+
    "\1\0\77\5\1\0\1\5\1\0\4\5\2\0\7\5\1\0\1\5"+
    "\1\0\4\5\2\0\47\5\1\0\1\5\1\0\4\5\2\0\37\5"+
    "\1\0\1\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5"+
    "\2\0\7\5\1\0\7\5\1\0\27\5\1\0\37\5\1\0\1\5"+
    "\1\0\4\5\2\0\7\5\1\0\47\5\1\0\23\5\105\0\125\5"+
    "\14\0\u026c\5\2\0\10\5\12\0\32\5\5\0\113\5\25\0\15\5"+
    "\1\0\4\5\16\0\22\5\16\0\22\5\16\0\15\5\1\0\3\5"+
    "\17\0\64\5\43\0\1\5\4\0\1\5\103\0\130\5\10\0\51\5"+
    "\127\0\35\5\63\0\36\5\2\0\5\5\u038b\0\154\5\224\0\234\5"+
    "\4\0\132\5\6\0\26\5\2\0\6\5\2\0\46\5\2\0\6\5"+
    "\2\0\10\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0\37\5"+
    "\2\0\65\5\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5"+
    "\3\0\4\5\2\0\6\5\4\0\15\5\5\0\3\5\1\0\7\5"+
    "\164\0\1\5\15\0\1\5\202\0\1\5\4\0\1\5\2\0\12\5"+
    "\1\0\1\5\3\0\5\5\6\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\0\3\5\1\0\7\5\3\0\3\5\5\0\5\5"+
    "\u0ebb\0\2\5\52\0\5\5\5\0\2\5\4\0\126\5\6\0\3\5"+
    "\1\0\132\5\1\0\4\5\5\0\50\5\4\0\136\5\21\0\30\5"+
    "\70\0\20\5\u0200\0\u19b6\5\112\0\u51a6\5\132\0\u048d\5\u0773\0\u2ba4\5"+
    "\u215c\0\u012e\5\2\0\73\5\225\0\7\5\14\0\5\5\5\0\1\5"+
    "\1\0\12\5\1\0\15\5\1\0\5\5\1\0\1\5\1\0\2\5"+
    "\1\0\2\5\1\0\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5"+
    "\50\0\14\5\164\0\5\5\1\0\207\5\44\0\32\5\6\0\32\5"+
    "\13\0\131\5\3\0\6\5\2\0\6\5\2\0\6\5\2\0\3\5"+
    "\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\1\1\7\1\1\1\10\1\11\1\1\1\12"+
    "\1\13\1\14\1\15\1\16\5\1\1\17\4\1\1\17"+
    "\10\1\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\1\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\1\1\41\1\40\1\42\1\43"+
    "\1\36\2\44\1\45\1\1\17\44\13\0\1\46\2\0"+
    "\1\17\3\0\1\47\1\50\1\4\2\0\1\51\1\52"+
    "\1\53\13\0\1\17\3\0\1\17\1\0\1\54\1\0"+
    "\1\55\4\0\1\17\1\0\2\17\6\0\1\17\13\0"+
    "\1\56\5\0\2\17\12\0\1\57\1\60\1\61\2\0"+
    "\1\62\33\44\1\63\1\64\6\0\1\65\1\0\1\66"+
    "\12\0\1\67\1\0\1\70\1\0\1\71\2\0\1\72"+
    "\1\0\1\7\1\52\1\73\4\0\1\74\13\0\1\17"+
    "\7\0\1\17\4\0\1\17\2\0\1\75\10\0\1\17"+
    "\25\0\43\44\1\76\1\77\1\100\1\101\3\0\1\102"+
    "\1\0\1\103\4\0\1\104\1\105\1\106\1\107\4\0"+
    "\1\110\1\0\1\111\10\0\1\52\2\0\1\112\1\0"+
    "\1\113\20\0\1\17\5\0\1\114\5\0\1\115\16\0"+
    "\32\44\20\0\1\116\6\0\1\52\1\0\1\117\1\120"+
    "\40\0\1\121\4\0\1\17\2\0\1\122\7\0\1\123"+
    "\11\0\1\124\1\0\1\17\1\125\22\44\5\0\1\126"+
    "\1\127\13\0\1\130\1\0\1\131\1\0\1\132\4\0"+
    "\1\133\37\0\1\134\23\0\1\17\4\0\1\135\3\0"+
    "\16\44\5\0\1\136\12\0\1\137\1\140\6\0\1\141"+
    "\52\0\1\142\6\0\2\44\6\0\1\143\1\0\1\144"+
    "\12\0\1\145\3\0\1\141\30\0\1\146\22\0\2\44"+
    "\1\0\1\147\1\0\1\150\2\0\1\151\1\0\1\152"+
    "\1\0\1\153\1\0\1\154\53\0\2\44\1\0\1\155"+
    "\1\156\2\0\1\157\1\160\32\0\1\44\26\0\1\44"+
    "\1\0\1\161\15\0\1\162\1\163\31\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[963];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u019d\0\u019d\0\u0213\0\u019d\0\u024e\0\u019d\0\u0289"+
    "\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u019d\0\u019d\0\u03b0\0\u03eb"+
    "\0\u0426\0\u019d\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588"+
    "\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760"+
    "\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938"+
    "\0\u0973\0\u09ae\0\u019d\0\u019d\0\u019d\0\u019d\0\u019d\0\u019d"+
    "\0\u019d\0\u019d\0\u09e9\0\u0a24\0\u019d\0\u019d\0\u019d\0\u019d"+
    "\0\u0a5f\0\u0a9a\0\u019d\0\u0ad5\0\u019d\0\u0b10\0\u0b4b\0\u0b86"+
    "\0\u0bc1\0\u019d\0\u049c\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8"+
    "\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0"+
    "\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098"+
    "\0\u10d3\0\u110e\0\u1149\0\u1184\0\u0289\0\u019d\0\u11bf\0\u11fa"+
    "\0\u019d\0\u1235\0\u1270\0\u12ab\0\u019d\0\u019d\0\u12e6\0\u03eb"+
    "\0\u1321\0\u019d\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483"+
    "\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b"+
    "\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u019d\0\u17bd\0\u17f8"+
    "\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u16d1\0\u191f\0\u195a\0\u1995"+
    "\0\u19d0\0\u1a0b\0\u1a46\0\u195a\0\u1a81\0\u1abc\0\u18e4\0\u1995"+
    "\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94"+
    "\0\u1ccf\0\u1d0a\0\u019d\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31"+
    "\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009"+
    "\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u019d\0\u019d\0\u019d\0\u2130"+
    "\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308"+
    "\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0"+
    "\0\u251b\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642\0\u267d\0\u26b8"+
    "\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df\0\u019d\0\u019d\0\u281a"+
    "\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u019d"+
    "\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f"+
    "\0\u2bca\0\u2c05\0\u019d\0\u2c40\0\u019d\0\u2c7b\0\u019d\0\u2cb6"+
    "\0\u2cf1\0\u2d2c\0\u2d67\0\u12ab\0\u2da2\0\u019d\0\u2ddd\0\u2e18"+
    "\0\u2e53\0\u2e8e\0\u019d\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5"+
    "\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117\0\u3152\0\u318d"+
    "\0\u31c8\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u3365"+
    "\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c\0\u34c7\0\u019d\0\u3502"+
    "\0\u353d\0\u3578\0\u35b3\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da"+
    "\0\u3715\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c\0\u3877\0\u38b2"+
    "\0\u1747\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14\0\u3a4f"+
    "\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec\0\u3c27"+
    "\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4\0\u3dff"+
    "\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c\0\u3fd7"+
    "\0\u4012\0\u404d\0\u4088\0\u40c3\0\u40fe\0\u4139\0\u4174\0\u41af"+
    "\0\u41ea\0\u4225\0\u4260\0\u429b\0\u42d6\0\u4311\0\u434c\0\u4387"+
    "\0\u019d\0\u019d\0\u019d\0\u019d\0\u43c2\0\u43fd\0\u4438\0\u019d"+
    "\0\u4473\0\u019d\0\u44ae\0\u44e9\0\u4524\0\u455f\0\u019d\0\u019d"+
    "\0\u019d\0\u019d\0\u459a\0\u45d5\0\u4610\0\u464b\0\u019d\0\u4686"+
    "\0\u019d\0\u46c1\0\u46fc\0\u4737\0\u4772\0\u47ad\0\u47e8\0\u4823"+
    "\0\u485e\0\u4899\0\u48d4\0\u490f\0\u019d\0\u494a\0\u4985\0\u49c0"+
    "\0\u49fb\0\u4a36\0\u4a71\0\u4aac\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98"+
    "\0\u4bd3\0\u4c0e\0\u4c49\0\u4c84\0\u4cbf\0\u4cfa\0\u4d35\0\u4d70"+
    "\0\u4dab\0\u4de6\0\u4e21\0\u4e5c\0\u4e97\0\u019d\0\u4ed2\0\u4f0d"+
    "\0\u4f48\0\u4f83\0\u4fbe\0\u019d\0\u4ff9\0\u5034\0\u506f\0\u50aa"+
    "\0\u50e5\0\u5120\0\u515b\0\u5196\0\u51d1\0\u520c\0\u5247\0\u5282"+
    "\0\u52bd\0\u52f8\0\u5333\0\u536e\0\u53a9\0\u53e4\0\u541f\0\u545a"+
    "\0\u5495\0\u54d0\0\u550b\0\u5546\0\u5581\0\u55bc\0\u55f7\0\u5632"+
    "\0\u566d\0\u56a8\0\u56e3\0\u571e\0\u5759\0\u5794\0\u57cf\0\u580a"+
    "\0\u5845\0\u5880\0\u58bb\0\u58f6\0\u5931\0\u596c\0\u59a7\0\u59e2"+
    "\0\u5a1d\0\u5a58\0\u5a93\0\u5ace\0\u5b09\0\u5b44\0\u5b7f\0\u5bba"+
    "\0\u5bf5\0\u5c30\0\u5c6b\0\u5ca6\0\u019d\0\u5ce1\0\u5d1c\0\u5d57"+
    "\0\u5d92\0\u5dcd\0\u5e08\0\u019d\0\u4899\0\u019d\0\u019d\0\u5e43"+
    "\0\u5e7e\0\u5eb9\0\u5ef4\0\u5f2f\0\u5f6a\0\u5fa5\0\u5fe0\0\u601b"+
    "\0\u6056\0\u6091\0\u60cc\0\u6107\0\u6142\0\u617d\0\u61b8\0\u61f3"+
    "\0\u622e\0\u6269\0\u62a4\0\u62df\0\u631a\0\u6355\0\u6390\0\u63cb"+
    "\0\u6406\0\u6441\0\u647c\0\u64b7\0\u64f2\0\u652d\0\u6568\0\u019d"+
    "\0\u65a3\0\u65de\0\u6619\0\u6654\0\u668f\0\u66ca\0\u6705\0\u019d"+
    "\0\u6740\0\u677b\0\u67b6\0\u67f1\0\u682c\0\u6867\0\u68a2\0\u019d"+
    "\0\u68dd\0\u6918\0\u6953\0\u698e\0\u69c9\0\u6a04\0\u6a3f\0\u6a7a"+
    "\0\u6ab5\0\u019d\0\u6af0\0\u6b2b\0\u019d\0\u6b66\0\u6ba1\0\u6bdc"+
    "\0\u6c17\0\u6c52\0\u6c8d\0\u6cc8\0\u6d03\0\u6d3e\0\u6d79\0\u6db4"+
    "\0\u6def\0\u6e2a\0\u6e65\0\u6ea0\0\u6edb\0\u6f16\0\u6f51\0\u6f8c"+
    "\0\u6fc7\0\u7002\0\u703d\0\u7078\0\u019d\0\u019d\0\u70b3\0\u70ee"+
    "\0\u7129\0\u7164\0\u719f\0\u71da\0\u7215\0\u7250\0\u728b\0\u72c6"+
    "\0\u7301\0\u019d\0\u733c\0\u019d\0\u7377\0\u019d\0\u73b2\0\u73ed"+
    "\0\u7428\0\u7463\0\u019d\0\u749e\0\u74d9\0\u7514\0\u754f\0\u758a"+
    "\0\u75c5\0\u7600\0\u763b\0\u7676\0\u76b1\0\u76ec\0\u7727\0\u7762"+
    "\0\u779d\0\u77d8\0\u7813\0\u784e\0\u7889\0\u78c4\0\u78ff\0\u793a"+
    "\0\u7975\0\u79b0\0\u79eb\0\u7a26\0\u7a61\0\u7a9c\0\u7ad7\0\u7b12"+
    "\0\u7b4d\0\u4d70\0\u019d\0\u7b88\0\u7bc3\0\u7bfe\0\u7c39\0\u7c74"+
    "\0\u7caf\0\u7cea\0\u7d25\0\u7d60\0\u7d9b\0\u7dd6\0\u7e11\0\u7e4c"+
    "\0\u7e87\0\u7ec2\0\u7efd\0\u7f38\0\u7f73\0\u7fae\0\u7fe9\0\u8024"+
    "\0\u805f\0\u809a\0\u80d5\0\u019d\0\u8110\0\u814b\0\u8186\0\u81c1"+
    "\0\u81fc\0\u8237\0\u8272\0\u82ad\0\u82e8\0\u8323\0\u835e\0\u8399"+
    "\0\u83d4\0\u840f\0\u844a\0\u8485\0\u84c0\0\u84fb\0\u8536\0\u8571"+
    "\0\u85ac\0\u85e7\0\u019d\0\u8622\0\u865d\0\u8698\0\u86d3\0\u870e"+
    "\0\u8749\0\u8784\0\u87bf\0\u87fa\0\u8835\0\u019d\0\u019d\0\u8870"+
    "\0\u88ab\0\u88e6\0\u8921\0\u895c\0\u8997\0\u019d\0\u89d2\0\u8a0d"+
    "\0\u8a48\0\u8a83\0\u8abe\0\u8af9\0\u8b34\0\u8b6f\0\u8baa\0\u8be5"+
    "\0\u8c20\0\u8c5b\0\u8c96\0\u8cd1\0\u8d0c\0\u8d47\0\u8d82\0\u8dbd"+
    "\0\u8df8\0\u8e33\0\u8e6e\0\u8ea9\0\u8ee4\0\u8f1f\0\u8f5a\0\u8f95"+
    "\0\u8fd0\0\u900b\0\u9046\0\u9081\0\u90bc\0\u3451\0\u90f7\0\u9132"+
    "\0\u916d\0\u91a8\0\u91e3\0\u921e\0\u9259\0\u9294\0\u92cf\0\u930a"+
    "\0\u019d\0\u9345\0\u9380\0\u93bb\0\u93f6\0\u9431\0\u946c\0\u94a7"+
    "\0\u94e2\0\u951d\0\u9558\0\u9593\0\u95ce\0\u9609\0\u9644\0\u019d"+
    "\0\u967f\0\u019d\0\u96ba\0\u96f5\0\u9730\0\u976b\0\u97a6\0\u97e1"+
    "\0\u981c\0\u9857\0\u9892\0\u98cd\0\u019d\0\u9908\0\u9943\0\u997e"+
    "\0\u99b9\0\u99f4\0\u9a2f\0\u9a6a\0\u9aa5\0\u9ae0\0\u9b1b\0\u9b56"+
    "\0\u9b91\0\u9bcc\0\u9c07\0\u9c42\0\u9c7d\0\u9cb8\0\u9cf3\0\u9d2e"+
    "\0\u9d69\0\u9da4\0\u9ddf\0\u9e1a\0\u9e55\0\u9e90\0\u9ecb\0\u9f06"+
    "\0\u9f41\0\u019d\0\u9f7c\0\u9fb7\0\u9ff2\0\ua02d\0\ua068\0\ua0a3"+
    "\0\ua0de\0\ua119\0\ua154\0\ua18f\0\ua1ca\0\ua205\0\ua240\0\ua27b"+
    "\0\ua2b6\0\ua2f1\0\ua32c\0\ua367\0\ua3a2\0\ua3dd\0\ua418\0\u019d"+
    "\0\ua453\0\u019d\0\ua48e\0\ua4c9\0\u019d\0\ua504\0\u019d\0\ua53f"+
    "\0\u019d\0\ua57a\0\u019d\0\ua5b5\0\ua5f0\0\ua62b\0\ua666\0\ua6a1"+
    "\0\ua6dc\0\ua717\0\ua752\0\ua78d\0\ua7c8\0\ua803\0\ua83e\0\ua879"+
    "\0\ua8b4\0\ua8ef\0\ua92a\0\ua965\0\ua9a0\0\ua9db\0\uaa16\0\uaa51"+
    "\0\uaa8c\0\uaac7\0\uab02\0\uab3d\0\uab78\0\uabb3\0\uabee\0\uac29"+
    "\0\uac64\0\uac9f\0\uacda\0\uad15\0\uad50\0\uad8b\0\uadc6\0\uae01"+
    "\0\uae3c\0\uae77\0\uaeb2\0\uaeed\0\uaf28\0\uaf63\0\uaf9e\0\uafd9"+
    "\0\ub014\0\u019d\0\u019d\0\ub04f\0\ub08a\0\u019d\0\u019d\0\ub0c5"+
    "\0\ub100\0\ub13b\0\ub176\0\ub1b1\0\ub1ec\0\ub227\0\ub262\0\ub29d"+
    "\0\ub2d8\0\ub313\0\ub34e\0\ub389\0\ub3c4\0\ub3ff\0\ub43a\0\ub475"+
    "\0\ub4b0\0\ub4eb\0\ub526\0\ub561\0\ub59c\0\ub5d7\0\ub612\0\ub64d"+
    "\0\ub688\0\ub6c3\0\ub6fe\0\ub739\0\ub774\0\ub7af\0\ub7ea\0\ub825"+
    "\0\ub860\0\ub89b\0\ub8d6\0\ub911\0\ub94c\0\ub987\0\ub9c2\0\ub9fd"+
    "\0\uba38\0\uba73\0\ubaae\0\ubae9\0\ubb24\0\ubb5f\0\ubb9a\0\ubbd5"+
    "\0\ubc10\0\ubc4b\0\u019d\0\ubc86\0\ubcc1\0\ubcfc\0\ubd37\0\ubd72"+
    "\0\ubdad\0\ubde8\0\ube23\0\ube5e\0\ube99\0\ubed4\0\ubf0f\0\ubf4a"+
    "\0\u019d\0\u019d\0\ubf85\0\ubfc0\0\ubffb\0\uc036\0\uc071\0\uc0ac"+
    "\0\uc0e7\0\uc122\0\uc15d\0\uc198\0\uc1d3\0\uc20e\0\uc249\0\uc284"+
    "\0\uc2bf\0\uc2fa\0\uc335\0\uc370\0\uc3ab\0\uc3e6\0\uc421\0\uc45c"+
    "\0\uc497\0\uc4d2\0\uc50d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[963];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\1\15\1\16\1\12\1\17\1\20"+
    "\1\21\1\22\1\23\2\12\1\24\1\25\1\26\1\14"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\12\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\12\1\43\1\54"+
    "\1\12\1\73\5\12\1\74\3\12\1\74\1\12\2\74"+
    "\1\12\1\75\10\12\24\74\13\12\5\74\5\12\1\74"+
    "\3\12\1\74\1\12\2\74\2\12\1\76\7\12\24\74"+
    "\13\12\5\74\5\77\1\74\3\77\1\74\1\77\2\74"+
    "\1\77\1\100\10\77\24\74\13\77\5\74\2\101\1\102"+
    "\12\101\1\103\2\101\1\102\1\104\1\105\50\101\5\77"+
    "\1\106\3\77\1\106\1\77\2\106\12\77\24\106\13\77"+
    "\5\106\26\77\1\107\44\77\73\0\1\12\1\13\1\14"+
    "\1\15\1\16\1\110\1\17\1\20\1\21\1\111\1\23"+
    "\2\110\1\24\1\25\1\112\1\14\1\27\1\30\1\31"+
    "\1\32\1\33\1\113\1\110\1\114\1\115\1\116\1\117"+
    "\1\120\1\121\1\110\1\122\1\123\1\110\1\124\1\125"+
    "\2\110\1\126\1\110\1\127\1\130\1\131\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\110\1\121\1\126\1\110\1\132\2\0\2\14"+
    "\14\0\1\14\1\133\101\0\1\134\1\135\1\136\1\137"+
    "\1\140\2\0\1\141\5\0\1\142\3\0\1\143\15\0"+
    "\2\144\2\0\2\145\1\0\4\145\1\146\10\145\1\0"+
    "\1\147\51\145\10\0\1\21\1\0\1\21\112\0\1\150"+
    "\4\0\2\151\1\0\1\152\1\153\1\0\1\151\4\0"+
    "\1\151\30\0\1\21\1\0\1\21\1\154\57\0\14\155"+
    "\1\0\1\156\55\155\2\0\1\15\15\0\1\157\52\0"+
    "\2\160\1\0\12\160\1\0\2\160\1\0\1\161\1\162"+
    "\50\160\24\0\1\163\46\0\2\33\1\0\15\33\1\0"+
    "\52\33\26\0\1\164\74\0\1\165\3\0\1\166\51\0"+
    "\1\167\17\0\1\170\1\171\2\0\1\172\5\0\1\173"+
    "\2\0\1\174\52\0\1\175\1\0\1\151\1\0\1\176"+
    "\1\177\1\0\1\200\1\0\1\201\1\0\1\151\1\202"+
    "\1\151\1\203\1\0\1\204\1\151\1\205\14\0\1\177"+
    "\1\203\1\151\12\0\1\206\16\0\1\207\1\0\1\151"+
    "\1\210\5\0\1\201\6\0\1\174\1\211\51\0\1\212"+
    "\1\0\1\151\2\0\1\177\6\0\1\202\22\0\1\177"+
    "\1\0\1\151\31\0\1\213\1\0\1\151\1\214\10\0"+
    "\1\215\1\0\1\216\1\0\1\151\1\217\16\0\1\216"+
    "\1\220\40\0\1\151\4\0\1\221\1\0\1\216\21\0"+
    "\1\216\34\0\1\222\75\0\1\223\3\0\1\224\1\225"+
    "\1\0\1\151\1\226\2\0\1\227\16\0\1\223\1\0"+
    "\1\230\31\0\1\231\3\0\1\232\4\0\1\233\5\0"+
    "\1\234\55\0\1\235\101\0\1\151\1\0\1\236\62\0"+
    "\1\237\14\0\1\240\52\0\1\177\1\0\1\241\2\0"+
    "\1\242\4\0\1\243\24\0\1\242\51\0\1\151\1\0"+
    "\1\151\17\0\1\151\32\0\1\244\1\0\1\151\2\0"+
    "\1\245\1\0\1\151\1\246\1\0\1\247\1\250\1\0"+
    "\1\251\2\0\1\252\1\0\1\253\14\0\1\245\1\0"+
    "\1\151\35\0\1\254\1\255\4\0\1\256\1\257\2\0"+
    "\1\151\3\0\1\260\14\0\1\255\1\151\32\0\1\261"+
    "\1\0\1\151\7\0\1\262\5\0\1\151\20\0\1\151"+
    "\35\0\1\263\4\0\1\264\104\0\1\265\72\0\1\266"+
    "\72\0\1\267\61\0\1\270\35\0\1\74\2\0\5\74"+
    "\12\0\24\74\13\0\5\74\2\101\1\0\12\101\1\0"+
    "\2\101\1\0\1\104\1\0\50\101\2\0\2\102\14\0"+
    "\1\102\1\271\51\0\73\101\5\0\1\106\2\0\5\106"+
    "\12\0\24\106\13\0\5\106\5\0\1\272\3\0\1\272"+
    "\1\0\2\272\12\0\24\272\13\0\5\272\5\0\1\110"+
    "\2\0\5\110\12\0\24\110\13\0\5\110\5\0\1\110"+
    "\2\0\5\110\12\0\13\110\1\273\10\110\13\0\5\110"+
    "\5\0\1\110\2\0\3\110\1\274\1\110\12\0\24\110"+
    "\13\0\5\110\5\0\1\110\2\0\5\110\12\0\1\110"+
    "\1\275\3\110\1\276\16\110\13\0\5\110\5\0\1\110"+
    "\2\0\5\110\12\0\4\110\1\277\15\110\1\300\1\110"+
    "\13\0\5\110\5\0\1\110\2\0\5\110\12\0\1\110"+
    "\1\301\22\110\13\0\5\110\5\0\1\110\2\0\5\110"+
    "\12\0\1\110\1\302\22\110\13\0\5\110\5\0\1\110"+
    "\2\0\5\110\12\0\15\110\1\303\6\110\13\0\5\110"+
    "\5\0\1\110\2\0\5\110\12\0\13\110\1\304\2\110"+
    "\1\305\5\110\13\0\5\110\5\0\1\110\2\0\5\110"+
    "\12\0\1\110\1\306\3\110\1\307\16\110\13\0\5\110"+
    "\5\0\1\110\2\0\5\110\12\0\14\110\1\310\7\110"+
    "\13\0\5\110\5\0\1\110\2\0\5\110\12\0\21\110"+
    "\1\311\2\110\13\0\5\110\5\0\1\110\2\0\5\110"+
    "\12\0\1\110\1\312\7\110\1\313\1\110\1\314\1\315"+
    "\4\110\1\316\2\110\13\0\5\110\5\0\1\110\2\0"+
    "\5\110\12\0\13\110\1\317\1\320\7\110\13\0\5\110"+
    "\5\0\1\110\2\0\5\110\12\0\1\110\1\321\11\110"+
    "\1\322\10\110\13\0\5\110\5\0\1\110\2\0\5\110"+
    "\12\0\5\110\1\323\4\110\1\324\11\110\13\0\5\110"+
    "\5\0\1\110\2\0\5\110\12\0\13\110\1\325\10\110"+
    "\13\0\5\110\2\0\1\14\15\0\1\14\140\0\1\326"+
    "\34\0\1\327\7\0\1\327\62\0\1\330\1\331\1\0"+
    "\1\332\1\333\2\0\1\334\5\0\1\335\1\336\2\0"+
    "\1\337\16\0\1\336\32\0\1\340\11\0\1\341\60\0"+
    "\1\342\72\0\1\343\1\344\1\0\1\345\1\346\2\0"+
    "\1\347\2\0\1\350\2\0\1\351\3\0\1\352\51\0"+
    "\1\353\1\0\1\354\5\0\1\355\67\0\1\356\31\0"+
    "\1\356\51\0\1\357\21\0\1\357\2\0\73\145\33\0"+
    "\1\360\11\0\1\361\61\0\1\362\71\0\1\363\47\0"+
    "\3\364\14\0\2\364\4\0\1\364\1\0\1\364\4\0"+
    "\1\364\22\0\1\364\5\0\1\15\70\0\73\160\24\365"+
    "\1\0\46\365\26\0\1\366\75\0\1\367\71\0\1\370"+
    "\74\0\1\371\15\0\1\372\66\0\1\373\63\0\1\374"+
    "\31\0\1\374\44\0\1\375\77\0\1\376\21\0\1\376"+
    "\37\0\1\177\1\0\1\377\27\0\1\177\43\0\1\u0100"+
    "\74\0\1\u0101\75\0\1\151\57\0\1\151\16\0\1\151"+
    "\70\0\1\151\57\0\1\151\71\0\1\u0102\35\0\1\151"+
    "\47\0\1\151\21\0\1\151\53\0\1\u0103\34\0\1\151"+
    "\150\0\1\u0104\51\0\1\u0105\74\0\1\u0106\53\0\1\u0107"+
    "\1\0\1\u0108\2\0\1\u0109\5\0\1\u010a\2\0\1\u010b"+
    "\15\0\1\u0108\1\u010a\34\0\1\151\15\0\1\151\55\0"+
    "\1\u0102\103\0\1\u010c\76\0\1\u010d\66\0\1\u010e\73\0"+
    "\1\177\65\0\1\u010f\65\0\1\u0110\14\0\1\u0111\1\u0112"+
    "\51\0\1\u0113\1\0\1\151\4\0\1\151\6\0\1\151"+
    "\1\0\1\151\17\0\2\151\31\0\1\u0114\15\0\1\u0115"+
    "\21\0\1\u0115\37\0\1\u0116\11\0\1\u0117\17\0\1\u0116"+
    "\37\0\1\u0118\106\0\1\u0119\70\0\1\u011a\21\0\1\u011a"+
    "\42\0\1\u011b\72\0\1\u011c\76\0\1\u011d\37\0\1\u011e"+
    "\22\0\1\151\76\0\1\u011f\72\0\1\u0120\4\0\1\u0121"+
    "\72\0\1\151\1\u0122\21\0\1\u0122\37\0\1\u0123\4\0"+
    "\1\u0124\24\0\1\u0123\37\0\1\u0125\104\0\1\u0126\21\0"+
    "\1\u0126\32\0\1\u0127\107\0\1\u0128\1\u0122\1\0\1\u0129"+
    "\17\0\1\u0122\34\0\1\u012a\102\0\1\u012b\64\0\1\u012c"+
    "\106\0\1\u012d\70\0\1\u012e\21\0\1\u012e\46\0\1\151"+
    "\63\0\1\u012f\31\0\1\u012f\46\0\1\u0130\25\0\1\u0131"+
    "\33\0\1\u0132\70\0\1\u0133\1\0\1\u0134\72\0\1\u0135"+
    "\42\0\1\102\15\0\1\102\57\0\1\272\2\0\5\272"+
    "\12\0\24\272\13\0\5\272\5\0\1\110\2\0\5\110"+
    "\12\0\5\110\1\u0136\16\110\13\0\5\110\5\0\1\110"+
    "\2\0\5\110\12\0\21\110\1\u0137\2\110\13\0\5\110"+
    "\5\0\1\110\2\0\5\110\12\0\11\110\1\u0138\12\110"+
    "\13\0\5\110\5\0\1\110\2\0\5\110\12\0\13\110"+
    "\1\u0139\10\110\13\0\5\110\5\0\1\110\2\0\5\110"+
    "\12\0\24\110\13\0\3\110\1\u013a\1\110\5\0\1\110"+
    "\2\0\5\110\12\0\21\110\1\u013b\2\110\13\0\5\110"+
    "\5\0\1\110\2\0\5\110\12\0\23\110\1\u013c\13\0"+
    "\5\110\5\0\1\110\2\0\5\110\12\0\4\110\1\u013d"+
    "\1\110\1\u013e\10\110\1\u013f\2\110\1\u0140\1\110\13\0"+
    "\1\110\1\u013e\1\u013f\2\110\5\0\1\110\2\0\5\110"+
    "\12\0\15\110\1\u0141\6\110\13\0\5\110\5\0\1\110"+
    "\2\0\5\110\12\0\4\110\1\u0142\14\110\1\u0143\1\u0144"+
    "\1\110\13\0\5\110\5\0\1\110\2\0\5\110\12\0"+
    "\1\110\1\u0145\22\110\13\0\5\110\5\0\1\110\2\0"+
    "\5\110\12\0\1\110\1\u0146\15\110\1\u0147\4\110\13\0"+
    "\2\110\1\u0147\2\110\5\0\1\110\2\0\5\110\12\0"+
    "\6\110\1\u0148\15\110\13\0\1\110\1\u0148\3\110\5\0"+
    "\1\110\2\0\5\110\12\0\11\110\1\u0149\12\110\13\0"+
    "\5\110\5\0\1\110\2\0\5\110\12\0\15\110\1\u014a"+
    "\6\110\13\0\5\110\5\0\1\110\2\0\5\110\12\0"+
    "\11\110\1\u014b\4\110\1\u014c\5\110\13\0\5\110\5\0"+
    "\1\110\2\0\5\110\12\0\6\110\1\u014d\4\110\1\u014e"+
    "\10\110\13\0\1\110\1\u014d\3\110\5\0\1\110\2\0"+
    "\5\110\12\0\5\110\1\u014f\16\110\13\0\5\110\5\0"+
    "\1\110\2\0\5\110\12\0\17\110\1\u0150\4\110\13\0"+
    "\2\110\1\u0150\2\110\5\0\1\110\2\0\5\110\12\0"+
    "\16\110\1\u0151\5\110\13\0\5\110\5\0\1\110\2\0"+
    "\5\110\12\0\21\110\1\u0152\2\110\13\0\5\110\5\0"+
    "\1\110\2\0\5\110\12\0\17\110\1\u0153\4\110\13\0"+
    "\2\110\1\u0153\2\110\5\0\1\110\2\0\5\110\12\0"+
    "\6\110\1\u0154\15\110\13\0\1\110\1\u0154\3\110\5\0"+
    "\1\110\2\0\5\110\12\0\24\110\13\0\3\110\1\u0155"+
    "\1\110\5\0\1\110\2\0\5\110\12\0\3\110\1\u0156"+
    "\20\110\13\0\5\110\5\0\1\110\2\0\5\110\12\0"+
    "\1\110\1\u0157\22\110\13\0\5\110\5\0\1\110\2\0"+
    "\5\110\12\0\3\110\1\u0158\20\110\13\0\5\110\66\0"+
    "\1\u0159\35\0\1\u015a\6\0\1\u015b\62\0\1\u015c\11\0"+
    "\1\u015d\60\0\1\u015e\104\0\1\u015f\60\0\1\u0160\1\0"+
    "\1\u0161\5\0\1\u0162\65\0\1\u0163\74\0\1\u0164\31\0"+
    "\1\u0164\43\0\1\u0165\102\0\1\u0166\110\0\1\u0167\34\0"+
    "\1\u0168\7\0\1\u0169\62\0\1\u016a\11\0\1\u016b\60\0"+
    "\1\u016c\104\0\1\u016d\63\0\1\u016e\67\0\1\u016f\1\0"+
    "\1\u0170\5\0\1\u0171\67\0\1\u0172\31\0\1\u0172\41\0"+
    "\1\u0173\74\0\1\u0174\67\0\1\u0175\31\0\1\u0175\43\0"+
    "\1\u0176\62\0\1\u0177\20\0\1\u0178\60\0\1\u0179\33\0"+
    "\24\365\1\u017a\46\365\32\0\1\u017b\75\0\1\u017c\31\0"+
    "\1\u017c\43\0\1\u017d\74\0\1\u017e\76\0\1\u0119\21\0"+
    "\1\u0119\44\0\1\151\60\0\1\u017f\110\0\1\u0122\21\0"+
    "\1\u0122\6\0\1\u0180\131\0\1\u0181\77\0\1\151\54\0"+
    "\1\151\102\0\1\u0182\72\0\1\u0183\34\0\1\u0184\123\0"+
    "\1\u0185\31\0\1\u0185\47\0\1\u0186\71\0\1\u0187\67\0"+
    "\1\u0188\1\0\1\u0189\1\u018a\71\0\1\u018b\62\0\1\202"+
    "\75\0\1\151\31\0\1\151\7\0\1\u018c\125\0\1\u018d"+
    "\73\0\1\u018e\30\0\1\u018f\50\0\1\u0190\73\0\1\u0191"+
    "\57\0\1\u0192\31\0\1\u0192\7\0\1\u0193\126\0\1\u0194"+
    "\71\0\1\u0195\10\0\1\u0196\64\0\1\u0197\60\0\1\151"+
    "\102\0\1\u0198\36\0\1\u0199\120\0\1\u019a\75\0\1\u019b"+
    "\31\0\1\u019b\14\0\1\151\116\0\1\u019c\31\0\1\u019c"+
    "\7\0\1\u019d\116\0\1\u019e\133\0\1\151\35\0\1\u019f"+
    "\106\0\1\u01a0\62\0\1\u0114\102\0\1\u01a1\52\0\1\u0102"+
    "\74\0\1\u0115\100\0\1\u01a2\71\0\1\u01a3\70\0\1\u01a4"+
    "\31\0\1\u01a4\7\0\1\u01a5\37\0\1\151\67\0\1\u012d"+
    "\77\0\1\u01a6\21\0\1\u01a6\35\0\1\u01a7\67\0\1\u0190"+
    "\102\0\1\u01a8\66\0\1\u01a9\103\0\1\u01aa\60\0\1\u0194"+
    "\44\0\1\110\2\0\5\110\12\0\1\110\1\u01ab\20\110"+
    "\1\u01ac\1\110\13\0\5\110\5\0\1\110\2\0\5\110"+
    "\12\0\13\110\1\u01ad\10\110\13\0\5\110\4\0\1\u0180"+
    "\1\110\2\0\5\110\12\0\24\110\13\0\5\110\5\0"+
    "\1\110\2\0\5\110\12\0\14\110\1\u01ae\7\110\13\0"+
    "\5\110\5\0\1\110\2\0\5\110\12\0\13\110\1\u01af"+
    "\10\110\13\0\5\110\5\0\1\110\2\0\5\110\12\0"+
    "\13\110\1\u01b0\10\110\13\0\5\110\4\0\1\u0184\1\110"+
    "\2\0\5\110\12\0\24\110\13\0\5\110\5\0\1\110"+
    "\2\0\5\110\12\0\6\110\1\u01b1\15\110\13\0\1\110"+
    "\1\u01b1\3\110\5\0\1\110\2\0\5\110\12\0\15\110"+
    "\1\u01b2\6\110\13\0\5\110\5\0\1\110\2\0\5\110"+
    "\12\0\11\110\1\u01b3\1\110\1\u01b4\1\u01b5\7\110\13\0"+
    "\5\110\5\0\1\110\2\0\5\110\12\0\13\110\1\u01b6"+
    "\10\110\13\0\5\110\4\0\1\u018c\1\110\2\0\5\110"+
    "\12\0\24\110\13\0\5\110\5\0\1\110\2\0\5\110"+
    "\12\0\24\110\13\0\3\110\1\u01b7\1\110\5\0\1\110"+
    "\2\0\5\110\12\0\20\110\1\u01b8\3\110\13\0\5\110"+
    "\5\0\1\110\2\0\5\110\12\0\21\110\1\u01b9\2\110"+
    "\13\0\5\110\5\0\1\110\2\0\5\110\12\0\6\110"+
    "\1\u01ba\15\110\13\0\1\110\1\u01ba\3\110\4\0\1\u0193"+
    "\1\110\2\0\5\110\12\0\24\110\13\0\5\110\5\0"+
    "\1\110\2\0\5\110\12\0\11\110\1\u01bb\12\110\13\0"+
    "\5\110\5\0\1\110\2\0\5\110\12\0\10\110\1\u01bc"+
    "\13\110\13\0\5\110\4\0\1\u0199\1\110\2\0\5\110"+
    "\12\0\24\110\13\0\5\110\5\0\1\110\2\0\5\110"+
    "\12\0\6\110\1\u01bd\15\110\13\0\1\110\1\u01bd\3\110"+
    "\4\0\1\u019d\1\110\2\0\5\110\12\0\24\110\13\0"+
    "\5\110\5\0\1\110\2\0\5\110\12\0\1\110\1\u01be"+
    "\22\110\13\0\5\110\5\0\1\110\2\0\5\110\12\0"+
    "\5\110\1\u01bf\16\110\13\0\5\110\5\0\1\110\2\0"+
    "\5\110\12\0\21\110\1\u01c0\2\110\13\0\5\110\5\0"+
    "\1\110\2\0\5\110\12\0\11\110\1\u0146\12\110\13\0"+
    "\5\110\5\0\1\110\2\0\5\110\12\0\21\110\1\u01c1"+
    "\2\110\13\0\5\110\5\0\1\110\2\0\5\110\12\0"+
    "\3\110\1\u0147\20\110\13\0\5\110\4\0\1\u01a5\1\110"+
    "\2\0\5\110\12\0\24\110\13\0\5\110\5\0\1\110"+
    "\2\0\5\110\12\0\12\110\1\u0152\11\110\13\0\5\110"+
    "\5\0\1\110\2\0\5\110\12\0\17\110\1\u01c2\4\110"+
    "\13\0\2\110\1\u01c2\2\110\5\0\1\110\2\0\5\110"+
    "\12\0\1\110\1\u01b8\22\110\13\0\5\110\5\0\1\110"+
    "\2\0\5\110\12\0\11\110\1\u01c3\12\110\13\0\5\110"+
    "\5\0\1\110\2\0\5\110\12\0\5\110\1\u01c4\16\110"+
    "\13\0\5\110\5\0\1\110\2\0\5\110\12\0\4\110"+
    "\1\u01bb\17\110\13\0\5\110\40\0\1\u01c5\102\0\1\u01c6"+
    "\55\0\1\u01c7\75\0\1\u01c8\76\0\1\u01c9\70\0\1\u01ca"+
    "\71\0\1\u01cb\5\0\1\u01cc\3\0\1\u01cd\66\0\1\u01ce"+
    "\65\0\1\u01cf\102\0\1\u01d0\55\0\1\u01d1\77\0\1\u01d2"+
    "\70\0\1\u01d3\74\0\1\u01d4\62\0\1\u01d5\101\0\1\u01d6"+
    "\100\0\1\u01d7\55\0\1\u01d8\77\0\1\u01d9\31\0\1\u01d9"+
    "\40\0\1\u01da\31\0\1\u01da\43\0\1\u01db\32\0\23\365"+
    "\1\u01dc\1\u01dd\46\365\33\0\1\u01de\75\0\1\u01df\70\0"+
    "\1\u01e0\70\0\1\u01e1\70\0\1\u01e2\1\0\1\u01e3\2\0"+
    "\1\u01e4\1\0\1\u01e5\1\u01e6\1\u01e7\1\0\1\u01e8\1\u01e9"+
    "\1\u01ea\1\u01eb\1\0\1\u01ec\1\u01ed\1\u01ee\14\0\1\u01e4"+
    "\1\u01eb\1\u01ef\51\0\1\u0114\60\0\1\u01f0\70\0\1\u01f1"+
    "\70\0\1\u01e3\2\0\1\u01f2\2\0\1\u01f3\1\0\1\u01f4"+
    "\3\0\1\u01eb\1\0\1\u01f5\16\0\1\u01f2\1\u01eb\1\u01ef"+
    "\52\0\1\u01f6\25\0\1\u01f7\122\0\1\u01f8\73\0\1\u01f9"+
    "\31\0\1\u01f9\50\0\1\u01fa\76\0\1\u01fb\112\0\1\u01fc"+
    "\40\0\1\u01fd\1\0\1\u01fe\6\0\1\u01ff\1\u01ed\62\0"+
    "\1\u0200\63\0\1\u0201\70\0\1\u0202\46\0\1\u0203\123\0"+
    "\1\u0204\31\0\1\u0204\37\0\1\u0205\100\0\1\u01f4\34\0"+
    "\1\u0206\116\0\1\u0207\114\0\1\u0208\62\0\1\u0209\41\0"+
    "\1\u020a\21\0\1\u020b\5\0\1\u020c\2\0\1\u020d\1\0"+
    "\1\u020e\1\0\1\u020f\17\0\1\u020e\47\0\1\u0210\65\0"+
    "\1\u0211\62\0\1\u0212\1\0\1\u01e3\2\0\1\u01e4\1\0"+
    "\1\u01fd\1\u01e6\3\0\1\u01e9\1\u01ea\1\u01eb\1\0\1\u0213"+
    "\16\0\1\u01e4\1\u01eb\1\u01ef\40\0\1\u0214\73\0\1\u0215"+
    "\36\0\1\u0216\116\0\1\u0217\101\0\1\u0218\63\0\1\u0219"+
    "\113\0\1\u021a\66\0\1\u01ea\70\0\1\u021b\67\0\1\151"+
    "\62\0\1\u021c\72\0\1\u0114\72\0\1\u021d\47\0\1\110"+
    "\2\0\5\110\12\0\6\110\1\u021e\15\110\13\0\1\110"+
    "\1\u021e\3\110\5\0\1\110\2\0\5\110\12\0\6\110"+
    "\1\u021f\15\110\13\0\1\110\1\u021f\3\110\5\0\1\110"+
    "\2\0\5\110\12\0\5\110\1\u0220\16\110\13\0\5\110"+
    "\5\0\1\110\2\0\5\110\12\0\21\110\1\u0146\2\110"+
    "\13\0\5\110\5\0\1\110\2\0\5\110\12\0\7\110"+
    "\1\u0221\14\110\13\0\5\110\5\0\1\110\2\0\5\110"+
    "\12\0\5\110\1\u0222\16\110\13\0\5\110\5\0\1\110"+
    "\2\0\5\110\12\0\22\110\1\u0155\1\110\13\0\5\110"+
    "\4\0\1\u01f7\1\110\2\0\5\110\12\0\24\110\13\0"+
    "\5\110\5\0\1\110\2\0\5\110\12\0\6\110\1\u0223"+
    "\15\110\13\0\1\110\1\u0223\3\110\5\0\1\110\2\0"+
    "\5\110\12\0\16\110\1\u0224\5\110\13\0\5\110\5\0"+
    "\1\110\2\0\5\110\12\0\22\110\1\u0225\1\110\13\0"+
    "\5\110\5\0\1\110\2\0\5\110\12\0\24\110\13\0"+
    "\3\110\1\u0226\1\110\5\0\1\110\2\0\5\110\12\0"+
    "\1\110\1\u0227\22\110\13\0\5\110\4\0\1\u0203\1\110"+
    "\2\0\5\110\12\0\24\110\13\0\5\110\5\0\1\110"+
    "\2\0\5\110\12\0\6\110\1\u0157\15\110\13\0\1\110"+
    "\1\u0157\3\110\5\0\1\110\2\0\5\110\12\0\5\110"+
    "\1\u0228\16\110\13\0\5\110\4\0\1\u0206\1\110\2\0"+
    "\5\110\12\0\24\110\13\0\5\110\5\0\1\110\2\0"+
    "\5\110\12\0\1\110\1\u0229\22\110\13\0\5\110\5\0"+
    "\1\110\2\0\5\110\12\0\11\110\1\u022a\12\110\13\0"+
    "\5\110\5\0\1\110\2\0\5\110\12\0\10\110\1\u022b"+
    "\13\110\13\0\5\110\5\0\1\110\2\0\5\110\12\0"+
    "\11\110\1\u022c\12\110\13\0\5\110\4\0\1\u0216\1\110"+
    "\2\0\5\110\12\0\24\110\13\0\5\110\5\0\1\110"+
    "\2\0\5\110\12\0\1\110\1\u022d\22\110\13\0\5\110"+
    "\5\0\1\110\2\0\5\110\12\0\14\110\1\u022e\7\110"+
    "\13\0\5\110\5\0\1\110\2\0\5\110\12\0\1\110"+
    "\1\u022f\22\110\13\0\5\110\5\0\1\110\2\0\5\110"+
    "\12\0\1\110\1\u0146\22\110\13\0\5\110\37\0\1\u0230"+
    "\5\0\1\u0231\3\0\1\u0232\66\0\1\u0233\65\0\1\u0234"+
    "\62\0\1\u0235\102\0\1\u0236\71\0\1\u0237\75\0\1\u0238"+
    "\62\0\1\u0239\75\0\1\u023a\31\0\1\u023a\40\0\1\u023b"+
    "\31\0\1\u023b\42\0\1\u023c\5\0\1\u023d\3\0\1\u023e"+
    "\66\0\1\u023f\65\0\1\u0240\67\0\1\u0241\31\0\1\u0241"+
    "\33\0\1\u0242\101\0\1\u0243\74\0\1\u0244\76\0\1\u0245"+
    "\61\0\1\u0246\75\0\1\u0247\73\0\1\u0248\64\0\1\u0249"+
    "\100\0\1\u024a\43\0\1\u024b\74\0\1\u024c\55\0\1\u024d"+
    "\41\0\1\u024e\71\0\1\u024f\3\0\1\u0250\1\0\1\u0251"+
    "\61\0\1\u0252\4\0\1\u0253\1\u0254\1\u0255\63\0\1\u0256"+
    "\66\0\1\u0257\1\0\1\u0258\7\0\1\u0259\62\0\1\u025a"+
    "\1\u025b\74\0\1\u025c\31\0\1\u025c\45\0\1\u025d\60\0"+
    "\1\u025e\53\0\1\u025f\22\0\1\u0260\11\0\1\u0261\21\0"+
    "\1\u0261\32\0\1\u0262\113\0\1\u0263\56\0\1\u0264\31\0"+
    "\1\u0264\33\0\1\u0265\102\0\1\u0266\77\0\1\u0251\57\0"+
    "\1\u0267\67\0\1\u0268\111\0\1\u0269\21\0\1\u0269\32\0"+
    "\1\u026a\103\0\1\u020c\64\0\1\u026b\73\0\1\u026c\127\0"+
    "\1\u026d\31\0\1\u026e\72\0\1\u026f\104\0\1\u0270\62\0"+
    "\1\u0258\106\0\1\u0271\21\0\1\u0271\35\0\1\u0272\73\0"+
    "\1\u0273\70\0\1\u01e3\74\0\1\u0274\42\0\1\u0275\136\0"+
    "\1\u0276\26\0\1\u0277\122\0\1\201\70\0\1\u0278\103\0"+
    "\1\u0279\71\0\1\u0259\60\0\1\u027a\102\0\1\u027b\66\0"+
    "\1\u027c\66\0\1\u027d\55\0\1\u024c\125\0\1\u027e\21\0"+
    "\1\u027e\42\0\1\u027f\36\0\1\u0280\126\0\1\u0281\5\0"+
    "\1\u01eb\1\0\1\u0282\17\0\1\u01eb\35\0\1\u0283\100\0"+
    "\1\u0284\77\0\1\u0285\21\0\1\u0285\36\0\1\u0286\42\0"+
    "\1\u0287\73\0\1\110\2\0\5\110\12\0\10\110\1\u0288"+
    "\13\110\13\0\5\110\5\0\1\110\2\0\5\110\12\0"+
    "\11\110\1\u0289\12\110\13\0\5\110\5\0\1\110\2\0"+
    "\5\110\12\0\11\110\1\u028a\12\110\13\0\5\110\5\0"+
    "\1\110\2\0\5\110\12\0\1\110\1\u028b\22\110\13\0"+
    "\5\110\5\0\1\110\2\0\5\110\12\0\11\110\1\u028c"+
    "\12\110\13\0\5\110\5\0\1\110\2\0\5\110\12\0"+
    "\5\110\1\u028d\16\110\13\0\5\110\5\0\1\110\2\0"+
    "\5\110\12\0\24\110\13\0\3\110\1\u028e\1\110\5\0"+
    "\1\110\2\0\5\110\12\0\1\110\1\u028f\22\110\13\0"+
    "\5\110\5\0\1\110\2\0\5\110\12\0\1\110\1\u0290"+
    "\22\110\13\0\5\110\5\0\1\110\2\0\5\110\12\0"+
    "\5\110\1\u0291\16\110\13\0\5\110\4\0\1\u0275\1\110"+
    "\2\0\5\110\12\0\24\110\13\0\5\110\4\0\1\u0277"+
    "\1\110\2\0\5\110\12\0\24\110\13\0\5\110\5\0"+
    "\1\110\2\0\5\110\12\0\1\110\1\u0292\22\110\13\0"+
    "\5\110\5\0\1\110\2\0\5\110\12\0\11\110\1\u0293"+
    "\12\110\13\0\5\110\4\0\1\u0280\1\110\2\0\5\110"+
    "\12\0\24\110\13\0\5\110\5\0\1\110\2\0\5\110"+
    "\12\0\4\110\1\u0294\17\110\13\0\5\110\5\0\1\110"+
    "\2\0\5\110\12\0\5\110\1\u0295\16\110\13\0\5\110"+
    "\4\0\1\u0287\1\110\2\0\5\110\12\0\24\110\13\0"+
    "\5\110\42\0\1\u0296\62\0\1\u0297\75\0\1\u0298\31\0"+
    "\1\u0298\40\0\1\u0299\31\0\1\u0299\40\0\1\u029a\31\0"+
    "\1\u029a\44\0\1\u029b\64\0\1\u029c\75\0\1\u029d\74\0"+
    "\1\u029e\71\0\1\u029f\75\0\1\u02a0\62\0\1\u02a1\75\0"+
    "\1\u02a2\31\0\1\u02a2\40\0\1\u02a3\31\0\1\u02a3\40\0"+
    "\1\u02a4\31\0\1\u02a4\35\0\1\u02a5\101\0\1\u02a6\100\0"+
    "\1\u02a7\64\0\1\u0114\35\0\1\u02a8\130\0\1\u02a9\34\0"+
    "\1\u02aa\116\0\1\u02ab\72\0\1\u02ac\72\0\1\u02ad\107\0"+
    "\1\u02ae\65\0\1\u02af\64\0\1\u02b0\70\0\1\u02b1\74\0"+
    "\1\u02b2\73\0\1\u02b3\15\0\1\u02b4\66\0\1\u02b5\62\0"+
    "\1\u02b6\31\0\1\u02b6\50\0\1\u02b7\73\0\1\u02b8\21\0"+
    "\1\u02b8\50\0\1\u02b9\21\0\1\u02b9\41\0\1\u02ba\65\0"+
    "\1\u02bb\100\0\1\u02bc\71\0\1\u02bd\67\0\1\u02be\51\0"+
    "\1\u02bf\121\0\1\u02c0\74\0\1\u02c1\1\0\1\u02c2\1\0"+
    "\1\u02c3\17\0\1\u02c2\53\0\1\u02c4\53\0\1\u0193\74\0"+
    "\1\u02c5\42\0\1\u02c6\72\0\1\u02c7\137\0\1\u02c8\113\0"+
    "\1\u02c9\44\0\1\u02c1\66\0\1\u026e\62\0\1\u0194\46\0"+
    "\1\u02ca\72\0\1\u02cb\121\0\1\u02b3\105\0\1\u02c2\21\0"+
    "\1\u02c2\45\0\1\u02cc\67\0\1\u02cd\62\0\1\u02ce\74\0"+
    "\1\u01e3\4\0\1\u01fd\31\0\1\u01ef\36\0\1\u02cf\31\0"+
    "\1\u02cf\42\0\1\u02d0\100\0\1\u02bc\72\0\1\u024f\36\0"+
    "\1\u02d1\115\0\1\u02d2\70\0\1\u02d3\44\0\1\u02d4\132\0"+
    "\1\u02d5\32\0\1\u02d6\126\0\1\u0281\5\0\1\u02d7\21\0"+
    "\1\u02d7\36\0\1\u02d8\72\0\1\u0260\102\0\1\u026e\74\0"+
    "\1\u02d9\21\0\1\u02d9\32\0\1\u02da\72\0\1\u02db\10\0"+
    "\1\u020c\1\u02dc\1\0\1\u02d5\3\0\1\u02dd\1\0\1\u02de"+
    "\16\0\1\u02df\6\0\1\110\2\0\5\110\12\0\12\110"+
    "\1\u0146\11\110\13\0\5\110\4\0\1\u02a8\1\110\2\0"+
    "\5\110\12\0\24\110\13\0\5\110\4\0\1\u02aa\1\110"+
    "\2\0\5\110\12\0\24\110\13\0\5\110\4\0\1\u02c6"+
    "\1\110\2\0\5\110\12\0\24\110\13\0\5\110\4\0"+
    "\1\u02c7\1\110\2\0\5\110\12\0\24\110\13\0\5\110"+
    "\5\0\1\110\2\0\5\110\12\0\11\110\1\u028f\12\110"+
    "\13\0\5\110\5\0\1\110\2\0\5\110\12\0\1\110"+
    "\1\u01bb\22\110\13\0\5\110\4\0\1\u02ca\1\110\2\0"+
    "\5\110\12\0\24\110\13\0\5\110\4\0\1\u02cb\1\110"+
    "\2\0\5\110\12\0\24\110\13\0\5\110\5\0\1\110"+
    "\2\0\5\110\12\0\11\110\1\u02e0\12\110\13\0\5\110"+
    "\4\0\1\u02d4\1\110\2\0\5\110\12\0\24\110\13\0"+
    "\5\110\4\0\1\u02d6\1\110\2\0\5\110\12\0\24\110"+
    "\13\0\5\110\5\0\1\110\2\0\5\110\12\0\15\110"+
    "\1\u028f\6\110\13\0\5\110\5\0\1\110\2\0\5\110"+
    "\12\0\1\110\1\u02e1\22\110\13\0\5\110\33\0\1\u02e2"+
    "\75\0\1\u02e3\74\0\1\u02e4\71\0\1\u02e5\65\0\1\u02e6"+
    "\100\0\1\u02e7\62\0\1\u02e8\101\0\1\u02e9\63\0\1\u02ea"+
    "\75\0\1\u02eb\75\0\1\u02ec\74\0\1\u02ed\71\0\1\u02ee"+
    "\65\0\1\u02ef\73\0\1\u02f0\76\0\1\u02f1\1\u02f2\4\0"+
    "\1\u02f3\4\0\1\u02f4\53\0\1\u02f5\74\0\1\u01f2\1\0"+
    "\1\u02f6\27\0\1\u01f2\42\0\1\u02f7\66\0\1\u02f8\110\0"+
    "\1\u02f9\62\0\1\u02fa\66\0\1\u02fb\31\0\1\u02fb\47\0"+
    "\1\u02fc\73\0\1\u02fd\65\0\1\u02fe\103\0\1\u02ff\61\0"+
    "\1\u0300\71\0\1\u0301\103\0\1\u02ae\62\0\1\u0302\72\0"+
    "\1\u02ae\75\0\1\u0255\115\0\1\u0303\34\0\1\u02ae\77\0"+
    "\1\u0304\31\0\1\u0304\74\0\1\u0305\40\0\1\u0306\72\0"+
    "\1\u0307\67\0\1\u0308\71\0\1\u0309\73\0\1\u030a\65\0"+
    "\1\u030b\75\0\1\u02f2\70\0\1\u030c\1\0\1\u030d\6\0"+
    "\1\u01fe\66\0\1\u01f2\1\0\1\u030e\27\0\1\u01f2\33\0"+
    "\1\u030f\72\0\1\u0310\110\0\1\u01eb\21\0\1\u01eb\34\0"+
    "\1\u01e3\15\0\1\u0311\20\0\1\u01ef\31\0\1\u0312\46\0"+
    "\1\u0206\4\0\1\u0313\26\0\1\u0314\72\0\1\u0315\74\0"+
    "\1\u0316\65\0\1\u0317\31\0\1\u0317\35\0\1\u0318\73\0"+
    "\1\u0319\50\0\1\u031a\26\0\1\u031b\62\0\1\u031c\104\0"+
    "\1\u01f4\3\0\1\u020e\21\0\1\u020e\32\0\1\u025e\14\0"+
    "\1\u031d\62\0\1\u031e\31\0\1\u031e\7\0\1\u031f\122\0"+
    "\1\u0320\101\0\1\u0321\63\0\1\u0322\73\0\1\u0323\31\0"+
    "\1\u0323\33\0\1\u0324\46\0\1\u0206\1\110\2\0\1\110"+
    "\1\u0325\3\110\12\0\11\110\1\u0326\12\110\13\0\5\110"+
    "\4\0\1\u031f\1\110\2\0\5\110\12\0\24\110\13\0"+
    "\5\110\40\0\1\u0327\62\0\1\u0328\101\0\1\u0329\63\0"+
    "\1\u032a\75\0\1\u032b\74\0\1\u032c\31\0\1\u032c\44\0"+
    "\1\u032d\71\0\1\u032e\62\0\1\u032f\101\0\1\u0330\63\0"+
    "\1\u0331\75\0\1\u0332\105\0\1\u0333\21\0\1\u0333\45\0"+
    "\1\u0334\64\0\1\u0335\31\0\1\u0335\35\0\1\u0259\72\0"+
    "\1\u0336\102\0\1\u0337\2\0\1\u0338\1\u0339\21\0\1\u0339"+
    "\45\0\1\u033a\67\0\1\u033b\102\0\1\u033c\52\0\1\u033d"+
    "\110\0\1\u02ae\21\0\1\u02ae\32\0\1\u033e\106\0\1\u033f"+
    "\56\0\1\u0340\77\0\1\u0341\31\0\1\u0341\46\0\1\u0342"+
    "\57\0\1\u0343\104\0\1\u0344\73\0\1\u02bc\67\0\1\u0345"+
    "\64\0\1\u0346\70\0\1\u0347\72\0\1\u0348\74\0\1\u0349"+
    "\75\0\1\u034a\31\0\1\u034a\45\0\1\u034b\60\0\1\u034c"+
    "\55\0\1\u034d\117\0\1\u034e\77\0\1\u0338\1\u0339\21\0"+
    "\1\u0339\50\0\1\u034f\21\0\1\u034f\41\0\1\u02b9\101\0"+
    "\1\u0350\21\0\1\u0350\36\0\1\u0351\100\0\1\u0352\71\0"+
    "\1\u02ae\102\0\1\u02b4\64\0\1\u0353\62\0\1\u0354\77\0"+
    "\1\u030b\74\0\1\u0355\77\0\1\u0356\52\0\1\u0357\73\0"+
    "\1\u0358\75\0\1\u0359\76\0\1\u02d0\2\0\1\u01f4\64\0"+
    "\1\u035a\76\0\1\u035b\74\0\1\u035c\64\0\1\u035d\72\0"+
    "\1\u035e\43\0\1\110\2\0\5\110\12\0\5\110\1\u035f"+
    "\16\110\13\0\5\110\5\0\1\110\2\0\5\110\12\0"+
    "\13\110\1\u0360\10\110\13\0\5\110\35\0\1\u0361\31\0"+
    "\1\u0361\44\0\1\u0362\77\0\1\u0363\21\0\1\u0363\34\0"+
    "\1\u0364\75\0\1\u0365\31\0\1\u0365\44\0\1\u0366\77\0"+
    "\1\u0367\21\0\1\u0367\50\0\1\u0368\21\0\1\u0368\31\0"+
    "\1\u0278\107\0\1\u02bc\61\0\1\u0369\71\0\1\u036a\131\0"+
    "\1\u02ae\41\0\1\u036b\77\0\1\u036c\61\0\1\u036d\71\0"+
    "\1\u036e\72\0\1\u036f\71\0\1\u030d\73\0\1\u02b9\72\0"+
    "\1\u0370\73\0\1\u02bc\104\0\1\u0371\21\0\1\u0371\36\0"+
    "\1\u0372\70\0\1\u0373\77\0\1\u02bc\67\0\1\u0374\104\0"+
    "\1\u02fb\21\0\1\u02fb\73\0\1\u02bc\51\0\1\u0375\113\0"+
    "\1\u0376\35\0\1\u02ae\106\0\1\u0377\52\0\1\u0378\112\0"+
    "\1\u0379\66\0\1\u02c1\1\0\1\u02c2\21\0\1\u02c2\44\0"+
    "\1\u037a\34\0\1\u037b\133\0\1\u02b9\56\0\1\u02ae\75\0"+
    "\1\u037c\106\0\1\u037d\65\0\1\u0354\57\0\1\u02b7\110\0"+
    "\1\u037e\21\0\1\u037e\44\0\1\u034c\100\0\1\u037f\53\0"+
    "\1\u0380\74\0\1\u02d2\66\0\1\u0381\50\0\1\110\2\0"+
    "\5\110\12\0\13\110\1\u0382\10\110\13\0\5\110\4\0"+
    "\1\u037b\1\110\2\0\5\110\12\0\24\110\13\0\5\110"+
    "\32\0\1\u0383\73\0\1\u0384\71\0\1\u0385\100\0\1\u0386"+
    "\100\0\1\u0387\21\0\1\u0387\15\0\1\u0388\111\0\1\u0389"+
    "\102\0\1\u0354\72\0\1\u038a\70\0\1\u038b\72\0\1\u038c"+
    "\76\0\1\u02ae\70\0\1\u038d\77\0\1\u02ae\65\0\1\u038e"+
    "\70\0\1\u038f\64\0\1\u038e\72\0\1\u0390\74\0\1\u0391"+
    "\107\0\1\u02ae\56\0\1\u038e\31\0\1\u038e\54\0\1\u0392"+
    "\62\0\1\u0393\4\0\1\u0394\21\0\1\u0394\53\0\1\u0395"+
    "\51\0\1\u0396\101\0\1\u0397\76\0\1\u02b9\63\0\1\u0307"+
    "\100\0\1\u0398\35\0\1\110\2\0\5\110\12\0\22\110"+
    "\1\u0399\1\110\13\0\5\110\33\0\1\u039a\105\0\1\u039b"+
    "\21\0\1\u039b\35\0\1\u039c\101\0\1\u0378\72\0\1\u0278"+
    "\101\0\1\u024f\63\0\1\u039d\100\0\1\u039e\54\0\1\u039f"+
    "\72\0\1\u03a0\103\0\1\u03a1\62\0\1\u02ae\71\0\1\u03a2"+
    "\104\0\1\u030b\56\0\1\u03a3\46\0\1\u03a4\126\0\1\u0388"+
    "\62\0\1\u03a5\77\0\1\u03a6\31\0\1\u03a6\47\0\1\u03a7"+
    "\62\0\1\u03a8\104\0\1\u02bc\21\0\1\u02bc\6\0\1\u03a4"+
    "\1\110\2\0\5\110\12\0\24\110\13\0\5\110\46\0"+
    "\1\u03a9\21\0\1\u03a9\50\0\1\u03aa\21\0\1\u03aa\35\0"+
    "\1\u03ab\67\0\1\u03ac\101\0\1\u03ad\70\0\1\u024f\31\0"+
    "\1\u024f\37\0\1\u0346\47\0\1\u03ae\127\0\1\u03af\21\0"+
    "\1\u03af\50\0\1\u0394\21\0\1\u0394\41\0\1\u03b0\73\0"+
    "\1\u0396\67\0\1\u03b1\31\0\1\u03b1\35\0\1\u03b2\110\0"+
    "\1\u03b3\56\0\1\u03b4\100\0\1\u03b5\62\0\1\u03b6\106\0"+
    "\1\u0345\21\0\1\u0345\45\0\1\u03b7\67\0\1\u03b8\102\0"+
    "\1\u02b9\64\0\1\u03b9\70\0\1\u0372\76\0\1\u03ba\65\0"+
    "\1\u01e9\67\0\1\u03bb\73\0\1\u02ae\31\0\1\u02ae\50\0"+
    "\1\u03bc\55\0\1\u03bd\72\0\1\u03be\74\0\1\u03bf\106\0"+
    "\1\u03c0\21\0\1\u03c0\50\0\1\u020e\21\0\1\u020e\41\0"+
    "\1\u0372\65\0\1\u03c1\71\0\1\u03c2\74\0\1\u03c3\74\0"+
    "\1\u02b5\31\0\1\u02b5\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[50504];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\10\1\0\2\11\1\1\1\11\1\1\1\11"+
    "\5\1\2\11\3\1\1\11\30\1\10\11\2\1\4\11"+
    "\2\1\1\11\1\1\1\11\4\1\1\11\20\1\13\0"+
    "\1\11\2\0\1\11\3\0\2\11\1\1\2\0\1\11"+
    "\2\1\13\0\1\1\3\0\1\1\1\0\1\11\1\0"+
    "\1\1\4\0\1\1\1\0\2\1\6\0\1\1\13\0"+
    "\1\11\5\0\2\1\12\0\3\11\2\0\34\1\2\11"+
    "\6\0\1\1\1\0\1\11\12\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\1\1\0\2\1\1\11\4\0"+
    "\1\11\13\0\1\1\7\0\1\1\4\0\1\1\2\0"+
    "\1\11\10\0\1\1\25\0\43\1\4\11\3\0\1\11"+
    "\1\0\1\11\4\0\4\11\4\0\1\11\1\0\1\11"+
    "\10\0\1\1\2\0\1\11\1\0\1\1\20\0\1\1"+
    "\5\0\1\11\5\0\1\11\16\0\32\1\20\0\1\11"+
    "\6\0\1\11\1\0\2\11\40\0\1\11\4\0\1\1"+
    "\2\0\1\11\7\0\1\11\11\0\1\11\1\0\1\1"+
    "\1\11\22\1\5\0\2\11\13\0\1\11\1\0\1\11"+
    "\1\0\1\11\4\0\1\11\37\0\1\11\23\0\1\1"+
    "\4\0\1\11\3\0\16\1\5\0\1\11\12\0\2\11"+
    "\6\0\1\11\52\0\1\11\6\0\2\1\6\0\1\11"+
    "\1\0\1\11\12\0\1\11\3\0\1\1\30\0\1\11"+
    "\22\0\2\1\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\53\0\2\1"+
    "\1\0\2\11\2\0\2\11\32\0\1\1\26\0\1\1"+
    "\1\0\1\11\15\0\2\11\31\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[963];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Stack <IElementType> blockStack = new Stack<IElementType>();

  private int afterComment = YYINITIAL;

  private void clearStacks(){
    blockStack.clear();
  }

  private Stack<IElementType> braceCount = new Stack <IElementType>();



  _PowerShellLexer(java.io.Reader in) {
      this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _PowerShellLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1282) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 74: 
          { return EXIT;
          }
        case 116: break;
        case 73: 
          { return COCLT;
          }
        case 117: break;
        case 27: 
          { return IDENT;
          }
        case 118: break;
        case 61: 
          { return TRY;
          }
        case 119: break;
        case 2: 
          { return LPAREN;
          }
        case 120: break;
        case 48: 
          { return GE;
          }
        case 121: break;
        case 56: 
          { return COLT;
          }
        case 122: break;
        case 85: 
          { return WHILE;
          }
        case 123: break;
        case 39: 
          { yybegin(IN_IDENT_DOLLAR); yypushback(1); return DOLLAR;
          }
        case 124: break;
        case 9: 
          { return RCURLY;
          }
        case 125: break;
        case 91: 
          { return ELSEIF;
          }
        case 126: break;
        case 110: 
          { return COICONTAINS;
          }
        case 127: break;
        case 7: 
          { return NUMBER;
          }
        case 128: break;
        case 6: 
          { return COLON;
          }
        case 129: break;
        case 80: 
          { return BREAK;
          }
        case 130: break;
        case 47: 
          { return EQ;
          }
        case 131: break;
        case 108: 
          { return COCONTAINS;
          }
        case 132: break;
        case 60: 
          { return END;
          }
        case 133: break;
        case 70: 
          { return COCGT;
          }
        case 134: break;
        case 67: 
          { return COILT;
          }
        case 135: break;
        case 94: 
          { return COIMATCH;
          }
        case 136: break;
        case 34: 
          { yybegin(YYINITIAL); return EXPSTRING_END;
          }
        case 137: break;
        case 8: 
          { return LCURLY;
          }
        case 138: break;
        case 42: 
          { return ML_COMMENT;
          }
        case 139: break;
        case 92: 
          { return RETURN;
          }
        case 140: break;
        case 4: 
          { return WS;
          }
        case 141: break;
        case 28: 
          { blockStack.push(LPAREN);
                                             yybegin(IN_INNER_IDENT_BLOCK);
                                             return LCURLY;
          }
        case 142: break;
        case 90: 
          { return FILTER;
          }
        case 143: break;
        case 53: 
          { return COIS;
          }
        case 144: break;
        case 114: 
          { return COINOTCONTAINS;
          }
        case 145: break;
        case 111: 
          { return COCNOTMATCH;
          }
        case 146: break;
        case 95: 
          { return COCMATCH;
          }
        case 147: break;
        case 81: 
          { return CATCH;
          }
        case 148: break;
        case 24: 
          { return COMMA;
          }
        case 149: break;
        case 64: 
          { return COIGT;
          }
        case 150: break;
        case 12: 
          { return MULT;
          }
        case 151: break;
        case 77: 
          { return DATA;
          }
        case 152: break;
        case 20: 
          { return MOD;
          }
        case 153: break;
        case 98: 
          { return PROCESS;
          }
        case 154: break;
        case 78: 
          { return COLIKE;
          }
        case 155: break;
        case 11: 
          { return DIV;
          }
        case 156: break;
        case 71: 
          { return COCNE;
          }
        case 157: break;
        case 97: 
          { return CMDLET;
          }
        case 158: break;
        case 19: 
          { return PLUS;
          }
        case 159: break;
        case 10: 
          { yybegin(IN_SINGLE_EXPSTRING); return EXPSTRING_BEGIN;
          }
        case 160: break;
        case 54: 
          { return CONE;
          }
        case 161: break;
        case 72: 
          { return COCLE;
          }
        case 162: break;
        case 38: 
          { return STRING_LITERAL;
          }
        case 163: break;
        case 18: 
          { return LT;
          }
        case 164: break;
        case 93: 
          { return SWITCH;
          }
        case 165: break;
        case 40: 
          { return LASTTOKEN;
          }
        case 166: break;
        case 29: 
          { if (!blockStack.isEmpty()) { IElementType br = blockStack.pop(); }
                                          yybegin(YYINITIAL);
                                          return RCURLY;
          }
        case 167: break;
        case 89: 
          { return COMATCH;
          }
        case 168: break;
        case 55: 
          { return COLE;
          }
        case 169: break;
        case 30: 
          { yypushback(1);
                                             yybegin(IN_SINGLE_EXPSTRING);
          }
        case 170: break;
        case 14: 
          { return DOT;
          }
        case 171: break;
        case 46: 
          { return DO;
          }
        case 172: break;
        case 45: 
          { return IN;
          }
        case 173: break;
        case 25: 
          { return SEMI;
          }
        case 174: break;
        case 36: 
          { /*yybegin(IN_SINGLE_DOT);*/ return IDENT;
          }
        case 175: break;
        case 65: 
          { return COINE;
          }
        case 176: break;
        case 109: 
          { return COINOTMATCH;
          }
        case 177: break;
        case 57: 
          { return COAS;
          }
        case 178: break;
        case 84: 
          { return PARAM;
          }
        case 179: break;
        case 105: 
          { return CONOTMATCH;
          }
        case 180: break;
        case 99: 
          { return CONOTLIKE;
          }
        case 181: break;
        case 69: 
          { return COCGE;
          }
        case 182: break;
        case 66: 
          { return COILE;
          }
        case 183: break;
        case 33: 
          { yybegin(IN_SINGLE_EXPSTRING_DOLLAR);
                                             return DOLLAR;
          }
        case 184: break;
        case 13: 
          { return SL_COMMENT;
          }
        case 185: break;
        case 17: 
          { return GT;
          }
        case 186: break;
        case 23: 
          { return RBRACK;
          }
        case 187: break;
        case 35: 
          { yybegin(IN_SINGLE_DOT);
                                             return IDENT;
          }
        case 188: break;
        case 32: 
          { return EXPSTRING_CONTENT;
          }
        case 189: break;
        case 52: 
          { return COGE;
          }
        case 190: break;
        case 113: 
          { return CONOTCONTAINS;
          }
        case 191: break;
        case 102: 
          { return CONTINUE;
          }
        case 192: break;
        case 100: 
          { return COREPLACE;
          }
        case 193: break;
        case 41: 
          { return EXPSTRING_LITERAL;
          }
        case 194: break;
        case 103: 
          { return COINOTLIKE;
          }
        case 195: break;
        case 31: 
          { blockStack.push(LPAREN);
                                             yybegin(IN_INNER_BLOCK);
                                             return LCURLY;
          }
        case 196: break;
        case 68: 
          { return COCEQ;
          }
        case 197: break;
        case 16: 
          { return ASSIGN;
          }
        case 198: break;
        case 86: 
          { return COILIKE;
          }
        case 199: break;
        case 3: 
          { return NEWLINE;
          }
        case 200: break;
        case 22: 
          { return LBRACK;
          }
        case 201: break;
        case 59: 
          { return ELLIPSIS;
          }
        case 202: break;
        case 51: 
          { return COEQ;
          }
        case 203: break;
        case 63: 
          { return COIGE;
          }
        case 204: break;
        case 104: 
          { return COIREPLACE;
          }
        case 205: break;
        case 101: 
          { return FUNCTION;
          }
        case 206: break;
        case 50: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(IN_SINGLE_IDENT);
                                             return DOT;
          }
        case 207: break;
        case 82: 
          { return THROW;
          }
        case 208: break;
        case 75: 
          { return ELSE;
          }
        case 209: break;
        case 115: 
          { return COCNOTCONTAINS;
          }
        case 210: break;
        case 44: 
          { return IF;
          }
        case 211: break;
        case 96: 
          { return FINALLY;
          }
        case 212: break;
        case 83: 
          { return UNTIL;
          }
        case 213: break;
        case 37: 
          { if (!blockStack.isEmpty()) { IElementType br = blockStack.pop(); }
                                          yybegin(IN_SINGLE_EXPSTRING);
                                          return RCURLY;
          }
        case 214: break;
        case 62: 
          { return COIEQ;
          }
        case 215: break;
        case 106: 
          { return COCNOTLIKE;
          }
        case 216: break;
        case 5: 
          { return MINUS;
          }
        case 217: break;
        case 49: 
          { return LE;
          }
        case 218: break;
        case 58: 
          { return FOR;
          }
        case 219: break;
        case 43: 
          { return RANGE;
          }
        case 220: break;
        case 112: 
          { return COCCONTAINS;
          }
        case 221: break;
        case 26: 
          { return EXP;
          }
        case 222: break;
        case 88: 
          { return COCLIKE;
          }
        case 223: break;
        case 21: 
          { return RPAREN;
          }
        case 224: break;
        case 79: 
          { return BEGIN;
          }
        case 225: break;
        case 76: 
          { return TRAP;
          }
        case 226: break;
        case 15: 
          { return ALIAS;
          }
        case 227: break;
        case 1: 
          { return WRONG;
          }
        case 228: break;
        case 107: 
          { return COCREPLACE;
          }
        case 229: break;
        case 87: 
          { return COISNOT;
          }
        case 230: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
