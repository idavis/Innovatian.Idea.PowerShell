/* The following code was generated by JFlex 1.4.3 on 2/5/11 5:13 PM */

package com.innovatian.idea.powershell.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/5/11 5:13 PM from the specification file
 * <tt>PowerShell.flex</tt>
 */
class _PowerShellLexer implements FlexLexer, PsTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_INNER_BLOCK = 14;
  public static final int NLS_AFTER_LBRACE = 12;
  public static final int YYINITIAL = 0;
  public static final int IN_SINGLE_DOT = 8;
  public static final int IN_SINGLE_QUOTESTRING = 10;
  public static final int IN_SINGLE_IDENT = 6;
  public static final int IN_SINGLE_EXPSTRING_DOLLAR = 2;
  public static final int IN_SINGLE_EXPSTRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\17\22\0\1\3\1\0\1\21"+
    "\1\24\1\14\1\60\1\0\1\7\1\1\1\61\1\23\1\57\1\64"+
    "\1\4\1\25\1\22\1\12\11\10\1\6\1\65\1\56\1\54\1\55"+
    "\2\0\6\11\21\5\1\13\2\5\1\62\1\20\1\63\1\66\1\5"+
    "\1\0\1\34\1\26\1\36\1\43\1\27\1\46\1\30\1\40\1\31"+
    "\1\5\1\35\1\44\1\52\1\32\1\41\1\51\1\67\1\33\1\45"+
    "\1\37\1\42\1\5\1\53\1\47\1\50\1\5\1\15\1\0\1\16"+
    "\54\0\1\5\12\0\1\5\4\0\1\5\5\0\27\5\1\0\37\5"+
    "\1\0\u013f\5\31\0\162\5\4\0\14\5\16\0\5\5\11\0\1\5"+
    "\213\0\1\5\13\0\1\5\1\0\3\5\1\0\1\5\1\0\24\5"+
    "\1\0\54\5\1\0\46\5\1\0\5\5\4\0\202\5\10\0\105\5"+
    "\1\0\46\5\2\0\2\5\6\0\20\5\41\0\46\5\2\0\1\5"+
    "\7\0\47\5\110\0\33\5\5\0\3\5\56\0\32\5\5\0\13\5"+
    "\43\0\2\5\1\0\143\5\1\0\1\5\17\0\2\5\7\0\2\5"+
    "\12\0\3\5\2\0\1\5\20\0\1\5\1\0\36\5\35\0\3\5"+
    "\60\0\46\5\13\0\1\5\u0152\0\66\5\3\0\1\5\22\0\1\5"+
    "\7\0\12\5\43\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\1\5\3\0\4\5\3\0\1\5\36\0\2\5\1\0\3\5"+
    "\16\0\2\5\23\0\6\5\4\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\2\5\1\0\2\5\1\0\2\5\37\0\4\5\1\0\1\5"+
    "\23\0\3\5\20\0\11\5\1\0\3\5\1\0\26\5\1\0\7\5"+
    "\1\0\2\5\1\0\5\5\3\0\1\5\22\0\1\5\17\0\2\5"+
    "\43\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5"+
    "\1\0\5\5\3\0\1\5\36\0\2\5\1\0\3\5\17\0\1\5"+
    "\21\0\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\10\5"+
    "\1\0\3\5\113\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5"+
    "\1\0\5\5\46\0\2\5\43\0\10\5\1\0\3\5\1\0\27\5"+
    "\1\0\12\5\1\0\5\5\3\0\1\5\40\0\1\5\1\0\2\5"+
    "\43\0\10\5\1\0\3\5\1\0\27\5\1\0\20\5\46\0\2\5"+
    "\43\0\22\5\3\0\30\5\1\0\11\5\1\0\1\5\2\0\7\5"+
    "\72\0\60\5\1\0\2\5\14\0\7\5\72\0\2\5\1\0\1\5"+
    "\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5"+
    "\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5"+
    "\1\0\2\5\11\0\1\5\2\0\5\5\1\0\1\5\25\0\2\5"+
    "\42\0\1\5\77\0\10\5\1\0\42\5\35\0\4\5\164\0\42\5"+
    "\1\0\5\5\1\0\2\5\45\0\6\5\112\0\46\5\12\0\51\5"+
    "\7\0\132\5\5\0\104\5\5\0\122\5\6\0\7\5\1\0\77\5"+
    "\1\0\1\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5"+
    "\2\0\47\5\1\0\1\5\1\0\4\5\2\0\37\5\1\0\1\5"+
    "\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\7\5"+
    "\1\0\7\5\1\0\27\5\1\0\37\5\1\0\1\5\1\0\4\5"+
    "\2\0\7\5\1\0\47\5\1\0\23\5\105\0\125\5\14\0\u026c\5"+
    "\2\0\10\5\12\0\32\5\5\0\113\5\25\0\15\5\1\0\4\5"+
    "\16\0\22\5\16\0\22\5\16\0\15\5\1\0\3\5\17\0\64\5"+
    "\43\0\1\5\4\0\1\5\103\0\130\5\10\0\51\5\127\0\35\5"+
    "\63\0\36\5\2\0\5\5\u038b\0\154\5\224\0\234\5\4\0\132\5"+
    "\6\0\26\5\2\0\6\5\2\0\46\5\2\0\6\5\2\0\10\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\37\5\2\0\65\5"+
    "\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5"+
    "\2\0\6\5\4\0\15\5\5\0\3\5\1\0\7\5\164\0\1\5"+
    "\15\0\1\5\202\0\1\5\4\0\1\5\2\0\12\5\1\0\1\5"+
    "\3\0\5\5\6\0\1\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\0\3\5\1\0\7\5\3\0\3\5\5\0\5\5\u0ebb\0\2\5"+
    "\52\0\5\5\5\0\2\5\4\0\126\5\6\0\3\5\1\0\132\5"+
    "\1\0\4\5\5\0\50\5\4\0\136\5\21\0\30\5\70\0\20\5"+
    "\u0200\0\u19b6\5\112\0\u51a6\5\132\0\u048d\5\u0773\0\u2ba4\5\u215c\0\u012e\5"+
    "\2\0\73\5\225\0\7\5\14\0\5\5\5\0\1\5\1\0\12\5"+
    "\1\0\15\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5"+
    "\1\0\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5\50\0\14\5"+
    "\164\0\5\5\1\0\207\5\44\0\32\5\6\0\32\5\13\0\131\5"+
    "\3\0\6\5\2\0\6\5\2\0\6\5\2\0\3\5\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\2\11\1\12\1\13\1\14\1\2\1\15"+
    "\1\16\1\17\1\20\1\21\14\2\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\1\1\2\1\40\1\1\1\41"+
    "\1\42\1\35\2\1\1\43\1\44\1\2\13\0\1\5"+
    "\2\0\1\45\1\46\1\47\5\0\1\50\1\51\7\0"+
    "\1\52\7\0\1\53\1\54\1\55\1\0\1\56\1\0"+
    "\1\57\1\60\6\0\1\61\1\0\1\62\2\0\1\63"+
    "\10\0\1\64\1\0\1\65\1\0\1\11\1\46\1\66"+
    "\2\0\1\67\6\0\1\70\6\0\1\71\4\0\1\72"+
    "\1\73\1\74\1\75\3\0\1\76\1\0\1\77\4\0"+
    "\1\100\1\101\1\102\1\103\4\0\1\104\1\0\1\105"+
    "\3\0\1\46\2\0\1\106\1\107\3\0\1\110\2\0"+
    "\1\111\27\0\1\112\1\0\1\46\1\0\1\113\1\114"+
    "\2\0\1\115\1\0\1\116\1\117\5\0\1\120\1\121"+
    "\5\0\1\122\1\123\13\0\1\124\1\0\1\125\1\126"+
    "\1\127\1\0\1\130\1\0\1\131\7\0\1\132\12\0"+
    "\1\133\1\0\1\134\1\0\1\135\6\0\1\136\1\0"+
    "\1\137\6\0\1\140\1\141\1\0\1\142\1\0\1\143"+
    "\2\0\1\144\1\0\1\145\1\0\1\146\1\0\1\147"+
    "\1\0\1\150\1\151\2\0\1\152\1\153\4\0\1\154"+
    "\1\0\1\155\1\156";

  private static int [] zzUnpackAction() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u0150\0\u0150\0\u01c0\0\u0150\0\u01f8\0\u0150\0\u0150\0\u0230"+
    "\0\u0268\0\u0150\0\u0150\0\u0150\0\u02a0\0\u02d8\0\u0310\0\u0150"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690"+
    "\0\u06c8\0\u0150\0\u0150\0\u0150\0\u0150\0\u0150\0\u0150\0\u0150"+
    "\0\u0150\0\u0150\0\u0700\0\u0150\0\u0738\0\u0770\0\u0150\0\u07a8"+
    "\0\u0150\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\u0150\0\u0380"+
    "\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80"+
    "\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u02d8\0\u0b98\0\u0150\0\u0bd0"+
    "\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0150\0\u0150"+
    "\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0150"+
    "\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u0150"+
    "\0\u0150\0\u0150\0\u1068\0\u10a0\0\u0888\0\u0150\0\u0150\0\u10d8"+
    "\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u0150"+
    "\0\u1298\0\u12d0\0\u0150\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8"+
    "\0\u1420\0\u1458\0\u1490\0\u0150\0\u14c8\0\u0150\0\u1500\0\u0b28"+
    "\0\u1538\0\u0150\0\u1570\0\u15a8\0\u0150\0\u15e0\0\u1618\0\u1650"+
    "\0\u1688\0\u16c0\0\u16f8\0\u0150\0\u1730\0\u1768\0\u17a0\0\u17d8"+
    "\0\u1810\0\u1848\0\u0150\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u0150"+
    "\0\u0150\0\u0150\0\u0150\0\u1960\0\u1998\0\u19d0\0\u0150\0\u1a08"+
    "\0\u0150\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u0150\0\u0150\0\u0150"+
    "\0\u0150\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u0150\0\u1c00\0\u0150"+
    "\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u0150"+
    "\0\u1dc0\0\u1df8\0\u1e30\0\u0150\0\u1e68\0\u1ea0\0\u0150\0\u1ed8"+
    "\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\u2028\0\u2060\0\u2098"+
    "\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u2258"+
    "\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370\0\u23a8\0\u0150\0\u23e0"+
    "\0\u0150\0\u1ce0\0\u0150\0\u0150\0\u2418\0\u2450\0\u0150\0\u2488"+
    "\0\u0150\0\u0150\0\u24c0\0\u24f8\0\u2530\0\u2568\0\u25a0\0\u0150"+
    "\0\u0150\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8\0\u0150\0\u0150"+
    "\0\u26f0\0\u2728\0\u2760\0\u2798\0\u27d0\0\u2808\0\u2840\0\u2878"+
    "\0\u28b0\0\u28e8\0\u2920\0\u0150\0\u2958\0\u0150\0\u0150\0\u0150"+
    "\0\u2990\0\u0150\0\u29c8\0\u0150\0\u2a00\0\u2a38\0\u2a70\0\u2aa8"+
    "\0\u2ae0\0\u2b18\0\u2b50\0\u0150\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30"+
    "\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u0150\0\u2db8"+
    "\0\u0150\0\u2df0\0\u0150\0\u2e28\0\u2e60\0\u2e98\0\u2ed0\0\u2f08"+
    "\0\u2f40\0\u0150\0\u2f78\0\u0150\0\u2fb0\0\u2fe8\0\u3020\0\u3058"+
    "\0\u3090\0\u30c8\0\u0150\0\u0150\0\u3100\0\u0150\0\u3138\0\u0150"+
    "\0\u3170\0\u31a8\0\u0150\0\u31e0\0\u0150\0\u3218\0\u0150\0\u3250"+
    "\0\u0150\0\u3288\0\u0150\0\u0150\0\u32c0\0\u32f8\0\u0150\0\u0150"+
    "\0\u3330\0\u3368\0\u33a0\0\u33d8\0\u0150\0\u3410\0\u0150\0\u0150";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\15\1\11\1\16\1\17"+
    "\1\20\1\11\1\21\1\11\1\22\1\23\1\24\1\13"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\11\1\35\1\11\1\36\2\11\1\37\1\40\2\11"+
    "\1\41\1\42\1\11\1\43\1\44\2\11\1\45\1\11"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\11\5\62\1\63\3\62"+
    "\1\63\1\62\1\63\1\62\1\64\10\62\26\63\13\62"+
    "\1\63\2\65\1\66\11\65\1\67\2\65\1\66\1\70"+
    "\1\71\46\65\5\62\1\72\3\62\1\72\1\62\1\72"+
    "\12\62\26\72\13\62\1\72\25\62\1\73\42\62\2\74"+
    "\1\66\4\74\1\71\7\74\1\66\1\75\47\74\70\0"+
    "\1\11\1\12\1\13\1\14\1\15\1\76\1\16\1\17"+
    "\1\20\1\76\1\21\1\76\1\22\1\23\1\77\1\13"+
    "\1\25\1\26\1\27\1\30\1\31\1\100\26\76\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\76\2\0\2\13\13\0\1\13\1\101"+
    "\76\0\1\102\1\103\1\104\1\105\1\106\1\107\1\0"+
    "\1\110\5\0\1\111\5\0\1\112\25\0\1\20\1\0"+
    "\1\20\65\0\1\20\1\0\1\20\1\113\33\0\1\113"+
    "\22\0\1\14\14\0\1\114\50\0\2\115\1\0\11\115"+
    "\1\0\2\115\1\0\1\116\1\117\46\115\23\0\1\120"+
    "\44\0\2\31\1\0\14\31\1\0\50\31\25\0\1\121"+
    "\71\0\1\122\3\0\1\123\66\0\1\124\11\0\1\125"+
    "\2\0\1\126\52\0\1\127\13\0\1\130\50\0\1\131"+
    "\74\0\1\132\4\0\1\133\61\0\1\134\4\0\1\135"+
    "\61\0\1\136\71\0\1\137\4\0\1\140\101\0\1\141"+
    "\45\0\1\142\7\0\1\143\1\144\60\0\1\145\1\146"+
    "\73\0\1\147\103\0\1\150\67\0\1\151\67\0\1\152"+
    "\20\0\1\63\2\0\4\63\12\0\26\63\13\0\1\63"+
    "\2\65\1\0\11\65\1\0\2\65\1\0\1\70\1\0"+
    "\46\65\2\0\2\66\13\0\1\66\1\153\47\0\70\65"+
    "\5\0\1\72\2\0\4\72\12\0\26\72\13\0\1\72"+
    "\5\0\1\154\3\0\1\154\1\0\1\154\12\0\26\154"+
    "\13\0\1\154\2\74\1\0\4\74\1\0\7\74\1\0"+
    "\1\155\137\74\5\0\1\76\2\0\4\76\12\0\26\76"+
    "\13\0\1\76\2\0\1\13\14\0\1\13\137\0\1\156"+
    "\27\0\1\157\7\0\1\157\57\0\1\160\1\161\1\0"+
    "\1\162\1\163\2\0\1\164\5\0\1\165\1\166\4\0"+
    "\1\167\44\0\1\170\11\0\1\171\55\0\1\172\105\0"+
    "\1\173\51\0\1\174\1\175\1\0\1\176\1\177\2\0"+
    "\1\200\2\0\1\201\2\0\1\202\5\0\1\203\44\0"+
    "\1\204\1\0\1\205\5\0\1\206\64\0\1\207\43\0"+
    "\3\210\13\0\2\210\4\0\1\210\1\0\1\210\4\0"+
    "\1\210\2\0\1\210\23\0\1\14\65\0\70\115\23\211"+
    "\1\0\44\211\25\0\1\212\72\0\1\213\66\0\1\214"+
    "\103\0\1\215\71\0\1\216\53\0\1\217\75\0\1\220"+
    "\67\0\1\221\62\0\1\222\71\0\1\223\13\0\1\224"+
    "\52\0\1\225\73\0\1\226\67\0\1\227\61\0\1\230"+
    "\70\0\1\231\11\0\1\232\56\0\1\233\66\0\1\234"+
    "\76\0\1\235\61\0\1\236\65\0\1\237\40\0\1\66"+
    "\14\0\1\66\55\0\1\154\2\0\4\154\12\0\26\154"+
    "\13\0\1\154\67\0\1\240\27\0\1\241\7\0\1\242"+
    "\57\0\1\243\11\0\1\244\55\0\1\245\101\0\1\246"+
    "\55\0\1\247\1\0\1\250\5\0\1\251\62\0\1\252"+
    "\71\0\1\253\72\0\1\254\101\0\1\255\105\0\1\256"+
    "\27\0\1\257\7\0\1\260\57\0\1\261\11\0\1\262"+
    "\55\0\1\263\101\0\1\264\60\0\1\265\64\0\1\266"+
    "\1\0\1\267\5\0\1\270\64\0\1\271\70\0\1\272"+
    "\71\0\1\273\30\0\23\211\1\274\44\211\31\0\1\275"+
    "\72\0\1\276\62\0\1\277\77\0\1\300\72\0\1\301"+
    "\63\0\1\302\70\0\1\303\101\0\1\304\57\0\1\305"+
    "\57\0\1\306\72\0\1\307\72\0\1\310\64\0\1\311"+
    "\72\0\1\312\66\0\1\313\67\0\1\314\65\0\1\315"+
    "\77\0\1\316\62\0\1\317\101\0\1\320\50\0\1\321"+
    "\72\0\1\322\73\0\1\323\65\0\1\324\66\0\1\325"+
    "\5\0\1\326\5\0\1\327\61\0\1\330\62\0\1\331"+
    "\101\0\1\332\50\0\1\333\74\0\1\334\65\0\1\335"+
    "\71\0\1\336\57\0\1\337\76\0\1\340\31\0\22\211"+
    "\1\341\1\342\44\211\32\0\1\343\72\0\1\344\63\0"+
    "\1\345\71\0\1\346\74\0\1\347\60\0\1\350\111\0"+
    "\1\351\60\0\1\352\61\0\1\353\75\0\1\354\52\0"+
    "\1\355\77\0\1\356\57\0\1\357\112\0\1\360\44\0"+
    "\1\361\76\0\1\362\5\0\1\363\5\0\1\364\61\0"+
    "\1\365\62\0\1\366\57\0\1\367\77\0\1\370\66\0"+
    "\1\371\72\0\1\372\57\0\1\373\72\0\1\374\67\0"+
    "\1\375\71\0\1\376\5\0\1\377\5\0\1\u0100\61\0"+
    "\1\u0101\62\0\1\u0102\64\0\1\u0103\62\0\1\u0104\76\0"+
    "\1\u0105\71\0\1\u0106\75\0\1\u0107\53\0\1\u0108\67\0"+
    "\1\u0109\75\0\1\u010a\73\0\1\u010b\56\0\1\u010c\65\0"+
    "\1\u010d\103\0\1\u010e\63\0\1\u010f\57\0\1\u0110\72\0"+
    "\1\u0111\67\0\1\u0112\67\0\1\u0113\73\0\1\u0114\61\0"+
    "\1\u0115\72\0\1\u0116\71\0\1\u0117\66\0\1\u0118\72\0"+
    "\1\u0119\57\0\1\u011a\72\0\1\u011b\67\0\1\u011c\67\0"+
    "\1\u011d\64\0\1\u011e\76\0\1\u011f\71\0\1\u0120\75\0"+
    "\1\u0121\60\0\1\u0122\73\0\1\u0123\54\0\1\u0124\72\0"+
    "\1\u0125\71\0\1\u0126\66\0\1\u0127\62\0\1\u0128\75\0"+
    "\1\u0129\57\0\1\u012a\76\0\1\u012b\60\0\1\u012c\72\0"+
    "\1\u012d\72\0\1\u012e\71\0\1\u012f\66\0\1\u0130\62\0"+
    "\1\u0131\70\0\1\u0132\64\0\1\u0133\72\0\1\u0134\74\0"+
    "\1\u0135\57\0\1\u0136\76\0\1\u0137\60\0\1\u0138\72\0"+
    "\1\u0139\71\0\1\u013a\73\0\1\u013b\66\0\1\u013c\57\0"+
    "\1\u013d\76\0\1\u013e\60\0\1\u013f\72\0\1\u0140\102\0"+
    "\1\u0141\56\0\1\u0142\73\0\1\u0143\74\0\1\u0144\53\0"+
    "\1\u0145\72\0\1\u0146\73\0\1\u0147\74\0\1\u0148\53\0"+
    "\1\u0149\70\0\1\u014a\66\0\1\u014b\70\0\1\u014c\102\0"+
    "\1\u014d\54\0\1\u014e\102\0\1\u014f\67\0\1\u0150\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13384];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\1\1\10\1\0\2\11\1\1\1\11\1\1"+
    "\2\11\2\1\3\11\3\1\1\11\21\1\11\11\1\1"+
    "\1\11\2\1\1\11\1\1\1\11\5\1\1\11\1\1"+
    "\13\0\1\1\2\0\1\11\2\1\5\0\2\11\7\0"+
    "\1\11\7\0\3\11\1\0\1\1\1\0\2\11\6\0"+
    "\1\1\1\0\1\11\2\0\1\11\10\0\1\11\1\0"+
    "\1\11\1\0\2\1\1\11\2\0\1\11\6\0\1\11"+
    "\6\0\1\11\4\0\4\11\3\0\1\11\1\0\1\11"+
    "\4\0\4\11\4\0\1\11\1\0\1\11\3\0\1\1"+
    "\2\0\1\1\1\11\3\0\1\11\2\0\1\11\27\0"+
    "\1\11\1\0\1\11\1\0\2\11\2\0\1\11\1\0"+
    "\2\11\5\0\2\11\5\0\2\11\13\0\1\11\1\0"+
    "\3\11\1\0\1\11\1\0\1\11\7\0\1\11\12\0"+
    "\1\11\1\0\1\11\1\0\1\11\6\0\1\11\1\0"+
    "\1\11\6\0\2\11\1\0\1\11\1\0\1\11\2\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\2\11\2\0\2\11\4\0\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Stack <IElementType> blockStack = new Stack<IElementType>();

  private int afterComment = YYINITIAL;

  private void clearStacks(){
    blockStack.clear();
  }

  private Stack<IElementType> braceCount = new Stack <IElementType>();



  _PowerShellLexer(java.io.Reader in) {
      this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _PowerShellLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 71: 
          { return EXIT;
          }
        case 111: break;
        case 69: 
          { return COCLT;
          }
        case 112: break;
        case 30: 
          { return IDENT;
          }
        case 113: break;
        case 56: 
          { return TRY;
          }
        case 114: break;
        case 3: 
          { return LPAREN;
          }
        case 115: break;
        case 44: 
          { return GE;
          }
        case 116: break;
        case 53: 
          { return COLT;
          }
        case 117: break;
        case 81: 
          { return WHILE;
          }
        case 118: break;
        case 12: 
          { return RCURLY;
          }
        case 119: break;
        case 86: 
          { return ELSEIF;
          }
        case 120: break;
        case 105: 
          { return COICONTAINS;
          }
        case 121: break;
        case 9: 
          { return NUMBER;
          }
        case 122: break;
        case 7: 
          { return COLON;
          }
        case 123: break;
        case 76: 
          { return BREAK;
          }
        case 124: break;
        case 43: 
          { return EQ;
          }
        case 125: break;
        case 103: 
          { return COCONTAINS;
          }
        case 126: break;
        case 55: 
          { return END;
          }
        case 127: break;
        case 66: 
          { return COCGT;
          }
        case 128: break;
        case 63: 
          { return COILT;
          }
        case 129: break;
        case 90: 
          { return COIMATCH;
          }
        case 130: break;
        case 33: 
          { yybegin(YYINITIAL); return EXPSTRING_END;
          }
        case 131: break;
        case 11: 
          { return LCURLY;
          }
        case 132: break;
        case 38: 
          { return ML_COMMENT;
          }
        case 133: break;
        case 87: 
          { return RETURN;
          }
        case 134: break;
        case 5: 
          { return WS;
          }
        case 135: break;
        case 89: 
          { return FILTER;
          }
        case 136: break;
        case 49: 
          { return COIS;
          }
        case 137: break;
        case 109: 
          { return COINOTCONTAINS;
          }
        case 138: break;
        case 106: 
          { return COCNOTMATCH;
          }
        case 139: break;
        case 91: 
          { return COCMATCH;
          }
        case 140: break;
        case 77: 
          { return CATCH;
          }
        case 141: break;
        case 26: 
          { return COMMA;
          }
        case 142: break;
        case 60: 
          { return COIGT;
          }
        case 143: break;
        case 15: 
          { return MULT;
          }
        case 144: break;
        case 73: 
          { return DATA;
          }
        case 145: break;
        case 22: 
          { return MOD;
          }
        case 146: break;
        case 93: 
          { return PROCESS;
          }
        case 147: break;
        case 74: 
          { return COLIKE;
          }
        case 148: break;
        case 14: 
          { return DIV;
          }
        case 149: break;
        case 67: 
          { return COCNE;
          }
        case 150: break;
        case 21: 
          { return PLUS;
          }
        case 151: break;
        case 13: 
          { yybegin(IN_SINGLE_EXPSTRING); return EXPSTRING_BEGIN;
          }
        case 152: break;
        case 50: 
          { return CONE;
          }
        case 153: break;
        case 68: 
          { return COCLE;
          }
        case 154: break;
        case 20: 
          { return LT;
          }
        case 155: break;
        case 88: 
          { return SWITCH;
          }
        case 156: break;
        case 85: 
          { return COMATCH;
          }
        case 157: break;
        case 52: 
          { return COLE;
          }
        case 158: break;
        case 29: 
          { yypushback(1);
                                             yybegin(IN_SINGLE_EXPSTRING);
          }
        case 159: break;
        case 17: 
          { return DOT;
          }
        case 160: break;
        case 42: 
          { return DO;
          }
        case 161: break;
        case 40: 
          { return IN;
          }
        case 162: break;
        case 10: 
          { return DOLLAR;
          }
        case 163: break;
        case 27: 
          { return SEMI;
          }
        case 164: break;
        case 35: 
          { /*yybegin(IN_SINGLE_DOT);*/ return IDENT;
          }
        case 165: break;
        case 61: 
          { return COINE;
          }
        case 166: break;
        case 104: 
          { return COINOTMATCH;
          }
        case 167: break;
        case 51: 
          { return COAS;
          }
        case 168: break;
        case 80: 
          { return PARAM;
          }
        case 169: break;
        case 8: 
          { yybegin(IN_SINGLE_QUOTESTRING); return EXPSTRING_BEGIN;
          }
        case 170: break;
        case 100: 
          { return CONOTMATCH;
          }
        case 171: break;
        case 94: 
          { return CONOTLIKE;
          }
        case 172: break;
        case 65: 
          { return COCGE;
          }
        case 173: break;
        case 62: 
          { return COILE;
          }
        case 174: break;
        case 32: 
          { yybegin(IN_SINGLE_EXPSTRING_DOLLAR);
                                             return DOLLAR;
          }
        case 175: break;
        case 16: 
          { return SL_COMMENT;
          }
        case 176: break;
        case 19: 
          { return GT;
          }
        case 177: break;
        case 25: 
          { return RBRACK;
          }
        case 178: break;
        case 34: 
          { yybegin(IN_SINGLE_DOT);
                                             return IDENT;
          }
        case 179: break;
        case 1: 
          { return EXPSTRING_CONTENT;
          }
        case 180: break;
        case 48: 
          { return COGE;
          }
        case 181: break;
        case 108: 
          { return CONOTCONTAINS;
          }
        case 182: break;
        case 96: 
          { return CONTINUE;
          }
        case 183: break;
        case 95: 
          { return COREPLACE;
          }
        case 184: break;
        case 37: 
          { return EXPSTRING_LITERAL;
          }
        case 185: break;
        case 98: 
          { return COINOTLIKE;
          }
        case 186: break;
        case 31: 
          { blockStack.push(LPAREN);
                                             yybegin(IN_INNER_BLOCK);
                                             return LCURLY;
          }
        case 187: break;
        case 64: 
          { return COCEQ;
          }
        case 188: break;
        case 18: 
          { return ASSIGN;
          }
        case 189: break;
        case 82: 
          { return COILIKE;
          }
        case 190: break;
        case 4: 
          { return NEWLINE;
          }
        case 191: break;
        case 24: 
          { return LBRACK;
          }
        case 192: break;
        case 54: 
          { return ELLIPSIS;
          }
        case 193: break;
        case 47: 
          { return COEQ;
          }
        case 194: break;
        case 59: 
          { return COIGE;
          }
        case 195: break;
        case 99: 
          { return COIREPLACE;
          }
        case 196: break;
        case 97: 
          { return FUNCTION;
          }
        case 197: break;
        case 46: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(IN_SINGLE_IDENT);
                                             return DOT;
          }
        case 198: break;
        case 78: 
          { return THROW;
          }
        case 199: break;
        case 70: 
          { return ELSE;
          }
        case 200: break;
        case 110: 
          { return COCNOTCONTAINS;
          }
        case 201: break;
        case 41: 
          { return IF;
          }
        case 202: break;
        case 92: 
          { return FINALLY;
          }
        case 203: break;
        case 79: 
          { return UNTIL;
          }
        case 204: break;
        case 36: 
          { if (!blockStack.isEmpty()) { IElementType br = blockStack.pop(); }
                                          yybegin(IN_SINGLE_EXPSTRING);
                                          return RCURLY;
          }
        case 205: break;
        case 58: 
          { return COIEQ;
          }
        case 206: break;
        case 101: 
          { return COCNOTLIKE;
          }
        case 207: break;
        case 6: 
          { return MINUS;
          }
        case 208: break;
        case 45: 
          { return LE;
          }
        case 209: break;
        case 57: 
          { return FOR;
          }
        case 210: break;
        case 39: 
          { return RANGE;
          }
        case 211: break;
        case 107: 
          { return COCCONTAINS;
          }
        case 212: break;
        case 28: 
          { return EXP;
          }
        case 213: break;
        case 84: 
          { return COCLIKE;
          }
        case 214: break;
        case 23: 
          { return RPAREN;
          }
        case 215: break;
        case 75: 
          { return BEGIN;
          }
        case 216: break;
        case 72: 
          { return TRAP;
          }
        case 217: break;
        case 2: 
          { return WRONG;
          }
        case 218: break;
        case 102: 
          { return COCREPLACE;
          }
        case 219: break;
        case 83: 
          { return COISNOT;
          }
        case 220: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
