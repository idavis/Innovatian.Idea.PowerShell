/* The following code was generated by JFlex 1.4.3 on 2/6/11 9:34 AM */

package com.innovatian.idea.powershell.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/6/11 9:34 AM from the specification file
 * <tt>PowerShell.flex</tt>
 */
class _PowerShellLexer implements FlexLexer, PsTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_INNER_BLOCK = 14;
  public static final int NLS_AFTER_LBRACE = 12;
  public static final int YYINITIAL = 0;
  public static final int IN_SINGLE_DOT = 8;
  public static final int IN_SINGLE_QUOTESTRING = 10;
  public static final int IN_SINGLE_IDENT = 6;
  public static final int IN_SINGLE_EXPSTRING_DOLLAR = 2;
  public static final int IN_SINGLE_EXPSTRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\17\22\0\1\3\1\0\1\21"+
    "\1\24\1\14\1\60\1\0\1\7\1\1\1\61\1\23\1\57\1\64"+
    "\1\4\1\25\1\22\1\12\11\10\1\6\1\65\1\56\1\54\1\55"+
    "\2\0\6\11\21\5\1\13\2\5\1\62\1\20\1\63\1\66\1\5"+
    "\1\0\1\34\1\26\1\36\1\43\1\27\1\46\1\30\1\40\1\31"+
    "\1\71\1\35\1\44\1\52\1\32\1\41\1\51\1\67\1\33\1\45"+
    "\1\37\1\42\1\70\1\53\1\47\1\50\1\5\1\15\1\0\1\16"+
    "\54\0\1\5\12\0\1\5\4\0\1\5\5\0\27\5\1\0\37\5"+
    "\1\0\u013f\5\31\0\162\5\4\0\14\5\16\0\5\5\11\0\1\5"+
    "\213\0\1\5\13\0\1\5\1\0\3\5\1\0\1\5\1\0\24\5"+
    "\1\0\54\5\1\0\46\5\1\0\5\5\4\0\202\5\10\0\105\5"+
    "\1\0\46\5\2\0\2\5\6\0\20\5\41\0\46\5\2\0\1\5"+
    "\7\0\47\5\110\0\33\5\5\0\3\5\56\0\32\5\5\0\13\5"+
    "\43\0\2\5\1\0\143\5\1\0\1\5\17\0\2\5\7\0\2\5"+
    "\12\0\3\5\2\0\1\5\20\0\1\5\1\0\36\5\35\0\3\5"+
    "\60\0\46\5\13\0\1\5\u0152\0\66\5\3\0\1\5\22\0\1\5"+
    "\7\0\12\5\43\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\1\5\3\0\4\5\3\0\1\5\36\0\2\5\1\0\3\5"+
    "\16\0\2\5\23\0\6\5\4\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\2\5\1\0\2\5\1\0\2\5\37\0\4\5\1\0\1\5"+
    "\23\0\3\5\20\0\11\5\1\0\3\5\1\0\26\5\1\0\7\5"+
    "\1\0\2\5\1\0\5\5\3\0\1\5\22\0\1\5\17\0\2\5"+
    "\43\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5"+
    "\1\0\5\5\3\0\1\5\36\0\2\5\1\0\3\5\17\0\1\5"+
    "\21\0\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\10\5"+
    "\1\0\3\5\113\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5"+
    "\1\0\5\5\46\0\2\5\43\0\10\5\1\0\3\5\1\0\27\5"+
    "\1\0\12\5\1\0\5\5\3\0\1\5\40\0\1\5\1\0\2\5"+
    "\43\0\10\5\1\0\3\5\1\0\27\5\1\0\20\5\46\0\2\5"+
    "\43\0\22\5\3\0\30\5\1\0\11\5\1\0\1\5\2\0\7\5"+
    "\72\0\60\5\1\0\2\5\14\0\7\5\72\0\2\5\1\0\1\5"+
    "\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5"+
    "\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5"+
    "\1\0\2\5\11\0\1\5\2\0\5\5\1\0\1\5\25\0\2\5"+
    "\42\0\1\5\77\0\10\5\1\0\42\5\35\0\4\5\164\0\42\5"+
    "\1\0\5\5\1\0\2\5\45\0\6\5\112\0\46\5\12\0\51\5"+
    "\7\0\132\5\5\0\104\5\5\0\122\5\6\0\7\5\1\0\77\5"+
    "\1\0\1\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5"+
    "\2\0\47\5\1\0\1\5\1\0\4\5\2\0\37\5\1\0\1\5"+
    "\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\7\5"+
    "\1\0\7\5\1\0\27\5\1\0\37\5\1\0\1\5\1\0\4\5"+
    "\2\0\7\5\1\0\47\5\1\0\23\5\105\0\125\5\14\0\u026c\5"+
    "\2\0\10\5\12\0\32\5\5\0\113\5\25\0\15\5\1\0\4\5"+
    "\16\0\22\5\16\0\22\5\16\0\15\5\1\0\3\5\17\0\64\5"+
    "\43\0\1\5\4\0\1\5\103\0\130\5\10\0\51\5\127\0\35\5"+
    "\63\0\36\5\2\0\5\5\u038b\0\154\5\224\0\234\5\4\0\132\5"+
    "\6\0\26\5\2\0\6\5\2\0\46\5\2\0\6\5\2\0\10\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\37\5\2\0\65\5"+
    "\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5"+
    "\2\0\6\5\4\0\15\5\5\0\3\5\1\0\7\5\164\0\1\5"+
    "\15\0\1\5\202\0\1\5\4\0\1\5\2\0\12\5\1\0\1\5"+
    "\3\0\5\5\6\0\1\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\0\3\5\1\0\7\5\3\0\3\5\5\0\5\5\u0ebb\0\2\5"+
    "\52\0\5\5\5\0\2\5\4\0\126\5\6\0\3\5\1\0\132\5"+
    "\1\0\4\5\5\0\50\5\4\0\136\5\21\0\30\5\70\0\20\5"+
    "\u0200\0\u19b6\5\112\0\u51a6\5\132\0\u048d\5\u0773\0\u2ba4\5\u215c\0\u012e\5"+
    "\2\0\73\5\225\0\7\5\14\0\5\5\5\0\1\5\1\0\12\5"+
    "\1\0\15\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5"+
    "\1\0\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5\50\0\14\5"+
    "\164\0\5\5\1\0\207\5\44\0\32\5\6\0\32\5\13\0\131\5"+
    "\3\0\6\5\2\0\6\5\2\0\6\5\2\0\3\5\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\2\7\1\10\1\11\1\12\1\1\1\13\1\14\1\15"+
    "\1\16\1\17\5\1\1\20\4\1\1\20\11\1\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\1\1\34\1\10\1\35\1\36\1\1"+
    "\1\37\1\36\1\40\1\41\1\34\1\42\1\43\1\1"+
    "\20\42\13\0\1\44\2\0\1\45\1\46\1\4\2\0"+
    "\1\47\1\50\1\51\11\0\1\20\2\0\1\20\3\0"+
    "\1\20\2\0\1\52\1\53\4\0\1\20\1\0\2\20"+
    "\6\0\1\20\13\0\1\54\5\0\2\20\15\0\1\55"+
    "\1\56\1\57\2\0\1\60\33\42\1\61\1\62\6\0"+
    "\1\63\1\0\1\64\2\0\1\65\10\0\1\66\1\0"+
    "\1\67\1\0\1\7\1\50\1\70\2\0\1\71\15\0"+
    "\1\20\7\0\1\20\4\0\1\20\2\0\1\72\10\0"+
    "\1\20\14\0\1\73\14\0\43\42\1\74\1\75\1\76"+
    "\1\77\3\0\1\100\1\0\1\101\4\0\1\102\1\103"+
    "\1\104\1\105\4\0\1\106\1\0\1\107\3\0\1\50"+
    "\2\0\1\110\1\111\21\0\1\20\5\0\1\112\5\0"+
    "\1\113\23\0\32\42\20\0\1\114\1\0\1\50\1\0"+
    "\1\115\1\116\40\0\1\117\4\0\1\20\2\0\1\120"+
    "\7\0\1\121\16\0\1\122\1\0\1\20\1\123\22\42"+
    "\5\0\1\124\1\125\13\0\1\126\1\0\1\127\1\130"+
    "\40\0\1\131\23\0\1\20\4\0\1\132\1\0\1\133"+
    "\6\0\16\42\5\0\1\134\12\0\1\135\4\0\1\136"+
    "\52\0\1\137\2\0\1\140\6\0\2\42\6\0\1\141"+
    "\1\0\1\142\11\0\1\136\31\0\1\143\17\0\1\144"+
    "\6\0\2\42\1\0\1\145\1\0\1\146\2\0\1\147"+
    "\1\0\1\150\1\0\1\151\1\0\1\152\53\0\2\42"+
    "\1\0\1\153\1\154\2\0\1\155\1\156\32\0\1\42"+
    "\26\0\1\42\1\0\1\157\15\0\1\160\1\161\31\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[959];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0122"+
    "\0\u0122\0\u0196\0\u0122\0\u01d0\0\u0122\0\u020a\0\u0244\0\u027e"+
    "\0\u02b8\0\u0122\0\u0122\0\u02f2\0\u032c\0\u0366\0\u0122\0\u03a0"+
    "\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570"+
    "\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706\0\u0740"+
    "\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910"+
    "\0\u0122\0\u0122\0\u0122\0\u0122\0\u0122\0\u0122\0\u0122\0\u0122"+
    "\0\u094a\0\u0122\0\u0984\0\u0122\0\u09be\0\u09f8\0\u0122\0\u0a32"+
    "\0\u0122\0\u0a6c\0\u0aa6\0\u0ae0\0\u0122\0\u03da\0\u0b1a\0\u0b54"+
    "\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24"+
    "\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4"+
    "\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4"+
    "\0\u020a\0\u0122\0\u10fe\0\u1138\0\u0122\0\u0122\0\u1172\0\u032c"+
    "\0\u11ac\0\u0122\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308"+
    "\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u0122\0\u1464\0\u149e"+
    "\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e"+
    "\0\u0122\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u154c\0\u1790\0\u17ca"+
    "\0\u1804\0\u183e\0\u1878\0\u18b2\0\u17ca\0\u18ec\0\u1926\0\u1756"+
    "\0\u1804\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc"+
    "\0\u1af6\0\u1b30\0\u1b6a\0\u0122\0\u1ba4\0\u1bde\0\u1c18\0\u1c52"+
    "\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22"+
    "\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2"+
    "\0\u0122\0\u0122\0\u0122\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114"+
    "\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4"+
    "\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4"+
    "\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684"+
    "\0\u26be\0\u0122\0\u0122\0\u26f8\0\u2732\0\u276c\0\u27a6\0\u27e0"+
    "\0\u281a\0\u2854\0\u288e\0\u0122\0\u28c8\0\u2902\0\u0122\0\u293c"+
    "\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u0122"+
    "\0\u2b0c\0\u0122\0\u2b46\0\u1138\0\u2b80\0\u0122\0\u2bba\0\u2bf4"+
    "\0\u0122\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a"+
    "\0\u2dc4\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a"+
    "\0\u2f94\0\u2fce\0\u3008\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u312a"+
    "\0\u3164\0\u319e\0\u31d8\0\u3212\0\u324c\0\u3286\0\u0122\0\u32c0"+
    "\0\u32fa\0\u3334\0\u336e\0\u33a8\0\u33e2\0\u341c\0\u3456\0\u3490"+
    "\0\u34ca\0\u3504\0\u353e\0\u3578\0\u35b2\0\u35ec\0\u3626\0\u3660"+
    "\0\u15c0\0\u369a\0\u36d4\0\u370e\0\u3748\0\u3782\0\u37bc\0\u37f6"+
    "\0\u3830\0\u386a\0\u38a4\0\u38de\0\u3918\0\u3952\0\u398c\0\u39c6"+
    "\0\u3a00\0\u3a3a\0\u3a74\0\u3aae\0\u3ae8\0\u3b22\0\u3b5c\0\u3b96"+
    "\0\u3bd0\0\u3c0a\0\u3c44\0\u3c7e\0\u3cb8\0\u3cf2\0\u3d2c\0\u3d66"+
    "\0\u3da0\0\u3dda\0\u3e14\0\u3e4e\0\u3e88\0\u3ec2\0\u3efc\0\u3f36"+
    "\0\u3f70\0\u3faa\0\u3fe4\0\u401e\0\u4058\0\u4092\0\u40cc\0\u4106"+
    "\0\u4140\0\u417a\0\u41b4\0\u41ee\0\u0122\0\u0122\0\u0122\0\u0122"+
    "\0\u4228\0\u4262\0\u429c\0\u0122\0\u42d6\0\u0122\0\u4310\0\u434a"+
    "\0\u4384\0\u43be\0\u0122\0\u0122\0\u0122\0\u0122\0\u43f8\0\u4432"+
    "\0\u446c\0\u44a6\0\u0122\0\u44e0\0\u0122\0\u451a\0\u4554\0\u458e"+
    "\0\u45c8\0\u4602\0\u463c\0\u4676\0\u0122\0\u46b0\0\u46ea\0\u4724"+
    "\0\u475e\0\u4798\0\u47d2\0\u480c\0\u4846\0\u4880\0\u48ba\0\u48f4"+
    "\0\u492e\0\u4968\0\u49a2\0\u49dc\0\u4a16\0\u4a50\0\u4a8a\0\u4ac4"+
    "\0\u4afe\0\u4b38\0\u4b72\0\u4bac\0\u0122\0\u4be6\0\u4c20\0\u4c5a"+
    "\0\u4c94\0\u4cce\0\u0122\0\u4d08\0\u4d42\0\u4d7c\0\u4db6\0\u4df0"+
    "\0\u4e2a\0\u4e64\0\u4e9e\0\u4ed8\0\u4f12\0\u4f4c\0\u4f86\0\u4fc0"+
    "\0\u4ffa\0\u5034\0\u506e\0\u50a8\0\u50e2\0\u511c\0\u5156\0\u5190"+
    "\0\u51ca\0\u5204\0\u523e\0\u5278\0\u52b2\0\u52ec\0\u5326\0\u5360"+
    "\0\u539a\0\u53d4\0\u540e\0\u5448\0\u5482\0\u54bc\0\u54f6\0\u5530"+
    "\0\u556a\0\u55a4\0\u55de\0\u5618\0\u5652\0\u568c\0\u56c6\0\u5700"+
    "\0\u573a\0\u5774\0\u57ae\0\u57e8\0\u5822\0\u585c\0\u5896\0\u58d0"+
    "\0\u590a\0\u5944\0\u597e\0\u59b8\0\u59f2\0\u5a2c\0\u5a66\0\u5aa0"+
    "\0\u0122\0\u5ada\0\u0122\0\u45c8\0\u0122\0\u0122\0\u5b14\0\u5b4e"+
    "\0\u5b88\0\u5bc2\0\u5bfc\0\u5c36\0\u5c70\0\u5caa\0\u5ce4\0\u5d1e"+
    "\0\u5d58\0\u5d92\0\u5dcc\0\u5e06\0\u5e40\0\u5e7a\0\u5eb4\0\u5eee"+
    "\0\u5f28\0\u5f62\0\u5f9c\0\u5fd6\0\u6010\0\u604a\0\u6084\0\u60be"+
    "\0\u60f8\0\u6132\0\u616c\0\u61a6\0\u61e0\0\u621a\0\u0122\0\u6254"+
    "\0\u628e\0\u62c8\0\u6302\0\u633c\0\u6376\0\u63b0\0\u0122\0\u63ea"+
    "\0\u6424\0\u645e\0\u6498\0\u64d2\0\u650c\0\u6546\0\u0122\0\u6580"+
    "\0\u65ba\0\u65f4\0\u662e\0\u6668\0\u66a2\0\u66dc\0\u6716\0\u6750"+
    "\0\u678a\0\u67c4\0\u67fe\0\u6838\0\u6872\0\u0122\0\u68ac\0\u68e6"+
    "\0\u0122\0\u6920\0\u695a\0\u6994\0\u69ce\0\u6a08\0\u6a42\0\u6a7c"+
    "\0\u6ab6\0\u6af0\0\u6b2a\0\u6b64\0\u6b9e\0\u6bd8\0\u6c12\0\u6c4c"+
    "\0\u6c86\0\u6cc0\0\u6cfa\0\u6d34\0\u6d6e\0\u6da8\0\u6de2\0\u6e1c"+
    "\0\u0122\0\u0122\0\u6e56\0\u6e90\0\u6eca\0\u6f04\0\u6f3e\0\u6f78"+
    "\0\u6fb2\0\u6fec\0\u7026\0\u7060\0\u709a\0\u0122\0\u70d4\0\u0122"+
    "\0\u0122\0\u710e\0\u7148\0\u7182\0\u71bc\0\u71f6\0\u7230\0\u726a"+
    "\0\u72a4\0\u72de\0\u7318\0\u7352\0\u738c\0\u73c6\0\u7400\0\u743a"+
    "\0\u7474\0\u74ae\0\u74e8\0\u7522\0\u755c\0\u7596\0\u75d0\0\u760a"+
    "\0\u7644\0\u767e\0\u76b8\0\u76f2\0\u772c\0\u7766\0\u77a0\0\u77da"+
    "\0\u4a8a\0\u0122\0\u7814\0\u784e\0\u7888\0\u78c2\0\u78fc\0\u7936"+
    "\0\u7970\0\u79aa\0\u79e4\0\u7a1e\0\u7a58\0\u7a92\0\u7acc\0\u7b06"+
    "\0\u7b40\0\u7b7a\0\u7bb4\0\u7bee\0\u7c28\0\u7c62\0\u7c9c\0\u7cd6"+
    "\0\u7d10\0\u7d4a\0\u0122\0\u7d84\0\u0122\0\u7dbe\0\u7df8\0\u7e32"+
    "\0\u7e6c\0\u7ea6\0\u7ee0\0\u7f1a\0\u7f54\0\u7f8e\0\u7fc8\0\u8002"+
    "\0\u803c\0\u8076\0\u80b0\0\u80ea\0\u8124\0\u815e\0\u8198\0\u81d2"+
    "\0\u820c\0\u8246\0\u8280\0\u82ba\0\u82f4\0\u832e\0\u0122\0\u8368"+
    "\0\u83a2\0\u83dc\0\u8416\0\u8450\0\u848a\0\u84c4\0\u84fe\0\u8538"+
    "\0\u8572\0\u0122\0\u85ac\0\u85e6\0\u8620\0\u865a\0\u0122\0\u8694"+
    "\0\u86ce\0\u8708\0\u8742\0\u877c\0\u87b6\0\u87f0\0\u882a\0\u8864"+
    "\0\u889e\0\u88d8\0\u8912\0\u894c\0\u8986\0\u89c0\0\u89fa\0\u8a34"+
    "\0\u8a6e\0\u8aa8\0\u8ae2\0\u8b1c\0\u8b56\0\u8b90\0\u8bca\0\u8c04"+
    "\0\u8c3e\0\u8c78\0\u8cb2\0\u8cec\0\u8d26\0\u8d60\0\u3212\0\u8d9a"+
    "\0\u8dd4\0\u8e0e\0\u8e48\0\u8e82\0\u8ebc\0\u8ef6\0\u8f30\0\u8f6a"+
    "\0\u8fa4\0\u0122\0\u8fde\0\u9018\0\u0122\0\u9052\0\u908c\0\u90c6"+
    "\0\u9100\0\u913a\0\u9174\0\u91ae\0\u91e8\0\u9222\0\u925c\0\u9296"+
    "\0\u92d0\0\u930a\0\u9344\0\u0122\0\u937e\0\u0122\0\u93b8\0\u93f2"+
    "\0\u942c\0\u9466\0\u94a0\0\u94da\0\u9514\0\u954e\0\u9588\0\u95c2"+
    "\0\u95fc\0\u9636\0\u9670\0\u96aa\0\u96e4\0\u971e\0\u9758\0\u9792"+
    "\0\u97cc\0\u9806\0\u9840\0\u987a\0\u98b4\0\u98ee\0\u9928\0\u9962"+
    "\0\u999c\0\u99d6\0\u9a10\0\u9a4a\0\u9a84\0\u9abe\0\u9af8\0\u9b32"+
    "\0\u9b6c\0\u0122\0\u9ba6\0\u9be0\0\u9c1a\0\u9c54\0\u9c8e\0\u9cc8"+
    "\0\u9d02\0\u9d3c\0\u9d76\0\u9db0\0\u9dea\0\u9e24\0\u9e5e\0\u9e98"+
    "\0\u9ed2\0\u0122\0\u9f0c\0\u9f46\0\u9f80\0\u9fba\0\u9ff4\0\ua02e"+
    "\0\ua068\0\ua0a2\0\ua0dc\0\u0122\0\ua116\0\u0122\0\ua150\0\ua18a"+
    "\0\u0122\0\ua1c4\0\u0122\0\ua1fe\0\u0122\0\ua238\0\u0122\0\ua272"+
    "\0\ua2ac\0\ua2e6\0\ua320\0\ua35a\0\ua394\0\ua3ce\0\ua408\0\ua442"+
    "\0\ua47c\0\ua4b6\0\ua4f0\0\ua52a\0\ua564\0\ua59e\0\ua5d8\0\ua612"+
    "\0\ua64c\0\ua686\0\ua6c0\0\ua6fa\0\ua734\0\ua76e\0\ua7a8\0\ua7e2"+
    "\0\ua81c\0\ua856\0\ua890\0\ua8ca\0\ua904\0\ua93e\0\ua978\0\ua9b2"+
    "\0\ua9ec\0\uaa26\0\uaa60\0\uaa9a\0\uaad4\0\uab0e\0\uab48\0\uab82"+
    "\0\uabbc\0\uabf6\0\uac30\0\uac6a\0\uaca4\0\u0122\0\u0122\0\uacde"+
    "\0\uad18\0\u0122\0\u0122\0\uad52\0\uad8c\0\uadc6\0\uae00\0\uae3a"+
    "\0\uae74\0\uaeae\0\uaee8\0\uaf22\0\uaf5c\0\uaf96\0\uafd0\0\ub00a"+
    "\0\ub044\0\ub07e\0\ub0b8\0\ub0f2\0\ub12c\0\ub166\0\ub1a0\0\ub1da"+
    "\0\ub214\0\ub24e\0\ub288\0\ub2c2\0\ub2fc\0\ub336\0\ub370\0\ub3aa"+
    "\0\ub3e4\0\ub41e\0\ub458\0\ub492\0\ub4cc\0\ub506\0\ub540\0\ub57a"+
    "\0\ub5b4\0\ub5ee\0\ub628\0\ub662\0\ub69c\0\ub6d6\0\ub710\0\ub74a"+
    "\0\ub784\0\ub7be\0\ub7f8\0\ub832\0\ub86c\0\ub8a6\0\u0122\0\ub8e0"+
    "\0\ub91a\0\ub954\0\ub98e\0\ub9c8\0\uba02\0\uba3c\0\uba76\0\ubab0"+
    "\0\ubaea\0\ubb24\0\ubb5e\0\ubb98\0\u0122\0\u0122\0\ubbd2\0\ubc0c"+
    "\0\ubc46\0\ubc80\0\ubcba\0\ubcf4\0\ubd2e\0\ubd68\0\ubda2\0\ubddc"+
    "\0\ube16\0\ube50\0\ube8a\0\ubec4\0\ubefe\0\ubf38\0\ubf72\0\ubfac"+
    "\0\ubfe6\0\uc020\0\uc05a\0\uc094\0\uc0ce\0\uc108\0\uc142";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[959];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\14\1\10\1\15\1\16"+
    "\1\17\1\10\1\20\1\10\1\21\1\22\1\23\1\12"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\2\10"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\2\10\1\71"+
    "\5\72\1\73\3\72\1\73\1\72\1\73\1\72\1\74"+
    "\10\72\26\73\13\72\3\73\2\75\1\76\11\75\1\77"+
    "\2\75\1\76\1\100\1\101\50\75\5\72\1\102\3\72"+
    "\1\102\1\72\1\102\12\72\26\102\13\72\3\102\25\72"+
    "\1\103\44\72\72\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\104\1\15\1\16\1\17\1\104\1\20\1\104\1\21"+
    "\1\22\1\105\1\12\1\24\1\25\1\26\1\27\1\30"+
    "\1\106\1\104\1\107\1\110\1\111\1\112\1\113\1\114"+
    "\1\104\1\115\1\116\1\104\1\117\1\120\2\104\1\121"+
    "\1\122\2\104\1\123\1\124\1\125\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\2\104\1\126\2\0\2\12\13\0\1\12\1\127\100\0"+
    "\1\130\1\131\1\132\1\133\1\134\1\135\1\0\1\136"+
    "\5\0\1\137\5\0\1\140\17\0\2\141\1\0\4\141"+
    "\1\142\7\141\1\0\1\143\51\141\10\0\1\17\1\0"+
    "\1\17\67\0\1\17\1\0\1\17\1\144\33\0\1\144"+
    "\22\0\5\145\1\73\2\145\4\73\1\146\11\145\26\73"+
    "\13\145\3\73\2\0\1\13\14\0\1\147\52\0\2\150"+
    "\1\0\11\150\1\0\2\150\1\0\1\151\1\152\50\150"+
    "\23\0\1\153\46\0\2\30\1\0\14\30\1\0\52\30"+
    "\25\0\1\154\73\0\1\155\3\0\1\156\70\0\1\157"+
    "\1\160\2\0\1\161\5\0\1\162\2\0\1\163\1\0"+
    "\1\164\47\0\1\165\1\0\1\166\1\0\1\167\1\170"+
    "\1\0\1\171\1\0\1\172\1\0\1\166\1\173\1\166"+
    "\1\174\3\0\1\175\1\166\1\176\14\0\1\166\30\0"+
    "\1\177\1\0\1\166\1\200\5\0\1\172\5\0\1\201"+
    "\2\0\1\164\1\202\46\0\1\203\1\0\1\166\2\0"+
    "\1\170\6\0\1\173\24\0\1\166\30\0\1\204\1\0"+
    "\1\166\1\205\10\0\1\206\1\0\1\207\3\0\1\166"+
    "\1\210\15\0\1\211\37\0\1\166\4\0\1\212\1\0"+
    "\1\207\55\0\1\213\74\0\1\214\3\0\1\215\1\216"+
    "\1\0\1\166\1\217\4\0\1\220\16\0\1\221\30\0"+
    "\1\222\3\0\1\223\4\0\1\224\7\0\1\225\52\0"+
    "\1\226\100\0\1\166\1\0\1\227\61\0\1\230\16\0"+
    "\1\231\47\0\1\170\1\0\1\232\2\0\1\233\4\0"+
    "\1\234\75\0\1\166\3\0\1\166\47\0\1\235\1\0"+
    "\1\166\2\0\1\236\1\0\1\166\1\237\1\0\1\240"+
    "\1\241\1\0\1\242\4\0\1\243\1\0\1\244\14\0"+
    "\1\166\32\0\1\245\4\0\2\166\1\0\1\246\1\247"+
    "\1\0\1\166\6\0\1\166\51\0\1\250\1\251\4\0"+
    "\1\252\1\253\2\0\1\166\5\0\1\254\45\0\1\255"+
    "\1\0\1\166\7\0\1\256\7\0\1\166\16\0\1\166"+
    "\34\0\1\257\4\0\1\260\105\0\1\261\71\0\1\262"+
    "\71\0\1\263\56\0\1\264\35\0\1\73\2\0\4\73"+
    "\12\0\26\73\13\0\3\73\2\75\1\0\11\75\1\0"+
    "\2\75\1\0\1\100\1\0\50\75\2\0\2\76\13\0"+
    "\1\76\1\265\51\0\72\75\5\0\1\102\2\0\4\102"+
    "\12\0\26\102\13\0\3\102\5\0\1\266\3\0\1\266"+
    "\1\0\1\266\12\0\26\266\13\0\3\266\5\0\1\104"+
    "\2\0\4\104\12\0\26\104\13\0\3\104\5\0\1\104"+
    "\2\0\4\104\12\0\21\104\1\267\4\104\13\0\3\104"+
    "\5\0\1\104\2\0\4\104\12\0\1\104\1\270\3\104"+
    "\1\271\20\104\13\0\3\104\5\0\1\104\2\0\4\104"+
    "\12\0\4\104\1\272\17\104\1\273\1\104\13\0\3\104"+
    "\5\0\1\104\2\0\4\104\12\0\1\104\1\274\24\104"+
    "\13\0\3\104\5\0\1\104\2\0\4\104\12\0\1\104"+
    "\1\275\24\104\13\0\3\104\5\0\1\104\2\0\4\104"+
    "\12\0\15\104\1\276\10\104\13\0\3\104\5\0\1\104"+
    "\2\0\4\104\12\0\13\104\1\277\2\104\1\300\7\104"+
    "\13\0\3\104\5\0\1\104\2\0\4\104\12\0\1\104"+
    "\1\301\3\104\1\302\20\104\13\0\3\104\5\0\1\104"+
    "\2\0\4\104\12\0\14\104\1\303\11\104\13\0\3\104"+
    "\5\0\1\104\2\0\4\104\12\0\23\104\1\304\2\104"+
    "\13\0\3\104\5\0\1\104\2\0\4\104\12\0\1\104"+
    "\1\305\7\104\1\306\1\104\1\307\1\310\6\104\1\311"+
    "\2\104\13\0\3\104\5\0\1\104\2\0\4\104\12\0"+
    "\13\104\1\312\12\104\13\0\3\104\5\0\1\104\2\0"+
    "\4\104\12\0\13\104\1\313\1\314\11\104\13\0\3\104"+
    "\5\0\1\104\2\0\4\104\12\0\1\104\1\315\11\104"+
    "\1\316\12\104\13\0\3\104\5\0\1\104\2\0\4\104"+
    "\12\0\5\104\1\317\4\104\1\320\13\104\13\0\3\104"+
    "\5\0\1\104\2\0\4\104\12\0\13\104\1\321\12\104"+
    "\13\0\3\104\2\0\1\12\14\0\1\12\141\0\1\322"+
    "\31\0\1\323\7\0\1\323\61\0\1\324\1\325\1\0"+
    "\1\326\1\327\2\0\1\330\5\0\1\331\1\332\4\0"+
    "\1\333\46\0\1\334\11\0\1\335\57\0\1\336\107\0"+
    "\1\337\53\0\1\340\1\341\1\0\1\342\1\343\2\0"+
    "\1\344\2\0\1\345\2\0\1\346\5\0\1\347\46\0"+
    "\1\350\1\0\1\351\5\0\1\352\66\0\1\353\35\0"+
    "\72\141\10\0\3\354\13\0\2\354\4\0\1\354\1\0"+
    "\1\354\4\0\1\354\2\0\1\354\25\0\1\13\67\0"+
    "\72\150\23\355\1\0\46\355\25\0\1\356\74\0\1\357"+
    "\70\0\1\360\105\0\1\361\62\0\1\362\75\0\1\363"+
    "\76\0\1\364\55\0\1\365\17\0\1\366\54\0\1\170"+
    "\1\0\1\367\72\0\1\370\73\0\1\371\74\0\1\166"+
    "\56\0\1\166\20\0\1\166\67\0\1\166\54\0\1\166"+
    "\70\0\1\372\35\0\1\166\46\0\1\166\76\0\1\373"+
    "\66\0\1\166\112\0\1\374\52\0\1\375\73\0\1\376"+
    "\50\0\1\377\1\0\1\u0100\2\0\1\u0101\5\0\1\u0102"+
    "\4\0\1\u0103\50\0\1\166\17\0\1\166\52\0\1\372"+
    "\102\0\1\u0104\77\0\1\u0105\63\0\1\u0106\72\0\1\170"+
    "\64\0\1\u0107\64\0\1\u0108\16\0\1\u0109\1\u010a\46\0"+
    "\1\u010b\1\0\1\166\4\0\1\166\6\0\1\166\3\0"+
    "\1\166\16\0\1\166\30\0\1\u010c\15\0\1\u010d\60\0"+
    "\1\u010e\13\0\1\u010f\54\0\1\u0110\107\0\1\u0111\65\0"+
    "\1\u0112\63\0\1\u0113\71\0\1\u0114\75\0\1\u0115\61\0"+
    "\1\166\12\0\1\u0116\62\0\1\u0117\71\0\1\u0118\4\0"+
    "\1\u0119\71\0\1\166\1\u011a\60\0\1\u011b\4\0\1\u011c"+
    "\63\0\1\u011d\103\0\1\u011e\53\0\1\u011f\106\0\1\u0120"+
    "\1\u011a\3\0\1\u0121\51\0\1\u0122\72\0\1\u0123\11\0"+
    "\1\u0124\60\0\1\u0125\70\0\1\u0126\100\0\1\u0127\63\0"+
    "\1\u0128\107\0\1\u0129\65\0\1\u012a\67\0\1\166\62\0"+
    "\1\u012b\77\0\1\u012c\25\0\1\u012d\32\0\1\u012e\67\0"+
    "\1\u012f\1\0\1\u0130\71\0\1\u0131\42\0\1\76\14\0"+
    "\1\76\57\0\1\266\2\0\4\266\12\0\26\266\13\0"+
    "\3\266\5\0\1\104\2\0\4\104\12\0\23\104\1\u0132"+
    "\2\104\13\0\3\104\5\0\1\104\2\0\4\104\12\0"+
    "\11\104\1\u0133\14\104\13\0\3\104\5\0\1\104\2\0"+
    "\4\104\12\0\13\104\1\u0134\12\104\13\0\3\104\5\0"+
    "\1\104\2\0\4\104\12\0\26\104\13\0\1\104\1\u0135"+
    "\1\104\5\0\1\104\2\0\4\104\12\0\23\104\1\u0136"+
    "\2\104\13\0\3\104\5\0\1\104\2\0\4\104\12\0"+
    "\25\104\1\u0137\13\0\3\104\5\0\1\104\2\0\4\104"+
    "\12\0\4\104\1\u0138\1\104\1\u0139\10\104\1\u013a\4\104"+
    "\1\u013b\1\104\13\0\3\104\5\0\1\104\2\0\4\104"+
    "\12\0\15\104\1\u013c\10\104\13\0\3\104\5\0\1\104"+
    "\2\0\4\104\12\0\4\104\1\u013d\16\104\1\u013e\1\u013f"+
    "\1\104\13\0\3\104\5\0\1\104\2\0\4\104\12\0"+
    "\1\104\1\u0140\24\104\13\0\3\104\5\0\1\104\2\0"+
    "\4\104\12\0\1\104\1\u0141\15\104\1\u0142\6\104\13\0"+
    "\3\104\5\0\1\104\2\0\4\104\12\0\6\104\1\u0143"+
    "\17\104\13\0\3\104\5\0\1\104\2\0\4\104\12\0"+
    "\11\104\1\u0144\14\104\13\0\3\104\5\0\1\104\2\0"+
    "\4\104\12\0\15\104\1\u0145\10\104\13\0\3\104\5\0"+
    "\1\104\2\0\4\104\12\0\11\104\1\u0146\4\104\1\u0147"+
    "\7\104\13\0\3\104\5\0\1\104\2\0\4\104\12\0"+
    "\6\104\1\u0148\4\104\1\u0149\12\104\13\0\3\104\5\0"+
    "\1\104\2\0\4\104\12\0\5\104\1\u014a\20\104\13\0"+
    "\3\104\5\0\1\104\2\0\4\104\12\0\17\104\1\u014b"+
    "\6\104\13\0\3\104\5\0\1\104\2\0\4\104\12\0"+
    "\16\104\1\u014c\7\104\13\0\3\104\5\0\1\104\2\0"+
    "\4\104\12\0\5\104\1\u014d\20\104\13\0\3\104\5\0"+
    "\1\104\2\0\4\104\12\0\23\104\1\u014e\2\104\13\0"+
    "\3\104\5\0\1\104\2\0\4\104\12\0\17\104\1\u014f"+
    "\6\104\13\0\3\104\5\0\1\104\2\0\4\104\12\0"+
    "\6\104\1\u0150\17\104\13\0\3\104\5\0\1\104\2\0"+
    "\4\104\12\0\26\104\13\0\1\104\1\u0151\1\104\5\0"+
    "\1\104\2\0\4\104\12\0\3\104\1\u0152\22\104\13\0"+
    "\3\104\5\0\1\104\2\0\4\104\12\0\1\104\1\u0153"+
    "\24\104\13\0\3\104\5\0\1\104\2\0\4\104\12\0"+
    "\3\104\1\u0154\22\104\13\0\3\104\67\0\1\u0155\31\0"+
    "\1\u0156\7\0\1\u0157\61\0\1\u0158\11\0\1\u0159\57\0"+
    "\1\u015a\103\0\1\u015b\57\0\1\u015c\1\0\1\u015d\5\0"+
    "\1\u015e\64\0\1\u015f\73\0\1\u0160\74\0\1\u0161\103\0"+
    "\1\u0162\107\0\1\u0163\31\0\1\u0164\7\0\1\u0165\61\0"+
    "\1\u0166\11\0\1\u0167\57\0\1\u0168\103\0\1\u0169\62\0"+
    "\1\u016a\66\0\1\u016b\1\0\1\u016c\5\0\1\u016d\66\0"+
    "\1\u016e\72\0\1\u016f\73\0\1\u0170\32\0\23\355\1\u0171"+
    "\46\355\31\0\1\u0172\74\0\1\u0173\102\0\1\u0111\65\0"+
    "\1\166\57\0\1\u0174\101\0\1\u0175\73\0\1\u0176\75\0"+
    "\1\u011a\30\0\1\u0177\127\0\1\u0178\100\0\1\166\51\0"+
    "\1\166\101\0\1\u0179\71\0\1\u017a\34\0\1\u017b\121\0"+
    "\1\u017c\100\0\1\u017d\70\0\1\u017e\66\0\1\u017f\1\0"+
    "\1\u0180\1\u0181\70\0\1\u0182\61\0\1\173\74\0\1\166"+
    "\41\0\1\u0183\123\0\1\u0184\72\0\1\u0185\30\0\1\u0186"+
    "\51\0\1\u0187\72\0\1\u0188\54\0\1\u0189\41\0\1\u018a"+
    "\124\0\1\u018b\70\0\1\u018c\12\0\1\u018d\61\0\1\u018e"+
    "\57\0\1\166\101\0\1\u018f\36\0\1\u0190\116\0\1\u0191"+
    "\74\0\1\u0192\103\0\1\166\57\0\1\u0193\41\0\1\u0194"+
    "\114\0\1\u0195\132\0\1\166\34\0\1\u0196\107\0\1\u0197"+
    "\57\0\1\u010c\103\0\1\u0198\47\0\1\372\73\0\1\u010d"+
    "\77\0\1\u0199\66\0\1\u019a\74\0\1\u019b\61\0\1\u019c"+
    "\22\0\1\u019d\55\0\1\u019e\71\0\1\u019f\67\0\1\u01a0"+
    "\41\0\1\u01a1\36\0\1\166\66\0\1\u0129\76\0\1\u01a2"+
    "\56\0\1\u01a3\66\0\1\u0187\101\0\1\u01a4\65\0\1\u01a5"+
    "\102\0\1\u01a6\57\0\1\u018b\44\0\1\104\2\0\4\104"+
    "\12\0\13\104\1\u01a7\12\104\13\0\3\104\4\0\1\u0177"+
    "\1\104\2\0\4\104\12\0\26\104\13\0\3\104\5\0"+
    "\1\104\2\0\4\104\12\0\14\104\1\u01a8\11\104\13\0"+
    "\3\104\5\0\1\104\2\0\4\104\12\0\13\104\1\u01a9"+
    "\12\104\13\0\3\104\5\0\1\104\2\0\4\104\12\0"+
    "\13\104\1\u01aa\12\104\13\0\3\104\4\0\1\u017b\1\104"+
    "\2\0\4\104\12\0\26\104\13\0\3\104\5\0\1\104"+
    "\2\0\4\104\12\0\6\104\1\u01ab\17\104\13\0\3\104"+
    "\5\0\1\104\2\0\4\104\12\0\15\104\1\u01ac\10\104"+
    "\13\0\3\104\5\0\1\104\2\0\4\104\12\0\11\104"+
    "\1\u01ad\1\104\1\u01ae\1\u01af\11\104\13\0\3\104\5\0"+
    "\1\104\2\0\4\104\12\0\13\104\1\u01b0\12\104\13\0"+
    "\3\104\4\0\1\u0183\1\104\2\0\4\104\12\0\26\104"+
    "\13\0\3\104\5\0\1\104\2\0\4\104\12\0\26\104"+
    "\13\0\1\104\1\u01b1\1\104\5\0\1\104\2\0\4\104"+
    "\12\0\22\104\1\u01b2\3\104\13\0\3\104\5\0\1\104"+
    "\2\0\4\104\12\0\23\104\1\u01b3\2\104\13\0\3\104"+
    "\5\0\1\104\2\0\4\104\12\0\6\104\1\u01b4\17\104"+
    "\13\0\3\104\4\0\1\u018a\1\104\2\0\4\104\12\0"+
    "\26\104\13\0\3\104\5\0\1\104\2\0\4\104\12\0"+
    "\11\104\1\u01b5\14\104\13\0\3\104\5\0\1\104\2\0"+
    "\4\104\12\0\10\104\1\u01b6\15\104\13\0\3\104\4\0"+
    "\1\u0190\1\104\2\0\4\104\12\0\26\104\13\0\3\104"+
    "\5\0\1\104\2\0\4\104\12\0\6\104\1\u01b7\17\104"+
    "\13\0\3\104\4\0\1\u0194\1\104\2\0\4\104\12\0"+
    "\26\104\13\0\3\104\5\0\1\104\2\0\4\104\12\0"+
    "\1\104\1\u01b8\24\104\13\0\3\104\5\0\1\104\2\0"+
    "\4\104\12\0\5\104\1\u01b9\20\104\13\0\3\104\5\0"+
    "\1\104\2\0\4\104\12\0\23\104\1\u01ba\2\104\13\0"+
    "\3\104\5\0\1\104\2\0\4\104\12\0\11\104\1\u0141"+
    "\14\104\13\0\3\104\5\0\1\104\2\0\4\104\12\0"+
    "\23\104\1\u01bb\2\104\13\0\3\104\5\0\1\104\2\0"+
    "\4\104\12\0\3\104\1\u0142\22\104\13\0\3\104\5\0"+
    "\1\104\2\0\4\104\12\0\1\104\1\u01bc\22\104\1\u01bd"+
    "\1\104\13\0\3\104\4\0\1\u01a1\1\104\2\0\4\104"+
    "\12\0\26\104\13\0\3\104\5\0\1\104\2\0\4\104"+
    "\12\0\12\104\1\u014e\13\104\13\0\3\104\5\0\1\104"+
    "\2\0\4\104\12\0\17\104\1\u01be\6\104\13\0\3\104"+
    "\5\0\1\104\2\0\4\104\12\0\1\104\1\u01b2\24\104"+
    "\13\0\3\104\5\0\1\104\2\0\4\104\12\0\11\104"+
    "\1\u01bf\14\104\13\0\3\104\5\0\1\104\2\0\4\104"+
    "\12\0\5\104\1\u01c0\20\104\13\0\3\104\5\0\1\104"+
    "\2\0\4\104\12\0\4\104\1\u01b5\21\104\13\0\3\104"+
    "\37\0\1\u01c1\103\0\1\u01c2\52\0\1\u01c3\74\0\1\u01c4"+
    "\75\0\1\u01c5\67\0\1\u01c6\70\0\1\u01c7\5\0\1\u01c8"+
    "\5\0\1\u01c9\63\0\1\u01ca\64\0\1\u01cb\103\0\1\u01cc"+
    "\52\0\1\u01cd\76\0\1\u01ce\67\0\1\u01cf\73\0\1\u01d0"+
    "\61\0\1\u01d1\100\0\1\u01d2\33\0\22\355\1\u01d3\1\u01d4"+
    "\46\355\32\0\1\u01d5\74\0\1\u01d6\65\0\1\u01d7\73\0"+
    "\1\u01d8\65\0\1\u01d9\1\0\1\u01da\2\0\1\u01db\1\0"+
    "\1\u01dc\1\u01dd\1\u01de\1\0\1\u01df\1\u01e0\1\u01e1\1\u01e2"+
    "\3\0\1\u01e3\1\u01e4\1\u01e5\14\0\1\u01e6\52\0\1\u010c"+
    "\55\0\1\u01e7\67\0\1\u01e8\67\0\1\u01da\2\0\1\u01e9"+
    "\2\0\1\u01ea\1\0\1\u01eb\3\0\1\u01e2\3\0\1\u01ec"+
    "\16\0\1\u01e6\53\0\1\u01ed\23\0\1\u01ee\120\0\1\u01ef"+
    "\72\0\1\u01f0\101\0\1\u01f1\77\0\1\u01f2\107\0\1\u01f3"+
    "\37\0\1\u01f4\1\0\1\u01f5\10\0\1\u01f6\1\u01e4\57\0"+
    "\1\u01f7\62\0\1\u01f8\67\0\1\u01f9\46\0\1\u01fa\121\0"+
    "\1\u01fb\70\0\1\u01fc\77\0\1\u01eb\34\0\1\u01fd\114\0"+
    "\1\u01fe\115\0\1\u01ff\57\0\1\u0200\62\0\1\u0201\5\0"+
    "\1\u0202\2\0\1\u0203\1\0\1\u0204\1\u0205\2\0\1\u0206"+
    "\64\0\1\u0207\64\0\1\u0208\61\0\1\u0209\1\0\1\u01da"+
    "\2\0\1\u01db\1\0\1\u01f4\1\u01dd\3\0\1\u01e0\1\u01e1"+
    "\1\u01e2\3\0\1\u020a\16\0\1\u01e6\37\0\1\u020b\72\0"+
    "\1\u020c\36\0\1\u020d\114\0\1\u020e\100\0\1\u020f\77\0"+
    "\1\u0210\54\0\1\u0211\76\0\1\u0212\71\0\1\u0213\74\0"+
    "\1\u0214\61\0\1\u0215\114\0\1\u0216\63\0\1\u01e1\67\0"+
    "\1\u0217\66\0\1\166\61\0\1\u0218\71\0\1\u010c\71\0"+
    "\1\u0219\47\0\1\104\2\0\4\104\12\0\5\104\1\u021a"+
    "\20\104\13\0\3\104\5\0\1\104\2\0\4\104\12\0"+
    "\23\104\1\u0141\2\104\13\0\3\104\5\0\1\104\2\0"+
    "\4\104\12\0\7\104\1\u021b\16\104\13\0\3\104\5\0"+
    "\1\104\2\0\4\104\12\0\5\104\1\u021c\20\104\13\0"+
    "\3\104\5\0\1\104\2\0\4\104\12\0\24\104\1\u0151"+
    "\1\104\13\0\3\104\4\0\1\u01ee\1\104\2\0\4\104"+
    "\12\0\26\104\13\0\3\104\5\0\1\104\2\0\4\104"+
    "\12\0\6\104\1\u021d\17\104\13\0\3\104\5\0\1\104"+
    "\2\0\4\104\12\0\16\104\1\u021e\7\104\13\0\3\104"+
    "\5\0\1\104\2\0\4\104\12\0\24\104\1\u021f\1\104"+
    "\13\0\3\104\5\0\1\104\2\0\4\104\12\0\26\104"+
    "\13\0\1\104\1\u0220\1\104\5\0\1\104\2\0\4\104"+
    "\12\0\1\104\1\u0221\24\104\13\0\3\104\4\0\1\u01fa"+
    "\1\104\2\0\4\104\12\0\26\104\13\0\3\104\5\0"+
    "\1\104\2\0\4\104\12\0\6\104\1\u0153\17\104\13\0"+
    "\3\104\5\0\1\104\2\0\4\104\12\0\5\104\1\u0222"+
    "\20\104\13\0\3\104\4\0\1\u01fd\1\104\2\0\4\104"+
    "\12\0\26\104\13\0\3\104\5\0\1\104\2\0\4\104"+
    "\12\0\1\104\1\u0223\24\104\13\0\3\104\5\0\1\104"+
    "\2\0\4\104\12\0\11\104\1\u0224\14\104\13\0\3\104"+
    "\5\0\1\104\2\0\4\104\12\0\10\104\1\u0225\15\104"+
    "\13\0\3\104\5\0\1\104\2\0\4\104\12\0\11\104"+
    "\1\u0226\14\104\13\0\3\104\4\0\1\u020d\1\104\2\0"+
    "\4\104\12\0\26\104\13\0\3\104\5\0\1\104\2\0"+
    "\4\104\12\0\1\104\1\u0227\24\104\13\0\3\104\5\0"+
    "\1\104\2\0\4\104\12\0\6\104\1\u0228\17\104\13\0"+
    "\3\104\5\0\1\104\2\0\4\104\12\0\6\104\1\u0229"+
    "\17\104\13\0\3\104\5\0\1\104\2\0\4\104\12\0"+
    "\14\104\1\u022a\11\104\13\0\3\104\5\0\1\104\2\0"+
    "\4\104\12\0\1\104\1\u022b\24\104\13\0\3\104\5\0"+
    "\1\104\2\0\4\104\12\0\1\104\1\u0141\24\104\13\0"+
    "\3\104\36\0\1\u022c\5\0\1\u022d\5\0\1\u022e\63\0"+
    "\1\u022f\64\0\1\u0230\61\0\1\u0231\101\0\1\u0232\70\0"+
    "\1\u0233\74\0\1\u0234\61\0\1\u0235\74\0\1\u0236\71\0"+
    "\1\u0237\73\0\1\u0238\5\0\1\u0239\5\0\1\u023a\63\0"+
    "\1\u023b\64\0\1\u023c\66\0\1\u023d\64\0\1\u023e\100\0"+
    "\1\u023f\73\0\1\u0240\77\0\1\u0241\62\0\1\u0242\101\0"+
    "\1\u0243\20\0\1\u0244\40\0\1\u0245\70\0\1\u0246\3\0"+
    "\1\u0247\1\0\1\u0248\60\0\1\u0249\4\0\1\u024a\1\u024b"+
    "\1\u024c\62\0\1\u024d\65\0\1\u024e\1\0\1\u024f\7\0"+
    "\1\u0250\61\0\1\u0251\1\u0252\73\0\1\u0253\76\0\1\u0254"+
    "\57\0\1\u0255\75\0\1\u0256\11\0\1\u0257\1\u0258\52\0"+
    "\1\u0259\114\0\1\u025a\53\0\1\u025b\64\0\1\u025c\101\0"+
    "\1\u025d\76\0\1\u0248\56\0\1\u025e\66\0\1\u025f\110\0"+
    "\1\u0260\53\0\1\u0261\102\0\1\u0202\63\0\1\u0262\72\0"+
    "\1\u0263\126\0\1\u0264\30\0\1\u0265\71\0\1\u0266\103\0"+
    "\1\u0267\61\0\1\u024f\105\0\1\u0268\56\0\1\u0269\72\0"+
    "\1\u026a\67\0\1\u01da\73\0\1\u026b\42\0\1\u026c\136\0"+
    "\1\u026d\24\0\1\u026e\120\0\1\172\100\0\1\u026f\70\0"+
    "\1\u0250\57\0\1\u0270\101\0\1\u0271\63\0\1\u0272\73\0"+
    "\1\u0273\65\0\1\u0274\111\0\1\u0243\67\0\1\u0275\63\0"+
    "\1\u0276\36\0\1\u0277\124\0\1\u0278\5\0\1\u01e2\3\0"+
    "\1\u0279\52\0\1\u027a\77\0\1\u027b\75\0\1\u027c\60\0"+
    "\1\u027d\74\0\1\u027e\72\0\1\u027f\63\0\1\u0280\105\0"+
    "\1\u0281\57\0\1\u0282\42\0\1\u0283\72\0\1\104\2\0"+
    "\4\104\12\0\11\104\1\u0284\14\104\13\0\3\104\5\0"+
    "\1\104\2\0\4\104\12\0\1\104\1\u0285\24\104\13\0"+
    "\3\104\5\0\1\104\2\0\4\104\12\0\11\104\1\u0286"+
    "\14\104\13\0\3\104\5\0\1\104\2\0\4\104\12\0"+
    "\5\104\1\u0287\20\104\13\0\3\104\5\0\1\104\2\0"+
    "\4\104\12\0\26\104\13\0\1\104\1\u0288\1\104\5\0"+
    "\1\104\2\0\4\104\12\0\1\104\1\u0289\24\104\13\0"+
    "\3\104\5\0\1\104\2\0\4\104\12\0\1\104\1\u028a"+
    "\24\104\13\0\3\104\5\0\1\104\2\0\4\104\12\0"+
    "\5\104\1\u028b\20\104\13\0\3\104\4\0\1\u026c\1\104"+
    "\2\0\4\104\12\0\26\104\13\0\3\104\4\0\1\u026e"+
    "\1\104\2\0\4\104\12\0\26\104\13\0\3\104\5\0"+
    "\1\104\2\0\4\104\12\0\1\104\1\u028c\24\104\13\0"+
    "\3\104\5\0\1\104\2\0\4\104\12\0\11\104\1\u028d"+
    "\14\104\13\0\3\104\4\0\1\u0277\1\104\2\0\4\104"+
    "\12\0\26\104\13\0\3\104\5\0\1\104\2\0\4\104"+
    "\12\0\4\104\1\u028e\21\104\13\0\3\104\5\0\1\104"+
    "\2\0\4\104\12\0\10\104\1\u028f\15\104\13\0\3\104"+
    "\5\0\1\104\2\0\4\104\12\0\11\104\1\u0290\14\104"+
    "\13\0\3\104\5\0\1\104\2\0\4\104\12\0\5\104"+
    "\1\u0291\20\104\13\0\3\104\4\0\1\u0283\1\104\2\0"+
    "\4\104\12\0\26\104\13\0\3\104\41\0\1\u0292\61\0"+
    "\1\u0293\74\0\1\u0294\71\0\1\u0295\71\0\1\u0296\75\0"+
    "\1\u0297\63\0\1\u0298\74\0\1\u0299\73\0\1\u029a\70\0"+
    "\1\u029b\74\0\1\u029c\61\0\1\u029d\74\0\1\u029e\71\0"+
    "\1\u029f\71\0\1\u02a0\66\0\1\u02a1\100\0\1\u02a2\35\0"+
    "\1\u02a3\114\0\1\u02a4\71\0\1\u02a5\71\0\1\u02a6\106\0"+
    "\1\u02a7\64\0\1\u02a8\63\0\1\u02a9\67\0\1\u02aa\73\0"+
    "\1\u02ab\72\0\1\u02ac\17\0\1\u02ad\63\0\1\u02ae\61\0"+
    "\1\u02af\101\0\1\u02b0\72\0\1\u02b1\71\0\1\u02b2\62\0"+
    "\1\u02b3\64\0\1\u02b4\77\0\1\u02b5\70\0\1\u02b6\66\0"+
    "\1\u02b7\77\0\1\u02b8\73\0\1\u02b9\1\0\1\u02ba\3\0"+
    "\1\u02bb\67\0\1\u02bc\74\0\1\u02bd\50\0\1\u018a\73\0"+
    "\1\u02be\42\0\1\u02bf\71\0\1\u02c0\137\0\1\u02c1\110\0"+
    "\1\u02c2\43\0\1\u02b9\65\0\1\u0265\61\0\1\u018b\46\0"+
    "\1\u02c3\71\0\1\u02c4\117\0\1\u02ac\104\0\1\u02ba\66\0"+
    "\1\u02c5\66\0\1\u02c6\61\0\1\u02c7\73\0\1\u01da\4\0"+
    "\1\u01f4\31\0\1\u01e6\35\0\1\u02c8\73\0\1\u02c9\77\0"+
    "\1\u0246\73\0\1\u02ca\56\0\1\u02cb\102\0\1\u02b5\56\0"+
    "\1\u02cc\44\0\1\u02cd\130\0\1\u02ce\32\0\1\u02cf\124\0"+
    "\1\u0278\5\0\1\u02d0\57\0\1\u02d1\71\0\1\u0256\101\0"+
    "\1\u0265\76\0\1\u02d2\61\0\1\u010c\35\0\1\u02d3\126\0"+
    "\1\u02d4\75\0\1\u02d5\53\0\1\u02d6\71\0\1\u02d7\10\0"+
    "\1\u0202\1\u02d8\1\0\1\u02ce\5\0\1\u02d9\1\0\1\u02da"+
    "\14\0\1\u02db\5\0\1\u02a3\1\104\2\0\4\104\12\0"+
    "\26\104\13\0\3\104\4\0\1\u02bf\1\104\2\0\4\104"+
    "\12\0\26\104\13\0\3\104\4\0\1\u02c0\1\104\2\0"+
    "\4\104\12\0\26\104\13\0\3\104\5\0\1\104\2\0"+
    "\4\104\12\0\11\104\1\u0289\14\104\13\0\3\104\5\0"+
    "\1\104\2\0\4\104\12\0\1\104\1\u01b5\24\104\13\0"+
    "\3\104\4\0\1\u02c3\1\104\2\0\4\104\12\0\26\104"+
    "\13\0\3\104\4\0\1\u02c4\1\104\2\0\4\104\12\0"+
    "\26\104\13\0\3\104\5\0\1\104\2\0\4\104\12\0"+
    "\11\104\1\u02dc\14\104\13\0\3\104\4\0\1\u02cd\1\104"+
    "\2\0\4\104\12\0\26\104\13\0\3\104\4\0\1\u02cf"+
    "\1\104\2\0\4\104\12\0\26\104\13\0\3\104\5\0"+
    "\1\104\2\0\4\104\12\0\15\104\1\u0289\10\104\13\0"+
    "\3\104\5\0\1\104\2\0\4\104\12\0\12\104\1\u0141"+
    "\13\104\13\0\3\104\4\0\1\u02d3\1\104\2\0\4\104"+
    "\12\0\26\104\13\0\3\104\5\0\1\104\2\0\4\104"+
    "\12\0\1\104\1\u02dd\24\104\13\0\3\104\32\0\1\u02de"+
    "\74\0\1\u02df\73\0\1\u02e0\70\0\1\u02e1\64\0\1\u02e2"+
    "\77\0\1\u02e3\61\0\1\u02e4\100\0\1\u02e5\62\0\1\u02e6"+
    "\74\0\1\u02e7\74\0\1\u02e8\73\0\1\u02e9\70\0\1\u02ea"+
    "\64\0\1\u02eb\72\0\1\u02ec\73\0\1\u01e9\1\0\1\u02ed"+
    "\71\0\1\u02ee\65\0\1\u02ef\111\0\1\u02f0\57\0\1\u02f1"+
    "\65\0\1\u02f2\100\0\1\u02f3\72\0\1\u02f4\64\0\1\u02f5"+
    "\104\0\1\u02f6\56\0\1\u02f7\70\0\1\u02f8\104\0\1\u02a7"+
    "\57\0\1\u02f9\71\0\1\u02a7\74\0\1\u024c\116\0\1\u02fa"+
    "\31\0\1\u02a7\76\0\1\u02fb\125\0\1\u02fc\37\0\1\u02fd"+
    "\66\0\1\u02fe\70\0\1\u02ff\72\0\1\u0300\74\0\1\u0301"+
    "\61\0\1\u0302\74\0\1\u0303\67\0\1\u0304\1\0\1\u0305"+
    "\6\0\1\u01f5\65\0\1\u01e9\1\0\1\u0306\62\0\1\u0307"+
    "\71\0\1\u0308\107\0\1\u01e2\55\0\1\u01da\17\0\1\u0309"+
    "\16\0\1\u01e6\30\0\1\u030a\46\0\1\u01fd\32\0\1\u030b"+
    "\6\0\1\u030c\62\0\1\u030d\73\0\1\u030e\64\0\1\u030f"+
    "\66\0\1\u0310\72\0\1\u0311\76\0\1\u0312\6\0\1\u0313"+
    "\52\0\1\u0314\103\0\1\u01eb\3\0\1\u0204\53\0\1\u0255"+
    "\14\0\1\u0315\61\0\1\u0316\73\0\1\u0317\1\u0303\4\0"+
    "\1\u0318\6\0\1\u0319\50\0\1\u031a\43\0\1\u031b\120\0"+
    "\1\u031c\100\0\1\u031d\62\0\1\u031e\72\0\1\u031f\64\0"+
    "\1\u0320\46\0\1\u01fd\1\104\2\0\4\104\12\0\11\104"+
    "\1\u0321\6\104\1\u0322\5\104\13\0\3\104\4\0\1\u031b"+
    "\1\104\2\0\4\104\12\0\26\104\13\0\3\104\37\0"+
    "\1\u0323\61\0\1\u0324\100\0\1\u0325\62\0\1\u0326\74\0"+
    "\1\u0327\73\0\1\u0328\75\0\1\u0329\70\0\1\u032a\61\0"+
    "\1\u032b\100\0\1\u032c\62\0\1\u032d\74\0\1\u032e\104\0"+
    "\1\u032f\65\0\1\u0330\2\0\1\u0331\1\u0332\66\0\1\u0333"+
    "\66\0\1\u0334\103\0\1\u0335\47\0\1\u0336\107\0\1\u02a7"+
    "\53\0\1\u0337\105\0\1\u0338\55\0\1\u0339\76\0\1\u033a"+
    "\77\0\1\u033b\56\0\1\u033c\103\0\1\u033d\72\0\1\u02b5"+
    "\66\0\1\u033e\63\0\1\u033f\67\0\1\u0340\73\0\1\u0341"+
    "\74\0\1\u0342\76\0\1\u0343\57\0\1\u0344\71\0\1\u0345"+
    "\76\0\1\u0346\104\0\1\u0347\61\0\1\u0348\76\0\1\u0331"+
    "\1\u0332\71\0\1\u0349\62\0\1\u02b2\100\0\1\u034a\65\0"+
    "\1\u034b\63\0\1\u034c\76\0\1\u02a7\103\0\1\u02ad\61\0"+
    "\1\u034d\61\0\1\u034e\76\0\1\u0302\102\0\1\u034f\62\0"+
    "\1\u0350\56\0\1\u0351\72\0\1\u0352\74\0\1\u0353\101\0"+
    "\1\u0354\60\0\1\u0250\71\0\1\u0355\76\0\1\u02c9\2\0"+
    "\1\u01eb\63\0\1\u0356\75\0\1\u0357\73\0\1\u0358\63\0"+
    "\1\u0359\71\0\1\u035a\43\0\1\104\2\0\4\104\12\0"+
    "\13\104\1\u035b\12\104\13\0\3\104\5\0\1\104\2\0"+
    "\4\104\12\0\5\104\1\u035c\20\104\13\0\3\104\34\0"+
    "\1\u035d\75\0\1\u035e\76\0\1\u035f\55\0\1\u0360\74\0"+
    "\1\u0361\75\0\1\u0362\76\0\1\u0363\56\0\1\u0364\70\0"+
    "\1\u0365\130\0\1\u02a7\40\0\1\u0366\76\0\1\u0367\60\0"+
    "\1\u0368\70\0\1\u0369\71\0\1\u036a\70\0\1\u0305\72\0"+
    "\1\u02b2\71\0\1\u036b\72\0\1\u02b5\103\0\1\u036c\57\0"+
    "\1\u036d\67\0\1\u036e\76\0\1\u02b5\100\0\1\u02f2\114\0"+
    "\1\u02b5\52\0\1\u036f\110\0\1\u0370\34\0\1\u0371\71\0"+
    "\1\u02a7\64\0\1\u0272\114\0\1\u0372\47\0\1\u0373\113\0"+
    "\1\u0374\63\0\1\u02b9\1\0\1\u02ba\30\0\1\u0375\126\0"+
    "\1\u0376\74\0\1\u02b2\55\0\1\u02a7\112\0\1\u0377\53\0"+
    "\1\u0378\100\0\1\u034e\56\0\1\u02b0\107\0\1\u0379\71\0"+
    "\1\u037a\67\0\1\u02b5\67\0\1\u0345\101\0\1\u037b\50\0"+
    "\1\u037c\73\0\1\u02cb\65\0\1\u037d\47\0\1\u0375\1\104"+
    "\2\0\4\104\12\0\26\104\13\0\3\104\5\0\1\104"+
    "\2\0\4\104\12\0\13\104\1\u037e\12\104\13\0\3\104"+
    "\31\0\1\u037f\72\0\1\u0380\70\0\1\u0381\105\0\1\u0382"+
    "\73\0\1\u0383\53\0\1\u0384\101\0\1\u034e\71\0\1\u0385"+
    "\67\0\1\u0386\71\0\1\u0387\75\0\1\u02a7\67\0\1\u0388"+
    "\100\0\1\u02a7\62\0\1\u0389\61\0\1\u0389\71\0\1\u038a"+
    "\77\0\1\u038b\65\0\1\u038c\110\0\1\u02a7\53\0\1\u0389"+
    "\75\0\1\u038d\4\0\1\u038e\76\0\1\u038f\46\0\1\u0390"+
    "\114\0\1\u0391\55\0\1\u0392\72\0\1\u0393\74\0\1\u02b2"+
    "\62\0\1\u02fd\77\0\1\u0394\35\0\1\104\2\0\4\104"+
    "\12\0\24\104\1\u0395\1\104\13\0\3\104\32\0\1\u0396"+
    "\104\0\1\u0397\56\0\1\u0398\100\0\1\u0272\102\0\1\u0246"+
    "\60\0\1\u0399\101\0\1\u039a\51\0\1\u039b\71\0\1\u039c"+
    "\102\0\1\u039d\61\0\1\u02a7\102\0\1\u0302\57\0\1\u039e"+
    "\67\0\1\u039f\101\0\1\u0383\61\0\1\u03a0\46\0\1\u03a1"+
    "\130\0\1\u03a2\62\0\1\u03a3\70\0\1\u03a4\77\0\1\u0373"+
    "\75\0\1\u02b5\30\0\1\u03a1\1\104\2\0\4\104\12\0"+
    "\26\104\13\0\3\104\45\0\1\u03a5\71\0\1\u03a6\56\0"+
    "\1\u03a7\66\0\1\u03a8\100\0\1\u03a9\67\0\1\u0246\70\0"+
    "\1\u033f\104\0\1\u03aa\70\0\1\u03ab\62\0\1\u03ac\100\0"+
    "\1\u038e\60\0\1\u03ad\74\0\1\u0390\63\0\1\u03ae\111\0"+
    "\1\u03af\53\0\1\u03b0\77\0\1\u03b1\61\0\1\u03b2\105\0"+
    "\1\u033e\66\0\1\u03b3\66\0\1\u03b4\103\0\1\u02b2\61\0"+
    "\1\u03b5\67\0\1\u036d\75\0\1\u03b6\64\0\1\u01e0\66\0"+
    "\1\u03b7\72\0\1\u02a7\101\0\1\u03b8\54\0\1\u03b9\71\0"+
    "\1\u03ba\73\0\1\u03bb\105\0\1\u03bc\71\0\1\u0204\62\0"+
    "\1\u036d\64\0\1\u03bd\70\0\1\u03be\73\0\1\u03bf\73\0"+
    "\1\u02ae\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[49532];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\10\1\0\2\11\1\1\1\11\1\1\1\11"+
    "\4\1\2\11\3\1\1\11\31\1\10\11\1\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\1\1\11\3\1\1\11"+
    "\21\1\13\0\1\11\2\0\2\11\1\1\2\0\1\11"+
    "\2\1\11\0\1\11\2\0\1\1\3\0\1\1\2\0"+
    "\1\1\1\11\4\0\1\1\1\0\2\1\6\0\1\1"+
    "\13\0\1\11\5\0\2\1\15\0\3\11\2\0\34\1"+
    "\2\11\6\0\1\1\1\0\1\11\2\0\1\11\10\0"+
    "\1\11\1\0\1\11\1\0\2\1\1\11\2\0\1\11"+
    "\15\0\1\1\7\0\1\1\4\0\1\1\2\0\1\11"+
    "\10\0\1\1\14\0\1\1\14\0\43\1\4\11\3\0"+
    "\1\11\1\0\1\11\4\0\4\11\4\0\1\11\1\0"+
    "\1\11\3\0\1\1\2\0\1\1\1\11\21\0\1\1"+
    "\5\0\1\11\5\0\1\11\23\0\32\1\20\0\1\11"+
    "\1\0\1\11\1\0\2\11\40\0\1\11\4\0\1\1"+
    "\2\0\1\11\7\0\1\11\16\0\1\11\1\0\1\1"+
    "\1\11\22\1\5\0\2\11\13\0\1\11\1\0\2\11"+
    "\40\0\1\11\23\0\1\1\4\0\1\11\1\0\1\11"+
    "\6\0\16\1\5\0\1\11\12\0\1\11\4\0\1\11"+
    "\52\0\1\11\2\0\1\11\6\0\2\1\6\0\1\11"+
    "\1\0\1\11\11\0\1\1\31\0\1\11\17\0\1\11"+
    "\6\0\2\1\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\53\0\2\1"+
    "\1\0\2\11\2\0\2\11\32\0\1\1\26\0\1\1"+
    "\1\0\1\11\15\0\2\11\31\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[959];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Stack <IElementType> blockStack = new Stack<IElementType>();

  private int afterComment = YYINITIAL;

  private void clearStacks(){
    blockStack.clear();
  }

  private Stack<IElementType> braceCount = new Stack <IElementType>();



  _PowerShellLexer(java.io.Reader in) {
      this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _PowerShellLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 73: 
          { return EXIT;
          }
        case 114: break;
        case 71: 
          { return COCLT;
          }
        case 115: break;
        case 8: 
          { return IDENT;
          }
        case 116: break;
        case 58: 
          { return TRY;
          }
        case 117: break;
        case 2: 
          { return LPAREN;
          }
        case 118: break;
        case 46: 
          { return GE;
          }
        case 119: break;
        case 55: 
          { return COLT;
          }
        case 120: break;
        case 83: 
          { return WHILE;
          }
        case 121: break;
        case 10: 
          { return RCURLY;
          }
        case 122: break;
        case 88: 
          { return ELSEIF;
          }
        case 123: break;
        case 108: 
          { return COICONTAINS;
          }
        case 124: break;
        case 7: 
          { return NUMBER;
          }
        case 125: break;
        case 6: 
          { return COLON;
          }
        case 126: break;
        case 78: 
          { return BREAK;
          }
        case 127: break;
        case 45: 
          { return EQ;
          }
        case 128: break;
        case 106: 
          { return COCONTAINS;
          }
        case 129: break;
        case 57: 
          { return END;
          }
        case 130: break;
        case 68: 
          { return COCGT;
          }
        case 131: break;
        case 65: 
          { return COILT;
          }
        case 132: break;
        case 92: 
          { return COIMATCH;
          }
        case 133: break;
        case 32: 
          { yybegin(YYINITIAL); return EXPSTRING_END;
          }
        case 134: break;
        case 9: 
          { return LCURLY;
          }
        case 135: break;
        case 40: 
          { return ML_COMMENT;
          }
        case 136: break;
        case 89: 
          { return RETURN;
          }
        case 137: break;
        case 4: 
          { return WS;
          }
        case 138: break;
        case 91: 
          { return FILTER;
          }
        case 139: break;
        case 51: 
          { return COIS;
          }
        case 140: break;
        case 112: 
          { return COINOTCONTAINS;
          }
        case 141: break;
        case 109: 
          { return COCNOTMATCH;
          }
        case 142: break;
        case 93: 
          { return COCMATCH;
          }
        case 143: break;
        case 79: 
          { return CATCH;
          }
        case 144: break;
        case 25: 
          { return COMMA;
          }
        case 145: break;
        case 62: 
          { return COIGT;
          }
        case 146: break;
        case 13: 
          { return MULT;
          }
        case 147: break;
        case 75: 
          { return DATA;
          }
        case 148: break;
        case 21: 
          { return MOD;
          }
        case 149: break;
        case 96: 
          { return PROCESS;
          }
        case 150: break;
        case 76: 
          { return COLIKE;
          }
        case 151: break;
        case 12: 
          { return DIV;
          }
        case 152: break;
        case 69: 
          { return COCNE;
          }
        case 153: break;
        case 94: 
          { return CMDLET;
          }
        case 154: break;
        case 20: 
          { return PLUS;
          }
        case 155: break;
        case 11: 
          { yybegin(IN_SINGLE_EXPSTRING); return EXPSTRING_BEGIN;
          }
        case 156: break;
        case 52: 
          { return CONE;
          }
        case 157: break;
        case 36: 
          { return STRING_LITERAL;
          }
        case 158: break;
        case 70: 
          { return COCLE;
          }
        case 159: break;
        case 19: 
          { return LT;
          }
        case 160: break;
        case 90: 
          { return SWITCH;
          }
        case 161: break;
        case 38: 
          { return LASTTOKEN;
          }
        case 162: break;
        case 87: 
          { return COMATCH;
          }
        case 163: break;
        case 54: 
          { return COLE;
          }
        case 164: break;
        case 28: 
          { yypushback(1);
                                             yybegin(IN_SINGLE_EXPSTRING);
          }
        case 165: break;
        case 15: 
          { return DOT;
          }
        case 166: break;
        case 44: 
          { return DO;
          }
        case 167: break;
        case 42: 
          { return IN;
          }
        case 168: break;
        case 37: 
          { return DOLLAR;
          }
        case 169: break;
        case 26: 
          { return SEMI;
          }
        case 170: break;
        case 34: 
          { /*yybegin(IN_SINGLE_DOT);*/ return IDENT;
          }
        case 171: break;
        case 63: 
          { return COINE;
          }
        case 172: break;
        case 107: 
          { return COINOTMATCH;
          }
        case 173: break;
        case 53: 
          { return COAS;
          }
        case 174: break;
        case 82: 
          { return PARAM;
          }
        case 175: break;
        case 103: 
          { return CONOTMATCH;
          }
        case 176: break;
        case 97: 
          { return CONOTLIKE;
          }
        case 177: break;
        case 67: 
          { return COCGE;
          }
        case 178: break;
        case 64: 
          { return COILE;
          }
        case 179: break;
        case 31: 
          { yybegin(IN_SINGLE_EXPSTRING_DOLLAR);
                                             return DOLLAR;
          }
        case 180: break;
        case 14: 
          { return SL_COMMENT;
          }
        case 181: break;
        case 18: 
          { return GT;
          }
        case 182: break;
        case 24: 
          { return RBRACK;
          }
        case 183: break;
        case 33: 
          { yybegin(IN_SINGLE_DOT);
                                             return IDENT;
          }
        case 184: break;
        case 30: 
          { return EXPSTRING_CONTENT;
          }
        case 185: break;
        case 50: 
          { return COGE;
          }
        case 186: break;
        case 111: 
          { return CONOTCONTAINS;
          }
        case 187: break;
        case 99: 
          { return CONTINUE;
          }
        case 188: break;
        case 98: 
          { return COREPLACE;
          }
        case 189: break;
        case 39: 
          { return EXPSTRING_LITERAL;
          }
        case 190: break;
        case 101: 
          { return COINOTLIKE;
          }
        case 191: break;
        case 29: 
          { blockStack.push(LPAREN);
                                             yybegin(IN_INNER_BLOCK);
                                             return LCURLY;
          }
        case 192: break;
        case 66: 
          { return COCEQ;
          }
        case 193: break;
        case 17: 
          { return ASSIGN;
          }
        case 194: break;
        case 84: 
          { return COILIKE;
          }
        case 195: break;
        case 3: 
          { return NEWLINE;
          }
        case 196: break;
        case 23: 
          { return LBRACK;
          }
        case 197: break;
        case 56: 
          { return ELLIPSIS;
          }
        case 198: break;
        case 49: 
          { return COEQ;
          }
        case 199: break;
        case 61: 
          { return COIGE;
          }
        case 200: break;
        case 102: 
          { return COIREPLACE;
          }
        case 201: break;
        case 100: 
          { return FUNCTION;
          }
        case 202: break;
        case 48: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(IN_SINGLE_IDENT);
                                             return DOT;
          }
        case 203: break;
        case 80: 
          { return THROW;
          }
        case 204: break;
        case 72: 
          { return ELSE;
          }
        case 205: break;
        case 113: 
          { return COCNOTCONTAINS;
          }
        case 206: break;
        case 43: 
          { return IF;
          }
        case 207: break;
        case 95: 
          { return FINALLY;
          }
        case 208: break;
        case 81: 
          { return UNTIL;
          }
        case 209: break;
        case 35: 
          { if (!blockStack.isEmpty()) { IElementType br = blockStack.pop(); }
                                          yybegin(IN_SINGLE_EXPSTRING);
                                          return RCURLY;
          }
        case 210: break;
        case 60: 
          { return COIEQ;
          }
        case 211: break;
        case 104: 
          { return COCNOTLIKE;
          }
        case 212: break;
        case 5: 
          { return MINUS;
          }
        case 213: break;
        case 47: 
          { return LE;
          }
        case 214: break;
        case 59: 
          { return FOR;
          }
        case 215: break;
        case 41: 
          { return RANGE;
          }
        case 216: break;
        case 110: 
          { return COCCONTAINS;
          }
        case 217: break;
        case 27: 
          { return EXP;
          }
        case 218: break;
        case 86: 
          { return COCLIKE;
          }
        case 219: break;
        case 22: 
          { return RPAREN;
          }
        case 220: break;
        case 77: 
          { return BEGIN;
          }
        case 221: break;
        case 74: 
          { return TRAP;
          }
        case 222: break;
        case 16: 
          { return ALIAS;
          }
        case 223: break;
        case 1: 
          { return WRONG;
          }
        case 224: break;
        case 105: 
          { return COCREPLACE;
          }
        case 225: break;
        case 85: 
          { return COISNOT;
          }
        case 226: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
