/* The following code was generated by JFlex 1.4.3 on 2/4/11 9:59 AM */

package com.innovatian.idea.powershell.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/4/11 9:59 AM from the specification file
 * <tt>PowerShell.flex</tt>
 */
class _PowerShellLexer implements FlexLexer, PsTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_INNER_BLOCK = 14;
  public static final int NLS_AFTER_LBRACE = 12;
  public static final int YYINITIAL = 0;
  public static final int IN_SINGLE_DOT = 8;
  public static final int IN_SINGLE_QUOTESTRING = 10;
  public static final int IN_SINGLE_IDENT = 6;
  public static final int IN_SINGLE_EXPSTRING_DOLLAR = 2;
  public static final int IN_SINGLE_EXPSTRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\15\22\0\1\3\1\0\1\17"+
    "\1\22\1\14\1\60\1\0\1\7\1\1\1\61\1\21\1\57\1\64"+
    "\1\4\1\23\1\20\1\12\11\10\1\6\1\65\1\56\1\54\1\55"+
    "\2\0\6\11\21\5\1\13\2\5\1\62\1\16\1\63\1\66\1\5"+
    "\1\0\1\32\1\24\1\34\1\41\1\25\1\44\1\26\1\36\1\27"+
    "\1\5\1\33\1\42\1\50\1\30\1\37\1\47\1\67\1\31\1\43"+
    "\1\35\1\40\1\5\1\51\1\45\1\46\1\5\1\52\1\0\1\53"+
    "\54\0\1\5\12\0\1\5\4\0\1\5\5\0\27\5\1\0\37\5"+
    "\1\0\u013f\5\31\0\162\5\4\0\14\5\16\0\5\5\11\0\1\5"+
    "\213\0\1\5\13\0\1\5\1\0\3\5\1\0\1\5\1\0\24\5"+
    "\1\0\54\5\1\0\46\5\1\0\5\5\4\0\202\5\10\0\105\5"+
    "\1\0\46\5\2\0\2\5\6\0\20\5\41\0\46\5\2\0\1\5"+
    "\7\0\47\5\110\0\33\5\5\0\3\5\56\0\32\5\5\0\13\5"+
    "\43\0\2\5\1\0\143\5\1\0\1\5\17\0\2\5\7\0\2\5"+
    "\12\0\3\5\2\0\1\5\20\0\1\5\1\0\36\5\35\0\3\5"+
    "\60\0\46\5\13\0\1\5\u0152\0\66\5\3\0\1\5\22\0\1\5"+
    "\7\0\12\5\43\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\1\5\3\0\4\5\3\0\1\5\36\0\2\5\1\0\3\5"+
    "\16\0\2\5\23\0\6\5\4\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\2\5\1\0\2\5\1\0\2\5\37\0\4\5\1\0\1\5"+
    "\23\0\3\5\20\0\11\5\1\0\3\5\1\0\26\5\1\0\7\5"+
    "\1\0\2\5\1\0\5\5\3\0\1\5\22\0\1\5\17\0\2\5"+
    "\43\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5"+
    "\1\0\5\5\3\0\1\5\36\0\2\5\1\0\3\5\17\0\1\5"+
    "\21\0\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\10\5"+
    "\1\0\3\5\113\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5"+
    "\1\0\5\5\46\0\2\5\43\0\10\5\1\0\3\5\1\0\27\5"+
    "\1\0\12\5\1\0\5\5\3\0\1\5\40\0\1\5\1\0\2\5"+
    "\43\0\10\5\1\0\3\5\1\0\27\5\1\0\20\5\46\0\2\5"+
    "\43\0\22\5\3\0\30\5\1\0\11\5\1\0\1\5\2\0\7\5"+
    "\72\0\60\5\1\0\2\5\14\0\7\5\72\0\2\5\1\0\1\5"+
    "\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5"+
    "\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5"+
    "\1\0\2\5\11\0\1\5\2\0\5\5\1\0\1\5\25\0\2\5"+
    "\42\0\1\5\77\0\10\5\1\0\42\5\35\0\4\5\164\0\42\5"+
    "\1\0\5\5\1\0\2\5\45\0\6\5\112\0\46\5\12\0\51\5"+
    "\7\0\132\5\5\0\104\5\5\0\122\5\6\0\7\5\1\0\77\5"+
    "\1\0\1\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5"+
    "\2\0\47\5\1\0\1\5\1\0\4\5\2\0\37\5\1\0\1\5"+
    "\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\7\5"+
    "\1\0\7\5\1\0\27\5\1\0\37\5\1\0\1\5\1\0\4\5"+
    "\2\0\7\5\1\0\47\5\1\0\23\5\105\0\125\5\14\0\u026c\5"+
    "\2\0\10\5\12\0\32\5\5\0\113\5\25\0\15\5\1\0\4\5"+
    "\16\0\22\5\16\0\22\5\16\0\15\5\1\0\3\5\17\0\64\5"+
    "\43\0\1\5\4\0\1\5\103\0\130\5\10\0\51\5\127\0\35\5"+
    "\63\0\36\5\2\0\5\5\u038b\0\154\5\224\0\234\5\4\0\132\5"+
    "\6\0\26\5\2\0\6\5\2\0\46\5\2\0\6\5\2\0\10\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\37\5\2\0\65\5"+
    "\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5"+
    "\2\0\6\5\4\0\15\5\5\0\3\5\1\0\7\5\164\0\1\5"+
    "\15\0\1\5\202\0\1\5\4\0\1\5\2\0\12\5\1\0\1\5"+
    "\3\0\5\5\6\0\1\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\0\3\5\1\0\7\5\3\0\3\5\5\0\5\5\u0ebb\0\2\5"+
    "\52\0\5\5\5\0\2\5\4\0\126\5\6\0\3\5\1\0\132\5"+
    "\1\0\4\5\5\0\50\5\4\0\136\5\21\0\30\5\70\0\20\5"+
    "\u0200\0\u19b6\5\112\0\u51a6\5\132\0\u048d\5\u0773\0\u2ba4\5\u215c\0\u012e\5"+
    "\2\0\73\5\225\0\7\5\14\0\5\5\5\0\1\5\1\0\12\5"+
    "\1\0\15\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5"+
    "\1\0\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5\50\0\14\5"+
    "\164\0\5\5\1\0\207\5\44\0\32\5\6\0\32\5\13\0\131\5"+
    "\3\0\6\5\2\0\6\5\2\0\6\5\2\0\3\5\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\2\11\1\12\1\2\1\13\1\14\1\15"+
    "\1\16\1\17\14\2\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\15\36\1\37\1\1\1\2\1\40\1\1\1\41"+
    "\1\35\2\1\1\42\1\2\1\43\13\0\1\5\2\0"+
    "\1\44\1\45\1\46\5\0\1\47\1\50\7\0\1\51"+
    "\7\0\1\52\1\53\1\54\5\36\1\47\1\50\7\36"+
    "\1\51\7\36\1\0\1\55\1\0\1\56\1\57\6\0"+
    "\1\60\1\0\1\61\2\0\1\62\10\0\1\63\1\0"+
    "\1\64\1\0\1\11\1\45\1\65\2\0\1\66\6\0"+
    "\1\67\6\0\1\70\4\0\2\36\1\66\6\36\1\67"+
    "\6\36\1\70\4\36\1\71\1\72\1\73\1\74\3\0"+
    "\1\75\1\0\1\76\4\0\1\77\1\100\1\101\1\102"+
    "\4\0\1\103\1\0\1\104\3\0\1\45\2\0\1\105"+
    "\1\106\3\0\1\107\2\0\1\110\7\0\2\36\1\105"+
    "\1\106\3\36\1\107\2\36\1\110\7\36\20\0\1\111"+
    "\1\0\1\45\1\0\1\112\1\113\2\0\1\114\1\0"+
    "\1\115\1\116\5\0\1\117\1\120\1\112\1\113\2\36"+
    "\1\114\1\36\1\115\1\116\5\36\1\117\1\120\5\0"+
    "\1\121\1\122\13\0\1\123\1\0\1\124\1\125\1\126"+
    "\1\0\1\127\1\0\1\130\2\0\1\125\1\126\1\36"+
    "\1\127\1\36\1\130\2\36\5\0\1\131\12\0\1\132"+
    "\1\0\1\133\1\0\1\134\1\36\1\133\1\36\1\134"+
    "\6\0\1\135\1\0\1\136\6\0\1\137\1\140\1\137"+
    "\1\140\1\0\1\141\1\0\1\142\2\0\1\143\1\0"+
    "\1\144\1\0\1\145\1\0\1\146\1\0\1\147\1\150"+
    "\2\0\1\151\1\152\4\0\1\153\1\0\1\154\1\155";

  private static int [] zzUnpackAction() {
    int [] result = new int[437];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u0150\0\u0150\0\u01c0\0\u0150\0\u01f8\0\u0150\0\u0150\0\u0230"+
    "\0\u0268\0\u0150\0\u02a0\0\u02d8\0\u0310\0\u0150\0\u0348\0\u0380"+
    "\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508\0\u0540"+
    "\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0150\0\u0150\0\u0658\0\u0690"+
    "\0\u06c8\0\u0150\0\u0150\0\u0150\0\u0150\0\u0150\0\u0150\0\u0150"+
    "\0\u0150\0\u0150\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818"+
    "\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u0150"+
    "\0\u09d8\0\u0a10\0\u0150\0\u0a48\0\u0150\0\u0a80\0\u0ab8\0\u0af0"+
    "\0\u0b28\0\u0380\0\u0150\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40"+
    "\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u02d8"+
    "\0\u0e00\0\u0150\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50"+
    "\0\u0f88\0\u0150\0\u0150\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0"+
    "\0\u10d8\0\u1110\0\u0150\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228"+
    "\0\u1260\0\u1298\0\u0150\0\u0150\0\u0150\0\u12d0\0\u1308\0\u1340"+
    "\0\u1378\0\u13b0\0\u0700\0\u0700\0\u13e8\0\u1420\0\u1458\0\u1490"+
    "\0\u14c8\0\u1500\0\u1538\0\u0700\0\u1570\0\u15a8\0\u15e0\0\u1618"+
    "\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u0af0\0\u0150\0\u0150"+
    "\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0"+
    "\0\u0150\0\u1928\0\u1960\0\u0150\0\u1998\0\u19d0\0\u1a08\0\u1a40"+
    "\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u0150\0\u1b58\0\u0150\0\u1b90"+
    "\0\u0d90\0\u1bc8\0\u0150\0\u1c00\0\u1c38\0\u0150\0\u1c70\0\u1ca8"+
    "\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u0150\0\u1dc0\0\u1df8\0\u1e30"+
    "\0\u1e68\0\u1ea0\0\u1ed8\0\u0150\0\u1f10\0\u1f48\0\u1f80\0\u1fb8"+
    "\0\u1ff0\0\u2028\0\u0700\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140"+
    "\0\u2178\0\u0700\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8"+
    "\0\u0700\0\u2300\0\u2338\0\u2370\0\u23a8\0\u0150\0\u0150\0\u0150"+
    "\0\u0150\0\u23e0\0\u2418\0\u2450\0\u0150\0\u2488\0\u0150\0\u24c0"+
    "\0\u24f8\0\u2530\0\u2568\0\u0150\0\u0150\0\u0150\0\u0150\0\u25a0"+
    "\0\u25d8\0\u2610\0\u2648\0\u0150\0\u2680\0\u0150\0\u26b8\0\u26f0"+
    "\0\u2728\0\u2760\0\u2798\0\u27d0\0\u2808\0\u0150\0\u2840\0\u2878"+
    "\0\u28b0\0\u0150\0\u28e8\0\u2920\0\u0150\0\u2958\0\u2990\0\u29c8"+
    "\0\u2a00\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50\0\u0700"+
    "\0\u2b88\0\u2bc0\0\u2bf8\0\u0700\0\u2c30\0\u2c68\0\u0700\0\u2ca0"+
    "\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u2db8\0\u2df0\0\u2e28\0\u2e60"+
    "\0\u2e98\0\u2ed0\0\u2f08\0\u2f40\0\u2f78\0\u2fb0\0\u2fe8\0\u3020"+
    "\0\u3058\0\u3090\0\u30c8\0\u3100\0\u3138\0\u3170\0\u0150\0\u31a8"+
    "\0\u0150\0\u2760\0\u0150\0\u0150\0\u31e0\0\u3218\0\u0150\0\u3250"+
    "\0\u0150\0\u0150\0\u3288\0\u32c0\0\u32f8\0\u3330\0\u3368\0\u0150"+
    "\0\u0150\0\u0700\0\u0700\0\u33a0\0\u33d8\0\u0700\0\u3410\0\u0700"+
    "\0\u0700\0\u3448\0\u3480\0\u34b8\0\u34f0\0\u3528\0\u0700\0\u0700"+
    "\0\u3560\0\u3598\0\u35d0\0\u3608\0\u3640\0\u0150\0\u0150\0\u3678"+
    "\0\u36b0\0\u36e8\0\u3720\0\u3758\0\u3790\0\u37c8\0\u3800\0\u3838"+
    "\0\u3870\0\u38a8\0\u0150\0\u38e0\0\u0150\0\u0150\0\u0150\0\u3918"+
    "\0\u0150\0\u3950\0\u0150\0\u3988\0\u39c0\0\u0700\0\u0700\0\u39f8"+
    "\0\u0700\0\u3a30\0\u0700\0\u3a68\0\u3aa0\0\u3ad8\0\u3b10\0\u3b48"+
    "\0\u3b80\0\u3bb8\0\u0150\0\u3bf0\0\u3c28\0\u3c60\0\u3c98\0\u3cd0"+
    "\0\u3d08\0\u3d40\0\u3d78\0\u3db0\0\u3de8\0\u0150\0\u3e20\0\u0150"+
    "\0\u3e58\0\u0150\0\u3e90\0\u0700\0\u3ec8\0\u0700\0\u3f00\0\u3f38"+
    "\0\u3f70\0\u3fa8\0\u3fe0\0\u4018\0\u0150\0\u4050\0\u0150\0\u4088"+
    "\0\u40c0\0\u40f8\0\u4130\0\u4168\0\u41a0\0\u0150\0\u0150\0\u0700"+
    "\0\u0700\0\u41d8\0\u0150\0\u4210\0\u0150\0\u4248\0\u4280\0\u0150"+
    "\0\u42b8\0\u0150\0\u42f0\0\u0150\0\u4328\0\u0150\0\u4360\0\u0150"+
    "\0\u0150\0\u4398\0\u43d0\0\u0150\0\u0150\0\u4408\0\u4440\0\u4478"+
    "\0\u44b0\0\u0150\0\u44e8\0\u0150\0\u0150";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[437];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\15\1\11\1\16\1\17"+
    "\1\20\1\11\1\21\1\11\1\22\1\13\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\11\1\33"+
    "\1\11\1\34\2\11\1\35\1\36\2\11\1\37\1\40"+
    "\1\11\1\41\1\42\2\11\1\43\1\11\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\11\5\62\1\63\3\62"+
    "\1\63\1\62\1\63\10\62\1\64\1\65\1\63\1\66"+
    "\1\63\1\67\2\63\1\70\1\71\2\63\1\72\1\73"+
    "\1\63\1\74\1\75\2\63\1\76\1\63\1\77\1\100"+
    "\14\62\1\63\2\101\1\102\11\101\1\103\1\102\1\104"+
    "\1\105\50\101\5\62\1\63\3\62\1\63\1\62\1\63"+
    "\10\62\26\63\15\62\1\63\23\62\1\106\44\62\2\107"+
    "\1\102\4\107\1\105\5\107\1\102\1\110\51\107\70\0"+
    "\1\11\1\12\1\13\1\14\1\15\1\111\1\16\1\17"+
    "\1\20\1\111\1\21\1\111\1\22\1\13\1\23\1\24"+
    "\1\25\1\26\1\27\1\112\26\111\1\45\1\113\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\111\2\0\2\13\11\0\1\13\1\114"+
    "\76\0\1\115\1\116\1\117\1\120\1\121\1\122\1\0"+
    "\1\123\5\0\1\124\5\0\1\125\27\0\1\20\1\0"+
    "\1\20\65\0\1\20\1\0\1\20\1\126\31\0\1\126"+
    "\24\0\1\14\12\0\1\127\52\0\2\130\1\0\11\130"+
    "\2\0\1\131\1\132\50\130\21\0\1\133\46\0\2\27"+
    "\1\0\12\27\1\0\52\27\23\0\1\134\71\0\1\135"+
    "\3\0\1\136\66\0\1\137\11\0\1\140\2\0\1\141"+
    "\52\0\1\142\13\0\1\143\50\0\1\144\74\0\1\145"+
    "\4\0\1\146\61\0\1\147\4\0\1\150\61\0\1\151"+
    "\71\0\1\152\4\0\1\153\101\0\1\154\45\0\1\155"+
    "\7\0\1\156\1\157\60\0\1\160\1\161\73\0\1\162"+
    "\105\0\1\163\67\0\1\164\67\0\1\165\20\0\1\63"+
    "\2\0\4\63\10\0\26\63\15\0\1\63\5\0\1\63"+
    "\2\0\4\63\10\0\1\63\1\166\3\63\1\167\20\63"+
    "\15\0\1\63\5\0\1\63\2\0\4\63\10\0\4\63"+
    "\1\170\11\63\1\171\2\63\1\172\4\63\15\0\1\63"+
    "\5\0\1\63\2\0\4\63\10\0\4\63\1\173\13\63"+
    "\1\174\5\63\15\0\1\63\5\0\1\63\2\0\4\63"+
    "\10\0\1\63\1\175\24\63\15\0\1\63\5\0\1\63"+
    "\2\0\4\63\10\0\6\63\1\176\4\63\1\177\12\63"+
    "\15\0\1\63\5\0\1\63\2\0\4\63\10\0\5\63"+
    "\1\200\4\63\1\201\13\63\15\0\1\63\5\0\1\63"+
    "\2\0\4\63\10\0\4\63\1\202\21\63\15\0\1\63"+
    "\5\0\1\63\2\0\4\63\10\0\6\63\1\203\4\63"+
    "\1\204\12\63\15\0\1\63\5\0\1\63\2\0\4\63"+
    "\10\0\25\63\1\205\15\0\1\63\5\0\1\63\2\0"+
    "\4\63\10\0\3\63\1\206\7\63\1\207\1\210\11\63"+
    "\15\0\1\63\5\0\1\63\2\0\4\63\10\0\5\63"+
    "\1\211\1\212\17\63\15\0\1\63\5\0\1\63\2\0"+
    "\4\63\10\0\12\63\1\213\13\63\15\0\1\63\2\101"+
    "\1\0\11\101\2\0\1\104\1\0\50\101\2\0\2\102"+
    "\11\0\1\102\1\214\51\0\70\101\5\0\1\215\3\0"+
    "\1\215\1\0\1\215\10\0\26\215\15\0\1\215\2\107"+
    "\1\0\4\107\1\0\5\107\1\0\1\216\141\107\5\0"+
    "\1\111\2\0\4\111\10\0\26\111\15\0\1\111\2\0"+
    "\1\13\12\0\1\13\141\0\1\217\25\0\1\220\7\0"+
    "\1\220\57\0\1\221\1\222\1\0\1\223\1\224\2\0"+
    "\1\225\5\0\1\226\1\227\4\0\1\230\44\0\1\231"+
    "\11\0\1\232\55\0\1\233\105\0\1\234\51\0\1\235"+
    "\1\236\1\0\1\237\1\240\2\0\1\241\2\0\1\242"+
    "\2\0\1\243\5\0\1\244\44\0\1\245\1\0\1\246"+
    "\5\0\1\247\64\0\1\250\45\0\3\251\11\0\2\251"+
    "\4\0\1\251\1\0\1\251\4\0\1\251\2\0\1\251"+
    "\25\0\1\14\65\0\70\130\21\252\1\0\46\252\23\0"+
    "\1\253\72\0\1\254\66\0\1\255\103\0\1\256\71\0"+
    "\1\257\53\0\1\260\75\0\1\261\67\0\1\262\62\0"+
    "\1\263\71\0\1\264\13\0\1\265\52\0\1\266\73\0"+
    "\1\267\67\0\1\270\61\0\1\271\70\0\1\272\11\0"+
    "\1\273\56\0\1\274\66\0\1\275\76\0\1\276\61\0"+
    "\1\277\65\0\1\300\45\0\1\63\2\0\4\63\10\0"+
    "\2\63\1\301\23\63\15\0\1\63\5\0\1\63\2\0"+
    "\4\63\10\0\1\63\1\302\24\63\15\0\1\63\5\0"+
    "\1\63\2\0\4\63\10\0\15\63\1\303\10\63\15\0"+
    "\1\63\5\0\1\63\2\0\4\63\10\0\17\63\1\304"+
    "\6\63\15\0\1\63\5\0\1\63\2\0\4\63\10\0"+
    "\3\63\1\305\22\63\15\0\1\63\5\0\1\63\2\0"+
    "\4\63\10\0\11\63\1\306\14\63\15\0\1\63\5\0"+
    "\1\63\2\0\4\63\10\0\11\63\1\307\14\63\15\0"+
    "\1\63\5\0\1\63\2\0\4\63\10\0\4\63\1\310"+
    "\21\63\15\0\1\63\5\0\1\63\2\0\4\63\10\0"+
    "\6\63\1\311\13\63\1\312\3\63\15\0\1\63\5\0"+
    "\1\63\2\0\4\63\10\0\5\63\1\313\20\63\15\0"+
    "\1\63\5\0\1\63\2\0\4\63\10\0\11\63\1\314"+
    "\14\63\15\0\1\63\5\0\1\63\2\0\4\63\10\0"+
    "\11\63\1\315\14\63\15\0\1\63\5\0\1\63\2\0"+
    "\4\63\10\0\3\63\1\316\22\63\15\0\1\63\5\0"+
    "\1\63\2\0\4\63\10\0\4\63\1\317\11\63\1\320"+
    "\7\63\15\0\1\63\5\0\1\63\2\0\4\63\10\0"+
    "\5\63\1\321\20\63\15\0\1\63\5\0\1\63\2\0"+
    "\4\63\10\0\4\63\1\322\21\63\15\0\1\63\5\0"+
    "\1\63\2\0\4\63\10\0\13\63\1\323\12\63\15\0"+
    "\1\63\5\0\1\63\2\0\4\63\10\0\5\63\1\324"+
    "\20\63\15\0\1\63\5\0\1\63\2\0\4\63\10\0"+
    "\3\63\1\325\22\63\15\0\1\63\2\0\1\102\12\0"+
    "\1\102\57\0\1\215\2\0\4\215\10\0\26\215\15\0"+
    "\1\215\67\0\1\326\25\0\1\327\7\0\1\330\57\0"+
    "\1\331\11\0\1\332\55\0\1\333\101\0\1\334\55\0"+
    "\1\335\1\0\1\336\5\0\1\337\62\0\1\340\71\0"+
    "\1\341\72\0\1\342\101\0\1\343\107\0\1\344\25\0"+
    "\1\345\7\0\1\346\57\0\1\347\11\0\1\350\55\0"+
    "\1\351\101\0\1\352\60\0\1\353\64\0\1\354\1\0"+
    "\1\355\5\0\1\356\64\0\1\357\70\0\1\360\71\0"+
    "\1\361\32\0\21\252\1\362\46\252\27\0\1\363\72\0"+
    "\1\364\62\0\1\365\77\0\1\366\72\0\1\367\63\0"+
    "\1\370\70\0\1\371\101\0\1\372\57\0\1\373\57\0"+
    "\1\374\72\0\1\375\72\0\1\376\64\0\1\377\72\0"+
    "\1\u0100\66\0\1\u0101\67\0\1\u0102\65\0\1\u0103\77\0"+
    "\1\u0104\32\0\1\63\2\0\4\63\10\0\3\63\1\u0105"+
    "\22\63\15\0\1\63\5\0\1\63\2\0\4\63\10\0"+
    "\6\63\1\u0106\17\63\15\0\1\63\5\0\1\63\2\0"+
    "\4\63\10\0\1\63\1\u0107\24\63\15\0\1\63\5\0"+
    "\1\63\2\0\4\63\10\0\11\63\1\u0108\14\63\15\0"+
    "\1\63\5\0\1\63\2\0\4\63\10\0\14\63\1\u0109"+
    "\11\63\15\0\1\63\5\0\1\63\2\0\4\63\10\0"+
    "\10\63\1\u010a\15\63\15\0\1\63\5\0\1\63\2\0"+
    "\4\63\10\0\11\63\1\u010b\14\63\15\0\1\63\5\0"+
    "\1\63\2\0\4\63\10\0\23\63\1\u010c\2\63\15\0"+
    "\1\63\5\0\1\63\2\0\4\63\10\0\13\63\1\u010d"+
    "\12\63\15\0\1\63\5\0\1\63\2\0\4\63\10\0"+
    "\3\63\1\u010e\22\63\15\0\1\63\5\0\1\63\2\0"+
    "\4\63\10\0\6\63\1\u010f\17\63\15\0\1\63\5\0"+
    "\1\63\2\0\4\63\10\0\11\63\1\u0110\14\63\15\0"+
    "\1\63\5\0\1\63\2\0\4\63\10\0\6\63\1\u0111"+
    "\17\63\15\0\1\63\5\0\1\63\2\0\4\63\10\0"+
    "\11\63\1\u0112\14\63\15\0\1\63\5\0\1\63\2\0"+
    "\4\63\10\0\10\63\1\u0113\15\63\15\0\1\63\5\0"+
    "\1\63\2\0\4\63\10\0\10\63\1\u0114\15\63\15\0"+
    "\1\63\5\0\1\63\2\0\4\63\10\0\6\63\1\u0115"+
    "\17\63\15\0\1\63\5\0\1\63\2\0\4\63\10\0"+
    "\16\63\1\u0116\7\63\15\0\1\63\35\0\1\u0117\101\0"+
    "\1\u0118\50\0\1\u0119\72\0\1\u011a\73\0\1\u011b\65\0"+
    "\1\u011c\66\0\1\u011d\5\0\1\u011e\5\0\1\u011f\61\0"+
    "\1\u0120\62\0\1\u0121\101\0\1\u0122\50\0\1\u0123\74\0"+
    "\1\u0124\65\0\1\u0125\71\0\1\u0126\57\0\1\u0127\76\0"+
    "\1\u0128\33\0\20\252\1\u0129\1\u012a\46\252\30\0\1\u012b"+
    "\72\0\1\u012c\63\0\1\u012d\71\0\1\u012e\74\0\1\u012f"+
    "\60\0\1\u0130\111\0\1\u0131\60\0\1\u0132\61\0\1\u0133"+
    "\75\0\1\u0134\52\0\1\u0135\77\0\1\u0136\57\0\1\u0137"+
    "\112\0\1\u0138\44\0\1\u0139\47\0\1\63\2\0\4\63"+
    "\10\0\4\63\1\u013a\21\63\15\0\1\63\5\0\1\63"+
    "\2\0\4\63\10\0\7\63\1\u013b\16\63\15\0\1\63"+
    "\5\0\1\63\2\0\4\63\10\0\3\63\1\u013c\22\63"+
    "\15\0\1\63\5\0\1\63\2\0\4\63\10\0\5\63"+
    "\1\u013d\20\63\15\0\1\63\5\0\1\63\2\0\4\63"+
    "\10\0\12\63\1\u013e\13\63\15\0\1\63\5\0\1\63"+
    "\2\0\4\63\10\0\3\63\1\u013f\22\63\15\0\1\63"+
    "\5\0\1\63\2\0\4\63\10\0\25\63\1\u0140\15\0"+
    "\1\63\5\0\1\63\2\0\4\63\10\0\16\63\1\u0141"+
    "\7\63\15\0\1\63\5\0\1\63\2\0\4\63\10\0"+
    "\10\63\1\u0142\15\63\15\0\1\63\5\0\1\63\2\0"+
    "\4\63\10\0\16\63\1\u0143\7\63\15\0\1\63\5\0"+
    "\1\63\2\0\4\63\10\0\1\63\1\u0144\24\63\15\0"+
    "\1\63\5\0\1\63\2\0\4\63\10\0\11\63\1\u0145"+
    "\14\63\15\0\1\63\5\0\1\63\2\0\4\63\10\0"+
    "\1\63\1\u0146\24\63\15\0\1\63\5\0\1\63\2\0"+
    "\4\63\10\0\24\63\1\u0147\1\63\15\0\1\63\5\0"+
    "\1\63\2\0\4\63\10\0\1\63\1\u0148\24\63\15\0"+
    "\1\63\34\0\1\u0149\5\0\1\u014a\5\0\1\u014b\61\0"+
    "\1\u014c\62\0\1\u014d\57\0\1\u014e\77\0\1\u014f\66\0"+
    "\1\u0150\72\0\1\u0151\57\0\1\u0152\72\0\1\u0153\67\0"+
    "\1\u0154\71\0\1\u0155\5\0\1\u0156\5\0\1\u0157\61\0"+
    "\1\u0158\62\0\1\u0159\64\0\1\u015a\62\0\1\u015b\76\0"+
    "\1\u015c\71\0\1\u015d\75\0\1\u015e\53\0\1\u015f\67\0"+
    "\1\u0160\75\0\1\u0161\73\0\1\u0162\56\0\1\u0163\65\0"+
    "\1\u0164\103\0\1\u0165\31\0\1\63\2\0\4\63\10\0"+
    "\20\63\1\u0166\5\63\15\0\1\63\5\0\1\63\2\0"+
    "\4\63\10\0\4\63\1\u0167\21\63\15\0\1\63\5\0"+
    "\1\63\2\0\4\63\10\0\4\63\1\u0168\21\63\15\0"+
    "\1\63\5\0\1\63\2\0\4\63\10\0\12\63\1\u0169"+
    "\13\63\15\0\1\63\5\0\1\63\2\0\4\63\10\0"+
    "\16\63\1\u016a\7\63\15\0\1\63\5\0\1\63\2\0"+
    "\4\63\10\0\5\63\1\u016b\20\63\15\0\1\63\5\0"+
    "\1\63\2\0\4\63\10\0\3\63\1\u016c\22\63\15\0"+
    "\1\63\5\0\1\63\2\0\4\63\10\0\17\63\1\u016d"+
    "\6\63\15\0\1\63\37\0\1\u016e\57\0\1\u016f\72\0"+
    "\1\u0170\67\0\1\u0171\67\0\1\u0172\73\0\1\u0173\61\0"+
    "\1\u0174\72\0\1\u0175\71\0\1\u0176\66\0\1\u0177\72\0"+
    "\1\u0178\57\0\1\u0179\72\0\1\u017a\67\0\1\u017b\67\0"+
    "\1\u017c\64\0\1\u017d\76\0\1\u017e\71\0\1\u017f\75\0"+
    "\1\u0180\60\0\1\u0181\73\0\1\u0182\31\0\1\63\2\0"+
    "\4\63\10\0\14\63\1\u0183\11\63\15\0\1\63\5\0"+
    "\1\63\2\0\4\63\10\0\22\63\1\u0184\3\63\15\0"+
    "\1\63\5\0\1\63\2\0\4\63\10\0\13\63\1\u0185"+
    "\12\63\15\0\1\63\5\0\1\63\2\0\4\63\10\0"+
    "\17\63\1\u0186\6\63\15\0\1\63\30\0\1\u0187\72\0"+
    "\1\u0188\71\0\1\u0189\66\0\1\u018a\62\0\1\u018b\75\0"+
    "\1\u018c\57\0\1\u018d\76\0\1\u018e\60\0\1\u018f\72\0"+
    "\1\u0190\72\0\1\u0191\71\0\1\u0192\66\0\1\u0193\62\0"+
    "\1\u0194\70\0\1\u0195\64\0\1\u0196\72\0\1\u0197\44\0"+
    "\1\63\2\0\4\63\10\0\1\63\1\u0198\24\63\15\0"+
    "\1\63\5\0\1\63\2\0\4\63\10\0\4\63\1\u0199"+
    "\21\63\15\0\1\63\35\0\1\u019a\57\0\1\u019b\76\0"+
    "\1\u019c\60\0\1\u019d\72\0\1\u019e\71\0\1\u019f\73\0"+
    "\1\u01a0\66\0\1\u01a1\57\0\1\u01a2\76\0\1\u01a3\60\0"+
    "\1\u01a4\72\0\1\u01a5\102\0\1\u01a6\56\0\1\u01a7\73\0"+
    "\1\u01a8\74\0\1\u01a9\53\0\1\u01aa\72\0\1\u01ab\73\0"+
    "\1\u01ac\74\0\1\u01ad\53\0\1\u01ae\70\0\1\u01af\66\0"+
    "\1\u01b0\70\0\1\u01b1\102\0\1\u01b2\54\0\1\u01b3\102\0"+
    "\1\u01b4\67\0\1\u01b5\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17696];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\1\1\10\1\0\2\11\1\1\1\11\1\1"+
    "\2\11\2\1\1\11\3\1\1\11\16\1\2\11\3\1"+
    "\11\11\15\1\1\11\2\1\1\11\1\1\1\11\5\1"+
    "\1\11\13\0\1\1\2\0\1\11\2\1\5\0\2\11"+
    "\7\0\1\11\7\0\3\11\26\1\1\0\1\1\1\0"+
    "\2\11\6\0\1\1\1\0\1\11\2\0\1\11\10\0"+
    "\1\11\1\0\1\11\1\0\2\1\1\11\2\0\1\11"+
    "\6\0\1\11\6\0\1\11\4\0\25\1\4\11\3\0"+
    "\1\11\1\0\1\11\4\0\4\11\4\0\1\11\1\0"+
    "\1\11\3\0\1\1\2\0\1\1\1\11\3\0\1\11"+
    "\2\0\1\11\7\0\22\1\20\0\1\11\1\0\1\11"+
    "\1\0\2\11\2\0\1\11\1\0\2\11\5\0\2\11"+
    "\17\1\5\0\2\11\13\0\1\11\1\0\3\11\1\0"+
    "\1\11\1\0\1\11\2\0\10\1\5\0\1\11\12\0"+
    "\1\11\1\0\1\11\1\0\1\11\4\1\6\0\1\11"+
    "\1\0\1\11\6\0\2\11\2\1\1\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\2\11\2\0\2\11\4\0\1\11\1\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[437];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  private Stack <IElementType> gStringStack = new Stack<IElementType>();
  private Stack <IElementType> blockStack = new Stack<IElementType>();

  private int afterComment = YYINITIAL;

  private void clearStacks(){
    gStringStack.clear();
    blockStack.clear();
  }

  private Stack<IElementType> braceCount = new Stack <IElementType>();



  _PowerShellLexer(java.io.Reader in) {
      this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _PowerShellLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 70: 
          { return EXIT;
          }
        case 110: break;
        case 68: 
          { return COCLT;
          }
        case 111: break;
        case 55: 
          { return TRY;
          }
        case 112: break;
        case 3: 
          { return LPAREN;
          }
        case 113: break;
        case 43: 
          { return GE;
          }
        case 114: break;
        case 52: 
          { return COLT;
          }
        case 115: break;
        case 80: 
          { return WHILE;
          }
        case 116: break;
        case 17: 
          { return RCURLY;
          }
        case 117: break;
        case 85: 
          { return ELSEIF;
          }
        case 118: break;
        case 104: 
          { return COICONTAINS;
          }
        case 119: break;
        case 9: 
          { return NUMBER;
          }
        case 120: break;
        case 7: 
          { return COLON;
          }
        case 121: break;
        case 75: 
          { return BREAK;
          }
        case 122: break;
        case 42: 
          { return EQ;
          }
        case 123: break;
        case 102: 
          { return COCONTAINS;
          }
        case 124: break;
        case 54: 
          { return END;
          }
        case 125: break;
        case 65: 
          { return COCGT;
          }
        case 126: break;
        case 62: 
          { return COILT;
          }
        case 127: break;
        case 89: 
          { return COIMATCH;
          }
        case 128: break;
        case 33: 
          { yybegin(YYINITIAL); return EXPSTRING_END;
          }
        case 129: break;
        case 16: 
          { return LCURLY;
          }
        case 130: break;
        case 37: 
          { return ML_COMMENT;
          }
        case 131: break;
        case 11: 
          { yybegin(IN_SINGLE_EXPSTRING);
                                                              gStringStack.push(LPAREN);
                                                              return EXPSTRING_BEGIN;
          }
        case 132: break;
        case 86: 
          { return RETURN;
          }
        case 133: break;
        case 5: 
          { return WS;
          }
        case 134: break;
        case 88: 
          { return FILTER;
          }
        case 135: break;
        case 48: 
          { return COIS;
          }
        case 136: break;
        case 108: 
          { return COINOTCONTAINS;
          }
        case 137: break;
        case 105: 
          { return COCNOTMATCH;
          }
        case 138: break;
        case 90: 
          { return COCMATCH;
          }
        case 139: break;
        case 76: 
          { return CATCH;
          }
        case 140: break;
        case 26: 
          { return COMMA;
          }
        case 141: break;
        case 59: 
          { return COIGT;
          }
        case 142: break;
        case 13: 
          { return MULT;
          }
        case 143: break;
        case 72: 
          { return DATA;
          }
        case 144: break;
        case 22: 
          { return MOD;
          }
        case 145: break;
        case 92: 
          { return PROCESS;
          }
        case 146: break;
        case 73: 
          { return COLIKE;
          }
        case 147: break;
        case 12: 
          { return DIV;
          }
        case 148: break;
        case 66: 
          { return COCNE;
          }
        case 149: break;
        case 21: 
          { return PLUS;
          }
        case 150: break;
        case 49: 
          { return CONE;
          }
        case 151: break;
        case 67: 
          { return COCLE;
          }
        case 152: break;
        case 20: 
          { return LT;
          }
        case 153: break;
        case 87: 
          { return SWITCH;
          }
        case 154: break;
        case 84: 
          { return COMATCH;
          }
        case 155: break;
        case 51: 
          { return COLE;
          }
        case 156: break;
        case 29: 
          { yypushback(1);
                                             yybegin(IN_SINGLE_EXPSTRING);
          }
        case 157: break;
        case 15: 
          { return DOT;
          }
        case 158: break;
        case 41: 
          { return DO;
          }
        case 159: break;
        case 39: 
          { return IN;
          }
        case 160: break;
        case 10: 
          { return DOLLAR;
          }
        case 161: break;
        case 27: 
          { return SEMI;
          }
        case 162: break;
        case 60: 
          { return COINE;
          }
        case 163: break;
        case 103: 
          { return COINOTMATCH;
          }
        case 164: break;
        case 50: 
          { return COAS;
          }
        case 165: break;
        case 79: 
          { return PARAM;
          }
        case 166: break;
        case 8: 
          { yybegin(IN_SINGLE_QUOTESTRING); return EXPSTRING_BEGIN;
          }
        case 167: break;
        case 99: 
          { return CONOTMATCH;
          }
        case 168: break;
        case 93: 
          { return CONOTLIKE;
          }
        case 169: break;
        case 64: 
          { return COCGE;
          }
        case 170: break;
        case 61: 
          { return COILE;
          }
        case 171: break;
        case 32: 
          { yybegin(IN_SINGLE_EXPSTRING_DOLLAR);
                                             return DOLLAR;
          }
        case 172: break;
        case 14: 
          { return SL_COMMENT;
          }
        case 173: break;
        case 19: 
          { return GT;
          }
        case 174: break;
        case 25: 
          { return RBRACK;
          }
        case 175: break;
        case 30: 
          { yybegin(IN_SINGLE_DOT);
                                             return IDENT;
          }
        case 176: break;
        case 1: 
          { return EXPSTRING_CONTENT;
          }
        case 177: break;
        case 47: 
          { return COGE;
          }
        case 178: break;
        case 107: 
          { return CONOTCONTAINS;
          }
        case 179: break;
        case 95: 
          { return CONTINUE;
          }
        case 180: break;
        case 94: 
          { return COREPLACE;
          }
        case 181: break;
        case 36: 
          { return EXPSTRING_LITERAL;
          }
        case 182: break;
        case 97: 
          { return COINOTLIKE;
          }
        case 183: break;
        case 31: 
          { blockStack.push(LPAREN);
                                             yybegin(IN_INNER_BLOCK);
                                             return LCURLY;
          }
        case 184: break;
        case 63: 
          { return COCEQ;
          }
        case 185: break;
        case 18: 
          { return ASSIGN;
          }
        case 186: break;
        case 81: 
          { return COILIKE;
          }
        case 187: break;
        case 4: 
          { return NEWLINE;
          }
        case 188: break;
        case 24: 
          { return LBRACK;
          }
        case 189: break;
        case 53: 
          { return ELLIPSIS;
          }
        case 190: break;
        case 46: 
          { return COEQ;
          }
        case 191: break;
        case 58: 
          { return COIGE;
          }
        case 192: break;
        case 98: 
          { return COIREPLACE;
          }
        case 193: break;
        case 96: 
          { return FUNCTION;
          }
        case 194: break;
        case 45: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(IN_SINGLE_IDENT);
                                             return DOT;
          }
        case 195: break;
        case 77: 
          { return THROW;
          }
        case 196: break;
        case 69: 
          { return ELSE;
          }
        case 197: break;
        case 109: 
          { return COCNOTCONTAINS;
          }
        case 198: break;
        case 40: 
          { return IF;
          }
        case 199: break;
        case 91: 
          { return FINALLY;
          }
        case 200: break;
        case 78: 
          { return UNTIL;
          }
        case 201: break;
        case 57: 
          { return COIEQ;
          }
        case 202: break;
        case 100: 
          { return COCNOTLIKE;
          }
        case 203: break;
        case 6: 
          { return MINUS;
          }
        case 204: break;
        case 44: 
          { return LE;
          }
        case 205: break;
        case 56: 
          { return FOR;
          }
        case 206: break;
        case 38: 
          { return RANGE;
          }
        case 207: break;
        case 106: 
          { return COCCONTAINS;
          }
        case 208: break;
        case 28: 
          { return EXP;
          }
        case 209: break;
        case 83: 
          { return COCLIKE;
          }
        case 210: break;
        case 23: 
          { return RPAREN;
          }
        case 211: break;
        case 74: 
          { return BEGIN;
          }
        case 212: break;
        case 71: 
          { return TRAP;
          }
        case 213: break;
        case 2: 
          { return WRONG;
          }
        case 214: break;
        case 34: 
          { yybegin(IN_SINGLE_DOT); return IDENT;
          }
        case 215: break;
        case 101: 
          { return COCREPLACE;
          }
        case 216: break;
        case 82: 
          { return COISNOT;
          }
        case 217: break;
        case 35: 
          { if (!blockStack.isEmpty()) {
                                               IElementType br = blockStack.pop();
                                             }
                                             return RCURLY;
          }
        case 218: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
